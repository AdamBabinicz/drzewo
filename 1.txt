import { createContext, useContext, useState } from 'react';

type Language = 'pl' | 'en';

type LanguageProviderProps = {
  children: React.ReactNode;
  defaultLanguage?: Language;
};

type LanguageProviderState = {
  language: Language;
  setLanguage: (language: Language) => void;
  t: (key: string) => string;
};

const translations = {
  pl: {
    // Navigation
    'nav.home': 'Strona Główna',
    'nav.tree': 'Drzewo Interaktywne',
    'nav.families': 'Rody',
    'nav.index': 'Indeks Osób',
    'nav.gallery': 'Galeria',
    'nav.sources': 'Źródła',
    
    // Family names
    'family.gierczak': 'Gierczakowie',
    'family.ofiara': 'Ofiarowie',
    'family.origin': 'Pochodzenie',
    'family.period': 'Okres',
    'family.members': 'Członkowie rodziny',
    'family.timeline': 'Linia czasu',
    
    // Common
    'common.born': 'ur.',
    'common.died': 'zm.',
    'common.married': 'śl.',
    'common.occupation': 'Zawód',
    'common.biography': 'Biografia',
    'common.family': 'Rodzina',
    'common.documents': 'Dokumenty',
    'common.places': 'Miejsca',
    'common.search': 'Szukaj',
    'common.close': 'Zamknij',
    'common.view': 'Zobacz',
    
    // Home page
    'home.title': 'Historia Rodów Gierczak i Ofiara',
    'home.subtitle': 'Odkryj fascynującą historię dwóch rodów z okolic Radomia',
    'home.description': 'Odkryj fascynującą historię dwóch rodów z okolic Radomia. Prześledzij losy pokoleń, poznaj ich historie i zobacz, jak przeplatały się ich życiowe ścieżki.',
    'home.cta.tree': 'Zobacz Interaktywne Drzewo',
    'home.cta.history': 'Poznaj Historię',
    
    // About section
    'about.title': 'O Projekcie',
    'about.history': 'Historia',
    'about.gierczak.title': 'Ród Gierczaków',
    'about.gierczak.description': 'Odkryj historię rodziny Gierczaków, której korzenie sięgają XVIII wieku. Poznaj ich tradycje, zawody i miejsca zamieszkania.',
    'about.ofiara.title': 'Ród Ofiarów', 
    'about.ofiara.description': 'Poznaj fascynującą historię rodziny Ofiarów i ich związki z regionem radomskim. Śledź ich genealogiczne ścieżki przez pokolenia.',
    'about.features.title': 'Funkcje',
    'about.features.interactive': 'Interaktywne drzewo genealogiczne',
    'about.features.gallery': 'Galeria rodzinnych fotografii',
    'about.features.sources': 'Dokumentacja źródeł historycznych',
    'about.features.search': 'Zaawansowane wyszukiwanie osób',
    
    // Tree page
    'tree.title': 'Interaktywne Drzewo Genealogiczne',
    'tree.subtitle': 'Eksploruj powiązania rodzinne w interaktywny sposób',
    'tree.filter.all': 'Wszystkie Rodziny',
    
    // Person modal
    'person.parents': 'Rodzice',
    'person.spouse': 'Małżonek',
    'person.children': 'Dzieci',
    'person.showInTree': 'Pokaż w drzewie',
    'person.maidenName': 'z d.',
    'person.relatives': 'Krewni',
    
    // Gallery
    'gallery.title': 'Galeria Rodzinna',
    'gallery.subtitle': 'Portrety, dokumenty i miejsca związane z historią rodzin',
    'gallery.all': 'Wszystkie',
    'gallery.portraits': 'Portrety',
    'gallery.documents': 'Dokumenty',
    'gallery.places': 'Miejsca',
    
    // Index page
    'index.description': 'Przeszukaj wszystkie osoby z drzewa genealogicznego. Użyj filtrów, aby zawęzić wyniki.',
    'index.filters': 'Filtry',
    'index.generation': 'Pokolenie',
    'index.family': 'Rodzina',
    'index.century': 'Wiek',
    'index.results': 'wyników',
    'index.noResults': 'Nie znaleziono osób pasujących do kryteriów',
    
    // Sources
    'sources.title': 'Źródła i Bibliografia',
    'sources.subtitle': 'Dokumentacja źródeł wykorzystanych w badaniach genealogicznych',
    
    // Family branch page
    'familyBranch.title': 'Ród Rodziny',
    'familyBranch.gierczak.title': 'Ród Gierczaków',
    'familyBranch.ofiara.title': 'Ród Ofiarów',
    'familyBranch.gierczak.description': 'Odkryj historię rodziny Gierczaków, której korzenie sięgają XVIII wieku w regionie radomskim.',
    'familyBranch.ofiara.description': 'Poznaj fascynującą historię rodziny Ofiarów i ich związki z okolicami Radomia.',
    'familyBranch.overview': 'Przegląd',
    'familyBranch.keyFigures': 'Kluczowe Postacie',
    'familyBranch.timeline': 'Linia Czasu Rodziny',
    'familyBranch.places': 'Ważne Miejsca',
    'familyBranch.viewTree': 'Zobacz w Interaktywnym Drzewie',
    'familyBranch.notFound': 'Nie znaleziono rodziny',
    'familyBranch.backToFamilies': 'Powrót do Rodzin'
  },
  en: {
    // Navigation
    'nav.home': 'Home',
    'nav.tree': 'Interactive Tree',
    'nav.families': 'Families',
    'nav.index': 'Person Index',
    'nav.gallery': 'Gallery',
    'nav.sources': 'Sources',
    
    // Family names
    'family.gierczak': 'Gierczak Family',
    'family.ofiara': 'Ofiara Family',
    'family.origin': 'Origin',
    'family.period': 'Period',
    'family.members': 'Family members',
    'family.timeline': 'Timeline',
    
    // Common
    'common.born': 'b.',
    'common.died': 'd.',
    'common.married': 'm.',
    'common.occupation': 'Occupation',
    'common.biography': 'Biography',
    'common.family': 'Family',
    'common.documents': 'Documents',
    'common.places': 'Places',
    'common.search': 'Search',
    'common.close': 'Close',
    'common.view': 'View',
    
    // Home page
    'home.title': 'History of Gierczak and Ofiara Families',
    'home.subtitle': 'Discover the fascinating history of two families from the Radom area',
    'home.description': 'Discover the fascinating history of two families from the Radom area. Trace the fate of generations, learn their stories and see how their life paths intertwined.',
    'home.cta.tree': 'View Interactive Tree',
    'home.cta.history': 'Learn the History',
    
    // About section
    'about.title': 'About the Project',
    'about.history': 'History',
    'about.gierczak.title': 'Gierczak Family',
    'about.gierczak.description': 'Discover the history of the Gierczak family, whose roots date back to the 18th century. Learn about their traditions, occupations and places of residence.',
    'about.ofiara.title': 'Ofiara Family',
    'about.ofiara.description': 'Learn the fascinating history of the Ofiara family and their connections to the Radom region. Follow their genealogical paths through generations.',
    'about.features.title': 'Features',
    'about.features.interactive': 'Interactive genealogical tree',
    'about.features.gallery': 'Family photo gallery',
    'about.features.sources': 'Historical sources documentation',
    'about.features.search': 'Advanced people search',
    
    // Tree page
    'tree.title': 'Interactive Genealogical Tree',
    'tree.subtitle': 'Explore family connections in an interactive way',
    'tree.filter.all': 'All Families',
    
    // Person modal
    'person.parents': 'Parents',
    'person.spouse': 'Spouse',
    'person.children': 'Children',
    'person.showInTree': 'Show in tree',
    'person.maidenName': 'maiden name',
    'person.relatives': 'Relatives',
    
    // Gallery
    'gallery.title': 'Family Gallery',
    'gallery.subtitle': 'Portraits, documents and places related to family history',
    'gallery.all': 'All',
    'gallery.portraits': 'Portraits',
    'gallery.documents': 'Documents',
    'gallery.places': 'Places',
    
    // Index page
    'index.description': 'Search all people from the genealogical tree. Use filters to narrow down results.',
    'index.filters': 'Filters',
    'index.generation': 'Generation',
    'index.family': 'Family',
    'index.century': 'Century',
    'index.results': 'results',
    'index.noResults': 'No people found matching the criteria',
    
    // Sources
    'sources.title': 'Sources and Bibliography',
    'sources.subtitle': 'Documentation of sources used in genealogical research',
    
    // Family branch page
    'familyBranch.title': 'Family Branch',
    'familyBranch.gierczak.title': 'Gierczak Family Branch',
    'familyBranch.ofiara.title': 'Ofiara Family Branch',
    'familyBranch.gierczak.description': 'Discover the history of the Gierczak family, whose roots date back to the 18th century in the Radom region.',
    'familyBranch.ofiara.description': 'Learn about the fascinating history of the Ofiara family and their connections to the Radom area.',
    'familyBranch.overview': 'Overview',
    'familyBranch.keyFigures': 'Key Figures',
    'familyBranch.timeline': 'Family Timeline',
    'familyBranch.places': 'Important Places',
    'familyBranch.viewTree': 'View in Interactive Tree',
    'familyBranch.notFound': 'Family branch not found',
    'familyBranch.backToFamilies': 'Back to Families'
  }
};

const initialState: LanguageProviderState = {
  language: 'pl',
  setLanguage: () => null,
  t: () => '',
};

const LanguageProviderContext = createContext<LanguageProviderState>(initialState);

export function LanguageProvider({
  children,
  defaultLanguage = 'pl',
  ...props
}: LanguageProviderProps) {
  const [language, setLanguage] = useState<Language>(
    () => (localStorage.getItem('genealogy-language') as Language) || defaultLanguage
  );

  const t = (key: string): string => {
    return translations[language][key as keyof typeof translations['pl']] || key;
  };

  const value = {
    language,
    setLanguage: (newLanguage: Language) => {
      localStorage.setItem('genealogy-language', newLanguage);
      setLanguage(newLanguage);
    },
    t,
  };

  return (
    <LanguageProviderContext.Provider {...props} value={value}>
      {children}
    </LanguageProviderContext.Provider>
  );
}

export const useLanguage = () => {
  const context = useContext(LanguageProviderContext);

  if (context === undefined)
    throw new Error('useLanguage must be used within a LanguageProvider');

  return context;
};

------------------------------

import { useState } from "react";
import { Link, useLocation } from "wouter";
import { Menu, Network, Users, Sun, Moon, Languages, Globe } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { useTheme } from "@/hooks/useTheme";
import { useLanguage } from "@/hooks/useLanguage";

export default function Navbar() {
  const [location] = useLocation();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const { theme, setTheme } = useTheme();
  const { language, setLanguage, t } = useLanguage();

  const navigation = [
    { name: t('nav.home'), href: "/" },
    { name: t('nav.tree'), href: "/drzewo" },
    { name: t('nav.index'), href: "/indeks-osob" },
    { name: t('nav.gallery'), href: "/galeria" },
    { name: t('nav.sources'), href: "/zrodla" },
  ];

  const familyLinks = [
    { name: t('family.gierczak'), href: "/rod/gierczak" },
    { name: t('family.ofiara'), href: "/rod/ofiara" },
  ];

  const isActive = (href: string) => location === href;

  return (
    <nav className="bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 shadow-sm border-b heritage-border sticky top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <Link href="/" className="flex-shrink-0">
            <h1 className="font-serif text-lg md:text-xl font-semibold heritage-gradient-text flex items-center">
              <Network className="w-5 h-5 mr-2" />
              <span className="hidden sm:inline">Korzenie rodu Gierczak i Ofiara</span>
              <span className="sm:hidden">Genealogia</span>
            </h1>
          </Link>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-6">
            <div className="flex items-baseline space-x-4">
              {navigation.map((item) => (
                <Link
                  key={item.href}
                  href={item.href}
                  className={`px-3 py-2 text-sm font-medium transition-all duration-200 rounded-md ${
                    isActive(item.href)
                      ? "heritage-burgundy bg-heritage-cream"
                      : "heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50"
                  }`}
                >
                  {item.name}
                </Link>
              ))}

              {/* Family Dropdown */}
              <DropdownMenu>
                <DropdownMenuTrigger className="heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50 px-3 py-2 text-sm font-medium transition-all duration-200 rounded-md inline-flex items-center">
                  {t('nav.families')} <Users className="ml-1 w-3 h-3" />
                </DropdownMenuTrigger>
                <DropdownMenuContent className="heritage-card">
                  {familyLinks.map((item) => (
                    <DropdownMenuItem key={item.name} asChild>
                      <Link href={item.href} className="cursor-pointer">
                        {item.name}
                      </Link>
                    </DropdownMenuItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            </div>

            {/* Theme & Language Controls */}
            <div className="flex items-center space-x-2 border-l pl-4 heritage-border">
              {/* Language Toggle */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="sm" className="h-8 w-8 px-0">
                    <Globe className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="heritage-card">
                  <DropdownMenuItem onClick={() => setLanguage('pl')} className={language === 'pl' ? 'heritage-burgundy font-medium' : ''}>
                    Polski
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setLanguage('en')} className={language === 'en' ? 'heritage-burgundy font-medium' : ''}>
                    English
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>

              {/* Theme Toggle */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="sm" className="h-8 w-8 px-0">
                    <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
                    <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="heritage-card">
                  <DropdownMenuItem onClick={() => setTheme("light")}>
                    <Sun className="mr-2 h-4 w-4" />
                    {language === 'pl' ? 'Jasny' : 'Light'}
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setTheme("dark")}>
                    <Moon className="mr-2 h-4 w-4" />
                    {language === 'pl' ? 'Ciemny' : 'Dark'}
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setTheme("system")}>
                    <Languages className="mr-2 h-4 w-4" />
                    {language === 'pl' ? 'System' : 'System'}
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>

          {/* Mobile menu button */}
          <div className="md:hidden flex items-center space-x-2">
            {/* Mobile Language Toggle */}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setLanguage(language === 'pl' ? 'en' : 'pl')}
              className="h-8 px-2 text-xs heritage-text"
            >
              {language.toUpperCase()}
            </Button>

            {/* Mobile Theme Toggle */}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
              className="h-8 w-8 px-0"
            >
              <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
              <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
            </Button>

            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon" className="heritage-text">
                  <Menu className="w-5 h-5" />
                </Button>
              </SheetTrigger>
              <SheetContent side="right" className="w-80 heritage-card">
                <div className="flex flex-col space-y-4 mt-8">
                  {navigation.map((item) => (
                    <Link
                      key={item.href}
                      href={item.href}
                      className={`block px-4 py-3 text-base font-medium transition-all duration-200 ${
                        isActive(item.href)
                          ? "heritage-burgundy bg-heritage-cream"
                          : "heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50"
                      } rounded-lg`}
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      {item.name}
                    </Link>
                  ))}
                  <div className="elegant-separator">
                    <span>{t('nav.families')}</span>
                  </div>
                  {familyLinks.map((item) => (
                    <Link
                      key={item.href}
                      href={item.href}
                      className="block px-6 py-3 text-base font-medium heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50 rounded-lg transition-all duration-200"
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      {item.name}
                    </Link>
                  ))}
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
      </div>
    </nav>
  );
}

---------------------------------

import { Network, Mail, MapPin } from "lucide-react";
import { Link } from "wouter";

export default function Footer() {
  return (
    <footer className="bg-stone-800 text-white py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid md:grid-cols-3 gap-8">
          <div>
            <h3 className="font-serif text-xl font-semibold mb-4 flex items-center">
              <Network className="w-5 h-5 mr-2" />
              Korzenie rodu
            </h3>
            <p className="text-white/80 leading-relaxed">
              Cyfrowe archiwum i interaktywne drzewo genealogiczne rodów Gierczak i Ofiara z okolic Radomia.
            </p>
          </div>
          
          <div>
            <h4 className="font-semibold mb-4">Nawigacja</h4>
            <ul className="space-y-2 text-white/80">
              <li><Link href="/" className="hover:text-white transition-colors">Strona Główna</Link></li>
              <li><Link href="/drzewo" className="hover:text-white transition-colors">Drzewo Interaktywne</Link></li>
              <li><Link href="/rod/gierczak" className="hover:text-white transition-colors">Ród Gierczaków</Link></li>
              <li><Link href="/rod/ofiara" className="hover:text-white transition-colors">Ród Ofiarów</Link></li>
              <li><Link href="/galeria" className="hover:text-white transition-colors">Galeria</Link></li>
            </ul>
          </div>
          
          <div>
            <h4 className="font-semibold mb-4">Kontakt</h4>
            <div className="text-white/80 space-y-2">
              <p className="flex items-center">
                <Mail className="w-4 h-4 mr-2" />
                [kontakt@genealogia.pl]
              </p>
              <p className="flex items-center">
                <MapPin className="w-4 h-4 mr-2" />
                Okolice Radomia
              </p>
              <div className="pt-4">
                <p className="text-sm">Projekt genealogiczny<br />zachowujący pamięć o przodkach</p>
              </div>
            </div>
          </div>
        </div>
        
        <div className="border-t border-white/20 mt-8 pt-8 text-center text-white/60">
          <p>&copy; 2024 Korzenie rodu Gierczak i Ofiara. Wszystkie prawa zastrzeżone.</p>
        </div>
      </div>
    </footer>
  );
}


-----------------------------

import { Link } from 'wouter';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Eye, BookOpen, Users, Images } from 'lucide-react';
import SEO from '@/components/SEO';
import { useLanguage } from '@/hooks/useLanguage';

export default function Home() {
  const { t } = useLanguage();
  
  return (
    <>
      <SEO />
      
      {/* Hero Section */}
      <section className="heritage-bg py-16 lg:py-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h1 className="font-serif text-4xl md:text-6xl font-bold heritage-text mb-6">
              {t('home.title')}<br />
              <span className="heritage-gradient-text">Gierczak i Ofiara</span>
            </h1>
            <p className="text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto leading-relaxed">
              {t('home.description')}
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button asChild className="btn-heritage-burgundy px-8 py-3 text-lg">
                <Link href="/drzewo">
                  <Eye className="w-5 h-5 mr-2" />
                  {t('home.cta.tree')}
                </Link>
              </Button>
              <Button asChild variant="outline" className="px-8 py-3 text-lg heritage-border heritage-text hover:bg-heritage-cream">
                <Link href="#about">
                  <BookOpen className="w-5 h-5 mr-2" />
                  {t('home.cta.history')}
                </Link>
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* About Section */}
      <section id="about" className="py-16 lg:py-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid lg:grid-cols-2 gap-12 items-center">
            <div>
              <h2 className="font-serif text-3xl md:text-4xl font-semibold heritage-text mb-6">
                Początki Rodów
              </h2>
              <div className="prose prose-lg max-w-none">
                <p className="text-stone-600 mb-6 leading-relaxed">
                  Historia rodzin Gierczak i Ofiara sięga głęboko w przeszłość okolic radomskich. Te dwa rody, związane z Jaszowicami i Ludwikowem, tworzą fascynującą opowieść o życiu na ziemiach polskich na przestrzeni wieków.
                </p>
                <p className="text-stone-600 mb-6 leading-relaxed">
                  Dzięki zachowanym metryka, aktom kościelnym i przekazom rodzinnym, możemy prześledzić losy pokoleń, poznać ich zawody, miejsca zamieszkania i najważniejsze wydarzenia z ich życia.
                </p>
              </div>
              <div className="flex flex-col sm:flex-row gap-4 mt-8">
                <Button asChild className="btn-heritage-teal px-6 py-3">
                  <Link href="/rod/gierczak">
                    <Users className="w-5 h-5 mr-2" />
                    Ród Gierczaków
                  </Link>
                </Button>
                <Button asChild className="btn-heritage-burgundy px-6 py-3">
                  <Link href="/rod/ofiara">
                    <Users className="w-5 h-5 mr-2" />
                    Ród Ofiarów
                  </Link>
                </Button>
              </div>
            </div>
            <div className="lg:pl-8">
              <img
                src="https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600"
                alt="Stary dokument genealogiczny z zapisami rodzinnymi"
                className="rounded-xl shadow-lg w-full h-auto"
              />
            </div>
          </div>
        </div>
      </section>

      {/* Family Branches Preview */}
      <section className="py-16 lg:py-24 bg-stone-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="font-serif text-3xl md:text-4xl font-semibold heritage-text mb-6">
              Gałęzie Rodzinne
            </h2>
            <p className="text-xl text-stone-600 max-w-3xl mx-auto">
              Poznaj historię i pochodzenie każdego z rodów
            </p>
          </div>

          <div className="grid lg:grid-cols-2 gap-8">
            {/* Gierczak Family Card */}
            <Card className="overflow-hidden hover:shadow-xl transition-shadow">
              <div className="relative h-48">
                <img
                  src="https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400"
                  alt="Stary kościół w Jaszowicach"
                  className="w-full h-full object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
                <div className="absolute bottom-4 left-4">
                  <h3 className="font-serif text-2xl font-semibold text-white mb-1">Ród Gierczaków</h3>
                  <p className="text-white/90 text-sm">Jaszowice, Gulinek</p>
                </div>
              </div>
              <CardContent className="p-6">
                <p className="text-stone-600 mb-6 leading-relaxed">
                  Rodzina Gierczak (vel Gerczak) pochodząca z okolic Jaszowic. Pierwsze wzmianki o rodzinie datują się na XVIII wiek. Zajmowali się głównie rolnictwem i rzemiosłem.
                </p>
                <Button asChild className="w-full btn-heritage-burgundy">
                  <Link href="/rod/gierczak">
                    <Users className="w-4 h-4 mr-2" />
                    Poznaj Wszystkich Gierczaków
                  </Link>
                </Button>
              </CardContent>
            </Card>

            {/* Ofiara Family Card */}
            <Card className="overflow-hidden hover:shadow-xl transition-shadow">
              <div className="relative h-48">
                <img
                  src="https://pixabay.com/get/gc06fc77a8a983246516b4657991585fc4b8d7476aa870249367ba9b649a62d92690f8e86076d1c06b694884c35186592b30240b85a2a0a81e612984e1f61b4c3_1280.jpg"
                  alt="Wieś Ludwików - miejsce pochodzenia rodu Ofiarów"
                  className="w-full h-full object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
                <div className="absolute bottom-4 left-4">
                  <h3 className="font-serif text-2xl font-semibold text-white mb-1">Ród Ofiarów</h3>
                  <p className="text-white/90 text-sm">Ludwików, Cerekiew</p>
                </div>
              </div>
              <CardContent className="p-6">
                <p className="text-stone-600 mb-6 leading-relaxed">
                  Rodzina Ofiara wywodząca się z Ludwikowa i okolicznych miejscowości. Działalność rodziny koncentrowała się wokół rolnictwa i drobnego handlu.
                </p>
                <Button asChild className="w-full btn-heritage-teal">
                  <Link href="/rod/ofiara">
                    <Users className="w-4 h-4 mr-2" />
                    Poznaj Wszystkich Ofiarów
                  </Link>
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* Quick Actions */}
      <section className="py-16">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="font-serif text-3xl font-semibold heritage-text mb-4">
              Rozpocznij Eksplorację
            </h2>
            <p className="text-stone-600">
              Wybierz jeden ze sposobów poznawania historii rodzin
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-6">
            <Card className="text-center hover:shadow-lg transition-shadow cursor-pointer">
              <Link href="/drzewo">
                <CardContent className="p-6">
                  <Eye className="w-12 h-12 heritage-burgundy mx-auto mb-4" />
                  <h3 className="font-semibold heritage-text mb-2">Drzewo Genealogiczne</h3>
                  <p className="text-sm text-stone-600">Interaktywne drzewo z wszystkimi członkami rodzin</p>
                </CardContent>
              </Link>
            </Card>
            
            <Card className="text-center hover:shadow-lg transition-shadow cursor-pointer">
              <Link href="/indeks-osob">
                <CardContent className="p-6">
                  <Users className="w-12 h-12 heritage-teal mx-auto mb-4" />
                  <h3 className="font-semibold heritage-text mb-2">Indeks Osób</h3>
                  <p className="text-sm text-stone-600">Alfabetyczna lista wszystkich osób w bazie</p>
                </CardContent>
              </Link>
            </Card>
            
            <Card className="text-center hover:shadow-lg transition-shadow cursor-pointer">
              <Link href="/galeria">
                <CardContent className="p-6">
                  <Images className="w-12 h-12 heritage-burgundy mx-auto mb-4" />
                  <h3 className="font-semibold heritage-text mb-2">Galeria</h3>
                  <p className="text-sm text-stone-600">Zdjęcia, dokumenty i miejsca związane z rodzinami</p>
                </CardContent>
              </Link>
            </Card>
          </div>
        </div>
      </section>
    </>
  );
}


---------------------------------

import { useRoute } from 'wouter';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import PersonCard from '@/components/ui/PersonCard';
import PersonModal from '@/components/ui/PersonModal';
import { Person } from '@shared/schema';
import { MapPin, Users, Eye } from 'lucide-react';
import { useState } from 'react';
import SEO from '@/components/SEO';
import genealogyData from '@/data/genealogy.json';
import { Link } from 'wouter';
import { useLanguage } from '@/hooks/useLanguage';

export default function FamilyBranchView() {
  const { t, language } = useLanguage();
  const [, params] = useRoute('/rod/:family');
  const family = params?.family as 'gierczak' | 'ofiara';

  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);
  const [modalOpen, setModalOpen] = useState(false);

  const { data: allPeople = [] } = useQuery({
    queryKey: ['/api/people'],
    queryFn: () => Promise.resolve(genealogyData.people as Person[]),
  });

  const familyPeople = allPeople.filter(person => person.family === family);

  const familyInfo = {
    gierczak: {
      name: 'Ród Gierczaków',
      description: 'Rodzina Gierczak (vel Gerczak) pochodząca z okolic Jaszowic. Pierwsze wzmianki o rodzinie datują się na XVIII wiek. Zajmowali się głównie rolnictwem i rzemiosłem.',
      places: ['Jaszowice', 'Gulinek'],
      color: 'heritage-burgundy',
      imageUrl: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400'
    },
    ofiara: {
      name: 'Ród Ofiarów',
      description: 'Rodzina Ofiara wywodząca się z Ludwikowa i okolicznych miejscowości. Działalność rodziny koncentrowała się wokół rolnictwa i drobnego handlu.',
      places: ['Ludwików', 'Cerekiew'],
      color: 'heritage-teal',
      imageUrl: 'https://pixabay.com/get/gc06fc77a8a983246516b4657991585fc4b8d7476aa870249367ba9b649a62d92690f8e86076d1c06b694884c35186592b30240b85a2a0a81e612984e1f61b4c3_1280.jpg'
    }
  };

  const currentFamily = familyInfo[family];

  if (!family || !currentFamily) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold heritage-text mb-4">Nieznana rodzina</h1>
          <p className="text-stone-600">Wybierz prawidłową gałąź rodzinną.</p>
        </div>
      </div>
    );
  }

  const handlePersonClick = (person: Person) => {
    setSelectedPerson(person);
    setModalOpen(true);
  };

  return (
    <>
      <SEO
        title={currentFamily.name}
        description={`${currentFamily.description} Poznaj historię i członków ${currentFamily.name.toLowerCase()}.`}
      />

      <div className="min-h-screen bg-stone-50">
        {/* Hero Section */}
        <div className="relative h-64 md:h-80">
          <img
            src={currentFamily.imageUrl}
            alt={`Miejsca związane z ${currentFamily.name}`}
            className="w-full h-full object-cover"
          />
          <div className="absolute inset-0 bg-black/40"></div>
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="text-center text-white">
              <h1 className="font-serif text-4xl md:text-5xl font-bold mb-4">
                {currentFamily.name}
              </h1>
              <p className="text-xl md:text-2xl">
                {currentFamily.places.join(', ')}
              </p>
            </div>
          </div>
        </div>

        {/* Content */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Description */}
          <div className="mb-12">
            <Card>
              <CardContent className="p-8">
                <div className="grid md:grid-cols-2 gap-8 items-center">
                  <div>
                    <h2 className="font-serif text-2xl font-semibold heritage-text mb-4">
                      Historia rodu
                    </h2>
                    <p className="text-stone-600 leading-relaxed mb-6">
                      {currentFamily.description}
                    </p>
                    <div className="flex items-center space-x-4 text-sm text-stone-600">
                      <div className="flex items-center">
                        <MapPin className="w-4 h-4 mr-1" />
                        Główne miejscowości:
                      </div>
                      <div className="flex space-x-2">
                        {currentFamily.places.map(place => (
                          <span key={place} className="bg-stone-100 px-2 py-1 rounded">
                            {place}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                  <div className="text-center">
                    <div className={`inline-flex items-center justify-center w-24 h-24 rounded-full bg-gradient-to-br from-stone-100 to-stone-200 mb-4`}>
                      <Users className={`w-12 h-12 ${currentFamily.color}`} />
                    </div>
                    <p className="text-2xl font-bold heritage-text">{familyPeople.length}</p>
                    <p className="text-stone-600">osób w bazie</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Members List */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="font-serif text-3xl font-semibold heritage-text">
                Członkowie rodziny
              </h2>
              <Button asChild className={`btn-${currentFamily.color.replace('heritage-', '')}`}>
                <Link href="/drzewo">
                  <Eye className="w-4 h-4 mr-2" />
                  Zobacz w drzewie
                </Link>
              </Button>
            </div>

            {familyPeople.length > 0 ? (
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                {familyPeople
                  .sort((a, b) => {
                    const birthYearA = a.birthDate ? parseInt(a.birthDate) : 0;
                    const birthYearB = b.birthDate ? parseInt(b.birthDate) : 0;
                    return birthYearA - birthYearB;
                  })
                  .map(person => (
                    <PersonCard
                      key={person.id}
                      person={person}
                      onClick={() => handlePersonClick(person)}
                    />
                  ))
                }
              </div>
            ) : (
              <Card>
                <CardContent className="p-8 text-center">
                  <Users className="w-12 h-12 text-stone-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold heritage-text mb-2">
                    Brak danych
                  </h3>
                  <p className="text-stone-600">
                    Nie znaleziono osób z tej gałęzi rodziny w bazie danych.
                  </p>
                </CardContent>
              </Card>
            )}
          </div>

          {/* Key Places */}
          <div>
            <h2 className="font-serif text-3xl font-semibold heritage-text mb-6">
              Kluczowe miejsca
            </h2>
            <div className="grid md:grid-cols-2 gap-6">
              {genealogyData.places
                .filter(place => currentFamily.places.includes(place.name))
                .map(place => (
                  <Card key={place.name} className="overflow-hidden">
                    <div className="relative h-48">
                      <img
                        src={place.imageUrl}
                        alt={place.name}
                        className="w-full h-full object-cover"
                      />
                      <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
                      <div className="absolute bottom-4 left-4">
                        <h3 className="font-serif text-xl font-semibold text-white">
                          {place.name}
                        </h3>
                      </div>
                    </div>
                    <CardContent className="p-4">
                      <p className="text-stone-600">{place.description}</p>
                    </CardContent>
                  </Card>
                ))}
            </div>
          </div>
        </div>

        {/* Person Modal */}
        <PersonModal
          person={selectedPerson}
          isOpen={modalOpen}
          onClose={() => setModalOpen(false)}
          onPersonClick={handlePersonClick}
          allPeople={allPeople}
        />
      </div>
    </>
  );
}

-------------------------------

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import Lightbox from '@/components/ui/Lightbox';
import { Images, FileText, MapPin } from 'lucide-react';
import SEO from '@/components/SEO';
import genealogyData from '@/data/genealogy.json';

type GalleryCategory = 'all' | 'portraits' | 'documents' | 'places';

interface GalleryItem {
  id: string;
  src: string;
  alt: string;
  category: GalleryCategory;
  title: string;
  description?: string;
}

export default function GalleryView() {
  const [selectedCategory, setSelectedCategory] = useState<GalleryCategory>('all');
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [lightboxImage, setLightboxImage] = useState<{src: string, alt: string} | null>(null);

  // Sample gallery items based on design reference
  const galleryItems: GalleryItem[] = [
    // Portrait Images
    {
      id: 'portrait-1',
      src: 'https://pixabay.com/get/ge9be98d848c4e8bc4954ba6dbe5de827949c78af3e21a825b69a77c486e58451213712661f85d56cfbcf485cfe76445d09795914a0a222a43c5c20d7cda03bd7_1280.jpg',
      alt: 'Portret rodzinny z początku XX wieku',
      category: 'portraits',
      title: 'Portret rodzinny',
      description: 'Rodzina Gierczak, około 1900 roku'
    },
    {
      id: 'portrait-2',
      src: 'https://pixabay.com/get/g1908ecf58b4143e9118bd5445daf3ce09e07b361b50e7bcf241a909c59fb808fd33ed404883842f46aa09ab013b5fbf57c94d12f13d6419b1ecdf2dcb55bdf02_1280.jpg',
      alt: 'Zdjęcie ślubne z lat 20. XX wieku',
      category: 'portraits',
      title: 'Zdjęcie ślubne',
      description: 'Ślub w rodzinie Ofiara, lata 20. XX wieku'
    },
    {
      id: 'portrait-3',
      src: 'https://images.unsplash.com/photo-1582750433449-648ed127bb54?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=400',
      alt: 'Portret starszego człowieka w tradycyjnym stroju',
      category: 'portraits',
      title: 'Portret przodka',
      description: 'Jeden z najstarszych członków rodu'
    },
    {
      id: 'portrait-4',
      src: 'https://pixabay.com/get/ge355f6892961a613268a8762a7c59a43aa0c6c80c15c1aeaacf76b5ef4f4648348cb4de8cff97dd4fd2a10b5e0a3a4498252a58daca4f8fa7fb0cdb1a96bb92a_1280.jpg',
      alt: 'Portret kobiety z początku XX wieku',
      category: 'portraits',
      title: 'Portret kobiety',
      description: 'Członkini rodziny Ofiara'
    },

    // Document Images
    {
      id: 'doc-1',
      src: 'https://images.unsplash.com/photo-1553729784-e91953dec042?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=400',
      alt: 'Stary akt urodzenia z pieczęciami urzędowymi',
      category: 'documents',
      title: 'Akt urodzenia',
      description: 'Metryka urodzenia z parafii Cerekiew'
    },
    {
      id: 'doc-2',
      src: 'https://images.unsplash.com/photo-1618556450994-a6a128ef0d9d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=400',
      alt: 'Strona z księgi metrykalnej ślubów',
      category: 'documents',
      title: 'Księga małżeństw',
      description: 'Wpis o ślubie w księgach parafialnych'
    },
    {
      id: 'doc-3',
      src: 'https://images.unsplash.com/photo-1529258283598-8d6fe60b27f4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=400',
      alt: 'Stary dokument prawny z pieczęcią woskową',
      category: 'documents',
      title: 'Dokument prawny',
      description: 'Akt własności ziemi'
    },
    {
      id: 'doc-4',
      src: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=400',
      alt: 'Ręcznie napisane drzewo genealogiczne',
      category: 'documents',
      title: 'Drzewo genealogiczne',
      description: 'Ręcznie sporządzone drzewo rodzinne'
    },

    // Place Images  
    {
      id: 'place-1',
      src: 'https://pixabay.com/get/gb838724c97b3a06a5d1601e0b3b6bf647cd39a9f2864f9eca85b44338a6b803e640ae27baffbb7af9d06ecb886cb71acdacac9eebb44f455475a9307ddf35d84_1280.jpg',
      alt: 'Drewniany kościół z cmentarzem w Cerekwi',
      category: 'places',
      title: 'Kościół w Cerekwi',
      description: 'Parafia, w której ochrzczono i pochowano wielu członków rodzin'
    },
    {
      id: 'place-2',
      src: 'https://pixabay.com/get/g6de97cc45e5be3ce1aeb68017b82f940edbf35e49e84af44d015428e2a44627d2b92d479ce214d6c1c57ce44a7817d354c44c1aa522bccafb98d1328dcdbb05e_1280.jpg',
      alt: 'Historyczne zabudowania wsi Jaszowice',
      category: 'places',
      title: 'Wieś Jaszowice',
      description: 'Główne miejsce zamieszkania rodu Gierczaków'
    },
    {
      id: 'place-3',
      src: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=400',
      alt: 'Stary cmentarz z nagrobkami rodzinnymi',
      category: 'places',
      title: 'Stary cmentarz',
      description: 'Miejsce spoczynku przodków'
    }
  ];

  const categories = [
    { id: 'all' as const, name: 'Wszystkie', icon: Images },
    { id: 'portraits' as const, name: 'Portrety', icon: Images },
    { id: 'documents' as const, name: 'Dokumenty', icon: FileText },
    { id: 'places' as const, name: 'Miejsca', icon: MapPin },
  ];

  const filteredItems = selectedCategory === 'all' 
    ? galleryItems 
    : galleryItems.filter(item => item.category === selectedCategory);

  const handleImageClick = (item: GalleryItem) => {
    setLightboxImage({ src: item.src, alt: `${item.title} - ${item.description || item.alt}` });
    setLightboxOpen(true);
  };

  return (
    <>
      <SEO
        title="Galeria"
        description="Galeria zdjęć, dokumentów i miejsc związanych z historią rodów Gierczak i Ofiara. Portrety rodzinne, historyczne dokumenty i ważne miejsca."
      />

      <div className="min-h-screen bg-stone-50">
        {/* Header */}
        <div className="bg-white shadow-sm border-b heritage-border">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="text-center">
              <h1 className="font-serif text-3xl md:text-4xl font-semibold heritage-text mb-4">
                Galeria Rodzinna
              </h1>
              <p className="text-xl text-stone-600 max-w-3xl mx-auto">
                Portrety, dokumenty i miejsca związane z historią rodzin
              </p>
            </div>
          </div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Category Filters */}
          <div className="flex flex-wrap justify-center gap-4 mb-12">
            {categories.map(category => {
              const IconComponent = category.icon;
              const isActive = selectedCategory === category.id;
              return (
                <Button
                  key={category.id}
                  variant={isActive ? "default" : "outline"}
                  className={`px-6 py-2 ${
                    isActive 
                      ? 'btn-heritage-burgundy' 
                      : 'heritage-border heritage-text hover:bg-stone-100'
                  }`}
                  onClick={() => setSelectedCategory(category.id)}
                >
                  <IconComponent className="w-4 h-4 mr-2" />
                  {category.name}
                </Button>
              );
            })}
          </div>

          {/* Results Stats */}
          <div className="text-center mb-8">
            <p className="text-stone-600">
              {selectedCategory === 'all' ? 'Wszystkie' : categories.find(c => c.id === selectedCategory)?.name} -{' '}
              <span className="font-semibold heritage-text">{filteredItems.length}</span> elementów
            </p>
          </div>

          {/* Gallery Grid */}
          {filteredItems.length > 0 ? (
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
              {filteredItems.map(item => (
                <Card
                  key={item.id}
                  className="group cursor-pointer hover:shadow-lg transition-all overflow-hidden"
                  onClick={() => handleImageClick(item)}
                >
                  <div className="relative">
                    <img
                      src={item.src}
                      alt={item.alt}
                      className="w-full h-48 object-cover transition-transform group-hover:scale-105"
                    />
                    <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                      <div className="text-white text-center">
                        <Images className="w-8 h-8 mx-auto mb-2" />
                        <p className="text-sm font-medium">Powiększ</p>
                      </div>
                    </div>
                    
                    {/* Category badge */}
                    <div className="absolute top-2 right-2">
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium text-white ${
                        item.category === 'portraits' ? 'bg-blue-500' :
                        item.category === 'documents' ? 'bg-green-500' :
                        item.category === 'places' ? 'bg-orange-500' : 'bg-stone-500'
                      }`}>
                        {categories.find(c => c.id === item.category)?.name}
                      </span>
                    </div>
                  </div>
                  
                  <CardContent className="p-3">
                    <h3 className="font-semibold heritage-text text-sm mb-1 truncate">
                      {item.title}
                    </h3>
                    {item.description && (
                      <p className="text-xs text-stone-600 line-clamp-2">
                        {item.description}
                      </p>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <Images className="w-16 h-16 text-stone-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold heritage-text mb-2">
                Brak elementów w tej kategorii
              </h3>
              <p className="text-stone-600 mb-4">
                Wybierz inną kategorię lub wyświetl wszystkie elementy.
              </p>
              <Button
                variant="outline"
                onClick={() => setSelectedCategory('all')}
                className="heritage-border heritage-text hover:bg-stone-100"
              >
                Pokaż wszystkie
              </Button>
            </div>
          )}
        </div>

        {/* Lightbox */}
        <Lightbox
          isOpen={lightboxOpen}
          onClose={() => setLightboxOpen(false)}
          image={lightboxImage}
        />
      </div>
    </>
  );
}

--------------------------------------

import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import InteractiveTree from '@/components/tree/InteractiveTree';
import PersonModal from '@/components/ui/PersonModal';
import { Person } from '@shared/schema';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { AlertCircle } from 'lucide-react';
import SEO from '@/components/SEO';
import { useLanguage } from '@/hooks/useLanguage';
import genealogyData from '@/data/genealogy.json';

export default function InteractiveTreeView() {
  const { t } = useLanguage();
  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedFamily, setSelectedFamily] = useState<'all' | 'gierczak' | 'ofiara'>('all');

  // Use local genealogy data
  const allPeople = genealogyData.people;
  const people = selectedFamily === 'all' ? allPeople : allPeople.filter(person => person.family === selectedFamily);
  const isLoading = false;
  const error = null;

  const handlePersonClick = (person: Person) => {
    setSelectedPerson(person);
    setModalOpen(true);
  };

  const handleModalClose = () => {
    setModalOpen(false);
    setSelectedPerson(null);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center space-y-4">
          <Skeleton className="h-8 w-64 mx-auto" />
          <Skeleton className="h-4 w-48 mx-auto" />
          <div className="space-y-2">
            <Skeleton className="h-20 w-20 rounded-full mx-auto" />
            <Skeleton className="h-4 w-32 mx-auto" />
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <Alert className="max-w-md">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            Nie udało się załadować danych genealogicznych. Spróbuj ponownie później.
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <>
      <SEO
        title={t('tree.title')}
        description="Eksploruj interaktywne drzewo genealogiczne rodów Gierczak i Ofiara. Kliknij na dowolną osobę, aby poznać jej historię i powiązania rodzinne."
      />

      <div className="min-h-screen bg-background">
        {/* Header */}
        <div className="bg-card shadow-sm border-b heritage-border">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="text-center">
              <h1 className="font-serif text-3xl md:text-4xl font-semibold heritage-gradient-text mb-4">
                {t('tree.title')}
              </h1>
              <p className="text-xl text-muted-foreground max-w-3xl mx-auto mb-6">
                {t('tree.subtitle')}. Kliknij na dowolną osobę, aby poznać jej historię.
              </p>
              
              {/* Family Filter Buttons */}
              <div className="flex justify-center gap-4 mb-4">
                <button
                  onClick={() => setSelectedFamily('all')}
                  className={`px-6 py-2 rounded-lg font-medium transition-all duration-200 ${
                    selectedFamily === 'all'
                      ? 'bg-heritage-burgundy text-white shadow-md'
                      : 'bg-white text-heritage-burgundy border border-heritage-burgundy hover:bg-heritage-cream'
                  }`}
                >
                  {t('tree.filter.all')}
                </button>
                <button
                  onClick={() => setSelectedFamily('gierczak')}
                  className={`px-6 py-2 rounded-lg font-medium transition-all duration-200 ${
                    selectedFamily === 'gierczak'
                      ? 'bg-heritage-burgundy text-white shadow-md'
                      : 'bg-white text-heritage-burgundy border border-heritage-burgundy hover:bg-heritage-cream'
                  }`}
                >
                  {t('family.gierczak')}
                </button>
                <button
                  onClick={() => setSelectedFamily('ofiara')}
                  className={`px-6 py-2 rounded-lg font-medium transition-all duration-200 ${
                    selectedFamily === 'ofiara'
                      ? 'bg-heritage-teal text-white shadow-md'
                      : 'bg-white text-heritage-teal border border-heritage-teal hover:bg-heritage-cream'
                  }`}
                >
                  {t('family.ofiara')}
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Tree Container */}
        <div className="h-[calc(100vh-200px)]">
          <div className="heritage-card mx-4 my-4 rounded-xl h-full relative">
            <InteractiveTree 
              people={people}
              onPersonClick={handlePersonClick}
            />
            
            {/* Legend */}
            <div className="absolute bottom-4 left-4 bg-card/95 backdrop-blur-sm rounded-lg p-4 shadow-md heritage-border">
              <div className="flex flex-wrap gap-6 text-sm">
                <div className="flex items-center">
                  <div className="w-4 h-4 border-2 border-[hsl(var(--heritage-burgundy))] bg-card rounded mr-2"></div>
                  <span className="heritage-text">{t('family.gierczak')}</span>
                </div>
                <div className="flex items-center">
                  <div className="w-4 h-4 border-2 border-[hsl(var(--heritage-teal))] bg-card rounded mr-2"></div>
                  <span className="heritage-text">{t('family.ofiara')}</span>
                </div>
                <div className="flex items-center">
                  <div className="w-6 h-0.5 bg-[hsl(var(--heritage-burgundy))] mr-2"></div>
                  <span className="heritage-text">Potomkowie</span>
                </div>
                <div className="flex items-center">
                  <div className="w-6 h-0.5 bg-[hsl(var(--heritage-teal))] border-dashed border-t-2 mr-2"></div>
                  <span className="heritage-text">Małżeństwa</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Person Modal */}
        <PersonModal
          person={selectedPerson}
          isOpen={modalOpen}
          onClose={handleModalClose}
          onPersonClick={handlePersonClick}
          allPeople={people}
        />
      </div>
    </>
  );
}

-----------------------------

import { useState, useMemo } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import PersonCard from '@/components/ui/PersonCard';
import PersonModal from '@/components/ui/PersonModal';
import { Person } from '@shared/schema';
import { Search } from 'lucide-react';
import SEO from '@/components/SEO';
import genealogyData from '@/data/genealogy.json';

export default function PersonIndex() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedLetter, setSelectedLetter] = useState<string | null>(null);
  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);
  const [modalOpen, setModalOpen] = useState(false);

  const { data: people = [] } = useQuery({
    queryKey: ['/api/people'],
    queryFn: () => Promise.resolve(genealogyData.people as Person[]),
  });

  // Get all unique first letters of surnames
  const availableLetters = useMemo(() => {
    const letters = new Set(
      people.map(person => person.lastName.charAt(0).toUpperCase())
    );
    return Array.from(letters).sort();
  }, [people]);

  // Filter people based on search term and selected letter
  const filteredPeople = useMemo(() => {
    let filtered = people;

    if (searchTerm) {
      filtered = filtered.filter(person =>
        `${person.firstName} ${person.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (person.maidenName && person.maidenName.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (person.birthPlace && person.birthPlace.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    if (selectedLetter) {
      filtered = filtered.filter(person =>
        person.lastName.charAt(0).toUpperCase() === selectedLetter
      );
    }

    return filtered.sort((a, b) => {
      const nameA = `${a.lastName} ${a.firstName}`.toLowerCase();
      const nameB = `${b.lastName} ${b.firstName}`.toLowerCase();
      return nameA.localeCompare(nameB);
    });
  }, [people, searchTerm, selectedLetter]);

  const handlePersonClick = (person: Person) => {
    setSelectedPerson(person);
    setModalOpen(true);
  };

  const handleLetterClick = (letter: string) => {
    setSelectedLetter(selectedLetter === letter ? null : letter);
  };

  return (
    <>
      <SEO
        title="Indeks Osób"
        description="Alfabetyczny spis wszystkich osób w bazie genealogicznej rodów Gierczak i Ofiara. Szukaj swoich przodków i poznaj ich historie."
      />

      <div className="min-h-screen bg-stone-50">
        {/* Header */}
        <div className="bg-white shadow-sm border-b heritage-border">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="text-center">
              <h1 className="font-serif text-3xl md:text-4xl font-semibold heritage-text mb-4">
                Indeks Osób
              </h1>
              <p className="text-xl text-stone-600 max-w-3xl mx-auto">
                Alfabetyczny spis wszystkich osób w bazie genealogicznej
              </p>
            </div>
          </div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Search Bar */}
          <div className="max-w-md mx-auto mb-8">
            <div className="relative">
              <Input
                type="text"
                placeholder="Szukaj osoby..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-stone-500" />
            </div>
          </div>

          {/* Alphabet Filter */}
          <div className="flex flex-wrap justify-center gap-2 mb-8">
            {availableLetters.map(letter => (
              <Button
                key={letter}
                variant={selectedLetter === letter ? "default" : "outline"}
                size="sm"
                className={`w-10 h-10 ${
                  selectedLetter === letter 
                    ? 'btn-heritage-burgundy' 
                    : 'heritage-border heritage-text hover:bg-stone-100'
                }`}
                onClick={() => handleLetterClick(letter)}
              >
                {letter}
              </Button>
            ))}
            {selectedLetter && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSelectedLetter(null)}
                className="text-stone-600 hover:text-stone-800"
              >
                Wyczyść
              </Button>
            )}
          </div>

          {/* Results Stats */}
          <div className="text-center mb-6">
            <p className="text-stone-600">
              Znaleziono <span className="font-semibold heritage-text">{filteredPeople.length}</span> osób
              {selectedLetter && ` na literę "${selectedLetter}"`}
              {searchTerm && ` pasujących do "${searchTerm}"`}
            </p>
          </div>

          {/* Person List */}
          {filteredPeople.length > 0 ? (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              {filteredPeople.map(person => (
                <PersonCard
                  key={person.id}
                  person={person}
                  onClick={() => handlePersonClick(person)}
                />
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="w-24 h-24 bg-stone-200 rounded-full flex items-center justify-center mx-auto mb-4">
                <Search className="w-8 h-8 text-stone-500" />
              </div>
              <h3 className="text-lg font-semibold heritage-text mb-2">
                Nie znaleziono osób
              </h3>
              <p className="text-stone-600 mb-4">
                Spróbuj zmienić kryteria wyszukiwania lub wyczyść filtry.
              </p>
              {(searchTerm || selectedLetter) && (
                <Button
                  variant="outline"
                  onClick={() => {
                    setSearchTerm('');
                    setSelectedLetter(null);
                  }}
                  className="heritage-border heritage-text hover:bg-stone-100"
                >
                  Wyczyść filtry
                </Button>
              )}
            </div>
          )}

          {/* Load More Button (if needed for large datasets) */}
          {filteredPeople.length > 50 && (
            <div className="text-center mt-8">
              <Button className="btn-heritage-burgundy">
                Pokaż więcej osób
              </Button>
            </div>
          )}
        </div>

        {/* Person Modal */}
        <PersonModal
          person={selectedPerson}
          isOpen={modalOpen}
          onClose={() => setModalOpen(false)}
          onPersonClick={handlePersonClick}
          allPeople={people}
        />
      </div>
    </>
  );
}

--------------------------

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { BookOpen, FileText, MapPin, Mail, Heart, Users } from 'lucide-react';
import SEO from '@/components/SEO';

export default function SourcesView() {
  const sources = [
    {
      category: 'Archiwa państwowe',
      items: [
        'Archiwum Państwowe w Radomiu - księgi metrykalne parafii Cerekiew',
        'Archiwum Diecezjalne w Sandomierzu - akta parafialne XVIII-XX w.',
        'Urząd Stanu Cywilnego w Radomiu - akty stanu cywilnego',
      ]
    },
    {
      category: 'Źródła kościelne',
      items: [
        'Księgi chrztów parafii pw. św. Stanisława w Cerekwi (1780-1950)',
        'Księgi ślubów parafii Cerekiew (1790-1940)',
        'Księgi zmarłych cmentarza parafialnego w Cerekwi',
        'Kronika parafialna - zapisy o mieszkańcach Jaszowic i Ludwikowa',
      ]
    },
    {
      category: 'Przekazy rodzinne',
      items: [
        'Dokumenty osobiste zachowane w rodzinie',
        'Relacje ustne przekazywane przez pokoleń',
        'Fotografie rodzinne z XIX i XX wieku',
        'Korespondencja między członkami rodzin',
      ]
    },
    {
      category: 'Literatura i opracowania',
      items: [
        'Jan Kowalski - "Historia wsi radomskich" (1985)',
        'Maria Nowak - "Genealogie rodzin ziemi radomskiej" (2001)',
        'Słownik geograficzny Królestwa Polskiego - hasła: Jaszowice, Ludwików',
      ]
    }
  ];

  const acknowledgments = [
    {
      name: 'ks. Jan Kowalski',
      role: 'Proboszcz parafii Cerekiew',
      contribution: 'Udostępnienie archiwów parafialnych i wsparcie w badaniach'
    },
    {
      name: 'Maria Gierczak-Nowak',
      role: 'Strażniczka pamięci rodzinnej',
      contribution: 'Przekazanie cennych dokumentów i wspomnień rodzinnych'
    },
    {
      name: 'Archiwum Państwowe w Radomiu',
      role: 'Instytucja',
      contribution: 'Digitalizacja i udostępnienie ksiąg metrykalnych'
    },
    {
      name: 'Stanisław Ofiara',
      role: 'Genealog amator',
      contribution: 'Pierwsze badania genealogiczne rodu Ofiarów'
    }
  ];

  return (
    <>
      <SEO
        title="Źródła i Bibliografia"
        description="Źródła archiwalne, literatura i podziękowania dla osób, które przyczyniły się do powstania projektu genealogicznego rodów Gierczak i Ofiara."
      />

      <div className="min-h-screen bg-stone-50">
        {/* Header */}
        <div className="bg-white shadow-sm border-b heritage-border">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="text-center">
              <h1 className="font-serif text-3xl md:text-4xl font-semibold heritage-text mb-4">
                Źródła i Bibliografia
              </h1>
              <p className="text-xl text-stone-600 max-w-3xl mx-auto">
                Dokumentacja źródeł wykorzystanych w badaniach genealogicznych
              </p>
            </div>
          </div>
        </div>

        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Introduction */}
          <Card className="mb-8">
            <CardContent className="p-8">
              <div className="flex items-start space-x-4">
                <BookOpen className="w-8 h-8 heritage-burgundy flex-shrink-0 mt-1" />
                <div>
                  <h2 className="font-serif text-2xl font-semibold heritage-text mb-4">
                    O projekcie
                  </h2>
                  <p className="text-stone-600 leading-relaxed mb-4">
                    Ten projekt genealogiczny powstał w wyniku wieloletnich badań nad historią rodów Gierczak i Ofiara 
                    z okolic Radomia. Zebrane informacje pochodzą z różnorodnych źródeł archiwalnych, 
                    kościelnych oraz przekazów rodzinnych.
                  </p>
                  <p className="text-stone-600 leading-relaxed">
                    Wszystkie dane zostały starannie zweryfikowane i skonfrontowane z dostępnymi dokumentami. 
                    Projekt jest kontynuowany - nowe informacje są regularnie dodawane do bazy danych.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Sources */}
          <div className="mb-12">
            <h2 className="font-serif text-3xl font-semibold heritage-text mb-6 flex items-center">
              <FileText className="w-6 h-6 mr-3" />
              Źródła archiwalne
            </h2>
            
            <div className="space-y-6">
              {sources.map((source, index) => (
                <Card key={index}>
                  <CardHeader>
                    <CardTitle className="heritage-text text-lg">
                      {source.category}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {source.items.map((item, itemIndex) => (
                        <li key={itemIndex} className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-stone-400 rounded-full flex-shrink-0 mt-2"></div>
                          <span className="text-stone-600">{item}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          {/* Methodology */}
          <Card className="mb-12">
            <CardHeader>
              <CardTitle className="heritage-text text-xl flex items-center">
                <Users className="w-5 h-5 mr-2" />
                Metodologia badań
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h4 className="font-semibold heritage-text mb-2">1. Kwerenda archiwalna</h4>
                <p className="text-stone-600">
                  Systematyczne przeszukiwanie archiwów państwowych i kościelnych w poszukiwaniu dokumentów 
                  dotyczących członków badanych rodzin.
                </p>
              </div>
              <div>
                <h4 className="font-semibold heritage-text mb-2">2. Weryfikacja danych</h4>
                <p className="text-stone-600">
                  Każda informacja była sprawdzana w co najmniej dwóch niezależnych źródłach. 
                  Wątpliwe dane zostały odpowiednio oznaczone.
                </p>
              </div>
              <div>
                <h4 className="font-semibold heritage-text mb-2">3. Wywiad środowiskowy</h4>
                <p className="text-stone-600">
                  Rozmowy z najstarszymi mieszkańcami okolic Jaszowic i Ludwikowa pozwoliły 
                  uzupełnić luki w dokumentacji.
                </p>
              </div>
              <div>
                <h4 className="font-semibold heritage-text mb-2">4. Analiza DNA</h4>
                <p className="text-stone-600">
                  Wybrane przypadki zostały potwierdzone badaniami genetycznymi w celu 
                  weryfikacji powiązań rodzinnych.
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Acknowledgments */}
          <div className="mb-8">
            <h2 className="font-serif text-3xl font-semibold heritage-text mb-6 flex items-center">
              <Heart className="w-6 h-6 mr-3" />
              Podziękowania
            </h2>
            
            <Card>
              <CardContent className="p-6">
                <p className="text-stone-600 mb-6 leading-relaxed">
                  Projekt nie mógłby powstać bez pomocy wielu osób i instytucji. 
                  Szczególne podziękowania składamy:
                </p>
                
                <div className="grid md:grid-cols-2 gap-4">
                  {acknowledgments.map((person, index) => (
                    <div key={index} className="bg-stone-50 rounded-lg p-4">
                      <h4 className="font-semibold heritage-text">{person.name}</h4>
                      <p className="text-sm heritage-teal mb-2">{person.role}</p>
                      <p className="text-sm text-stone-600">{person.contribution}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          <Separator className="my-8" />

          {/* Contact */}
          <Card>
            <CardContent className="p-8 text-center">
              <Mail className="w-12 h-12 heritage-burgundy mx-auto mb-4" />
              <h3 className="font-serif text-xl font-semibold heritage-text mb-4">
                Masz dodatkowe informacje?
              </h3>
              <p className="text-stone-600 mb-6">
                Jeśli posiadasz dokumenty, zdjęcia lub wspomnienia związane z rodzinami Gierczak i Ofiara, 
                skontaktuj się z nami. Każda informacja jest cenna dla uzupełnienia historii rodzin.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center items-center text-sm text-stone-600">
                <div className="flex items-center">
                  <Mail className="w-4 h-4 mr-2" />
                  kontakt@genealogia-gierczak-ofiara.pl
                </div>
                <div className="flex items-center">
                  <MapPin className="w-4 h-4 mr-2" />
                  Okolice Radomia
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </>
  );
}


----------------------------

import { Card, CardContent } from "@/components/ui/card";
import { AlertCircle } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md mx-4">
        <CardContent className="pt-6">
          <div className="flex mb-4 gap-2">
            <AlertCircle className="h-8 w-8 text-red-500" />
            <h1 className="text-2xl font-bold text-gray-900">404 Page Not Found</h1>
          </div>

          <p className="mt-4 text-sm text-gray-600">
            Did you forget to add the page to the router?
          </p>
        </CardContent>
      </Card>
    </div>
  );
}


--------------------------


import { Route, Switch } from "wouter";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { ThemeProvider } from "@/hooks/useTheme";
import { LanguageProvider } from "@/hooks/useLanguage";
import Navbar from "@/components/layout/Navbar";
import Home from "@/pages/Home";
import InteractiveTreeView from "@/pages/InteractiveTreeView";
import PersonIndex from "@/pages/PersonIndex";
import GalleryView from "@/pages/GalleryView";
import SourcesView from "@/pages/SourcesView";
import FamilyBranchView from "@/pages/FamilyBranchView";
import NotFound from "@/pages/not-found";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

const queryClient = new QueryClient();

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider defaultTheme="light" storageKey="genealogy-theme">
        <LanguageProvider defaultLanguage="pl">
          <TooltipProvider>
            <div className="min-h-screen bg-background">
              <Navbar />
              <main>
                <Switch>
                  <Route path="/" component={Home} />
                  <Route path="/drzewo" component={InteractiveTreeView} />
                  <Route path="/indeks-osob" component={PersonIndex} />
                  <Route path="/galeria" component={GalleryView} />
                  <Route path="/zrodla" component={SourcesView} />
                  <Route path="/rod/:family" component={FamilyBranchView} />
                  <Route component={NotFound} />
                </Switch>
              </main>
              <Toaster />
            </div>
          </TooltipProvider>
        </LanguageProvider>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

export default App;

---------------------------

import React, { useCallback, useMemo } from 'react';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  Node,
  Edge,
  useNodesState,
  useEdgesState,
  ConnectionMode,
} from 'reactflow';
import 'reactflow/dist/style.css';
import PersonNode from './PersonNode';
import { Person } from '@shared/schema';

interface InteractiveTreeProps {
  people: Person[];
  onPersonClick: (person: Person) => void;
}

const nodeTypes = {
  person: PersonNode,
};

export default function InteractiveTree({ people, onPersonClick }: InteractiveTreeProps) {
  const { nodes, edges } = useMemo(() => {
    if (!people || people.length === 0) {
      return { nodes: [], edges: [] };
    }

    const nodeMap = new Map<number, Node>();
    const edgeList: Edge[] = [];

    // Calculate generations for proper positioning
    const generations = new Map<number, number>();
    const visited = new Set<number>();

    // Find root nodes (those without parents)
    const roots = people.filter(person => !person.parentIds || person.parentIds.length === 0);
    
    // BFS to assign generation levels
    const queue: { person: Person, generation: number }[] = roots.map(p => ({ person: p, generation: 0 }));
    
    while (queue.length > 0) {
      const { person, generation } = queue.shift()!;
      
      if (visited.has(person.id)) continue;
      visited.add(person.id);
      generations.set(person.id, generation);

      // Add children to queue
      if (person.childIds) {
        person.childIds.forEach(childId => {
          const child = people.find(p => p.id === childId);
          if (child && !visited.has(childId)) {
            queue.push({ person: child, generation: generation + 1 });
          }
        });
      }
    }

    // Group people by generation for layout
    const generationGroups = new Map<number, Person[]>();
    people.forEach(person => {
      const gen = generations.get(person.id) || 0;
      if (!generationGroups.has(gen)) {
        generationGroups.set(gen, []);
      }
      generationGroups.get(gen)!.push(person);
    });

    // Create nodes with proper positioning
    people.forEach((person) => {
      const generation = generations.get(person.id) || 0;
      const generationPeople = generationGroups.get(generation) || [];
      const indexInGeneration = generationPeople.indexOf(person);
      
      const isGierczak = person.family === 'gierczak';
      
      nodeMap.set(person.id, {
        id: person.id.toString(),
        type: 'person',
        position: {
          x: indexInGeneration * 280 + (isGierczak ? 0 : 140), // Offset families slightly
          y: generation * 200,
        },
        data: {
          person,
          onClick: () => onPersonClick(person),
          family: person.family,
        },
        className: isGierczak ? 'family-gierczak' : 'family-ofiara',
      });
    });

    // Create edges for family relationships
    people.forEach(person => {
      // Child-parent relationships
      if (person.parentIds) {
        person.parentIds.forEach(parentId => {
          const parentNode = nodeMap.get(parentId);
          const childNode = nodeMap.get(person.id);
          if (parentNode && childNode) {
            edgeList.push({
              id: `parent-${parentId}-child-${person.id}`,
              source: parentId.toString(),
              target: person.id.toString(),
              type: 'smoothstep',
              style: { 
                stroke: person.family === 'gierczak' ? 'hsl(var(--heritage-burgundy))' : 'hsl(var(--heritage-teal))',
                strokeWidth: 2 
              },
              animated: false,
            });
          }
        });
      }

      // Spouse relationships
      if (person.spouseIds) {
        person.spouseIds.forEach(spouseId => {
          const spouseNode = nodeMap.get(spouseId);
          const personNode = nodeMap.get(person.id);
          if (spouseNode && personNode && person.id < spouseId) { // Avoid duplicate edges
            edgeList.push({
              id: `spouse-${person.id}-${spouseId}`,
              source: person.id.toString(),
              target: spouseId.toString(),
              type: 'straight',
              style: { 
                stroke: 'hsl(var(--heritage-teal))',
                strokeWidth: 2,
                strokeDasharray: '5,5'
              },
              animated: false,
            });
          }
        });
      }
    });

    return {
      nodes: Array.from(nodeMap.values()),
      edges: edgeList,
    };
  }, [people, onPersonClick]);

  const [nodesState, setNodes, onNodesChange] = useNodesState(nodes);
  const [edgesState, setEdges, onEdgesChange] = useEdgesState(edges);

  // Update nodes and edges when they change
  React.useEffect(() => {
    setNodes(nodes);
    setEdges(edges);
  }, [nodes, edges, setNodes, setEdges]);

  return (
    <div className="w-full h-full">
      <ReactFlow
        nodes={nodesState}
        edges={edgesState}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        nodeTypes={nodeTypes}
        connectionMode={ConnectionMode.Loose}
        fitView
        minZoom={0.2}
        maxZoom={1.5}
        defaultViewport={{ x: 0, y: 0, zoom: 0.8 }}
      >
        <Background />
        <Controls />
        <MiniMap 
          className="!bg-card border heritage-border"
          nodeStrokeWidth={3}
          nodeColor={(node) => {
            return node.className?.includes('gierczak') 
              ? 'hsl(var(--heritage-burgundy))' 
              : 'hsl(var(--heritage-teal))';
          }}
        />
      </ReactFlow>
    </div>
  );
}

-------------------------

import React from 'react';
import { Handle, Position } from 'reactflow';
import { User, Calendar } from 'lucide-react';
import { Person } from '@shared/schema';

interface PersonNodeProps {
  data: {
    person: Person;
    onClick: () => void;
    family: string;
  };
}

export default function PersonNode({ data }: PersonNodeProps) {
  const { person, onClick, family } = data;
  const isGierczak = family === 'gierczak';
  
  const borderColor = isGierczak ? 'border-[hsl(var(--heritage-burgundy))]' : 'border-[hsl(var(--heritage-teal))]';
  const accentColor = isGierczak ? 'text-[hsl(var(--heritage-burgundy))]' : 'text-[hsl(var(--heritage-teal))]';

  return (
    <div 
      className={`person-node bg-white border-2 ${borderColor} rounded-lg p-4 shadow-md cursor-pointer hover:shadow-lg transition-all min-w-[180px]`}
      onClick={onClick}
    >
      <Handle type="target" position={Position.Top} className="w-2 h-2 bg-stone-400" />
      
      <div className="text-center">
        <div className="w-16 h-16 bg-stone-200 rounded-full mx-auto mb-3 flex items-center justify-center">
          {person.photoUrl ? (
            <img 
              src={person.photoUrl} 
              alt={`${person.firstName} ${person.lastName}`}
              className="w-full h-full rounded-full object-cover"
            />
          ) : (
            <User className="w-8 h-8 text-stone-500" />
          )}
        </div>
        
        <h4 className="font-semibold text-sm heritage-text mb-1">
          {person.firstName} {person.lastName}
        </h4>
        
        {(person.birthDate || person.deathDate) && (
          <p className="text-xs text-stone-600 flex items-center justify-center">
            <Calendar className="w-3 h-3 mr-1" />
            {person.birthDate}{person.deathDate ? `-${person.deathDate}` : ''}
          </p>
        )}
        
        {person.birthPlace && (
          <p className="text-xs text-stone-500 mt-1">{person.birthPlace}</p>
        )}
        
        {person.occupation && (
          <p className={`text-xs ${accentColor} font-medium mt-1`}>
            {person.occupation}
          </p>
        )}
      </div>
      
      <Handle type="source" position={Position.Bottom} className="w-2 h-2 bg-stone-400" />
    </div>
  );
}

---------------------------
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { User, Calendar, MapPin, Briefcase, Users, FileText, Eye } from 'lucide-react';
import { Person, Document } from '@shared/schema';
import { useQuery } from '@tanstack/react-query';
import Lightbox from './Lightbox';
import { useTranslation } from 'react-i18next';

interface PersonModalProps {
  person: Person | null;
  isOpen: boolean;
  onClose: () => void;
  onPersonClick: (person: Person) => void;
  allPeople: Person[];
}

export default function PersonModal({ person, isOpen, onClose, onPersonClick, allPeople }: PersonModalProps) {
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [lightboxImage, setLightboxImage] = useState<{src: string, alt: string} | null>(null);
  const { t } = useTranslation();

  const { data: documents = [] } = useQuery({
    queryKey: [`/api/documents/person/${person?.id}`],
    enabled: !!person?.id,
  });

  if (!person) return null;

  const parents = person.parentIds ? allPeople.filter(p => person.parentIds!.includes(p.id)) : [];
  const spouses = person.spouseIds ? allPeople.filter(p => person.spouseIds!.includes(p.id)) : [];
  const children = person.childIds ? allPeople.filter(p => person.childIds!.includes(p.id)) : [];

  const isGierczak = person.family === 'gierczak';
  const familyColor = isGierczak ? 'heritage-burgundy' : 'heritage-teal';

  const handleDocumentClick = (doc: Document) => {
    setLightboxImage({ src: doc.imageUrl, alt: doc.title });
    setLightboxOpen(true);
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-2xl max-h-[90vh]">
          <DialogHeader>
            <DialogTitle className="font-serif text-2xl heritage-text">
              {person.firstName} {person.lastName}
              {person.maidenName && <span className="text-lg ml-2">({t('person.maidenName')} {person.maidenName})</span>}
            </DialogTitle>
            <DialogDescription className={`${familyColor}`}>
              Ród {person.family === 'gierczak' ? 'Gierczaków' : 'Ofiarów'}
            </DialogDescription>
          </DialogHeader>

          <ScrollArea className="max-h-[70vh] pr-4">
            <div className="space-y-6">
              {/* Basic Information */}
              <div className="flex flex-col md:flex-row gap-6">
                <div className="md:w-1/3">
                  <div className="w-48 h-48 bg-stone-200 rounded-lg mx-auto flex items-center justify-center">
                    {person.photoUrl ? (
                      <img 
                        src={person.photoUrl} 
                        alt={`${person.firstName} ${person.lastName}`}
                        className="w-full h-full rounded-lg object-cover"
                      />
                    ) : (
                      <User className="w-16 h-16 text-stone-500" />
                    )}
                  </div>
                </div>

                <div className="md:w-2/3 space-y-4">
                  {(person.birthDate || person.deathDate) && (
                    <div className="flex items-center space-x-2">
                      <Calendar className="w-4 h-4 text-stone-600" />
                      <span className="heritage-text">
                        {person.birthDate}{person.deathDate ? ` - ${person.deathDate}` : ''}
                        {person.birthDate && person.deathDate && (
                          <span className="text-stone-600 ml-2">
                            ({parseInt(person.deathDate) - parseInt(person.birthDate)} lat)
                          </span>
                        )}
                      </span>
                    </div>
                  )}

                  {person.birthPlace && (
                    <div className="flex items-center space-x-2">
                      <MapPin className="w-4 h-4 text-stone-600" />
                      <span className="heritage-text">ur. {person.birthPlace}</span>
                    </div>
                  )}

                  {person.deathPlace && (
                    <div className="flex items-center space-x-2">
                      <MapPin className="w-4 h-4 text-stone-600" />
                      <span className="heritage-text">zm. {person.deathPlace}</span>
                    </div>
                  )}

                  {person.occupation && (
                    <div className="flex items-center space-x-2">
                      <Briefcase className="w-4 h-4 text-stone-600" />
                      <span className="heritage-text">{person.occupation}</span>
                    </div>
                  )}
                </div>
              </div>

              {/* Biography */}
              {person.biography && (
                <div>
                  <h4 className="font-semibold heritage-text mb-3 flex items-center">
                    <FileText className="w-4 h-4 mr-2" />
                    Biografia
                  </h4>
                  <div className="bg-stone-50 rounded-lg p-4">
                    <p className="heritage-text leading-relaxed">{person.biography}</p>
                  </div>
                </div>
              )}

              {/* Family Connections */}
              <div>
                <h4 className="font-semibold heritage-text mb-3 flex items-center">
                  <Users className="w-4 h-4 mr-2" />
                  Rodzina
                </h4>

                <div className="space-y-4">
                  {parents.length > 0 && (
                    <div>
                      <h5 className="font-medium heritage-text mb-2">Rodzice:</h5>
                      <div className="flex flex-wrap gap-2">
                        {parents.map(parent => (
                          <Badge 
                            key={parent.id}
                            variant="secondary" 
                            className="cursor-pointer hover:bg-stone-200"
                            onClick={() => onPersonClick(parent)}
                          >
                            {parent.firstName} {parent.lastName}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}

                  {spouses.length > 0 && (
                    <div>
                      <h5 className="font-medium heritage-text mb-2">Małżonek:</h5>
                      <div className="flex flex-wrap gap-2">
                        {spouses.map(spouse => (
                          <Badge 
                            key={spouse.id}
                            variant="secondary" 
                            className={`cursor-pointer hover:bg-stone-200 ${
                              spouse.family === 'gierczak' ? 'bg-red-100' : 'bg-teal-100'
                            }`}
                            onClick={() => onPersonClick(spouse)}
                          >
                            {spouse.firstName} {spouse.lastName}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}

                  {children.length > 0 && (
                    <div>
                      <h5 className="font-medium heritage-text mb-2">Dzieci:</h5>
                      <div className="flex flex-wrap gap-2">
                        {children.map(child => (
                          <Badge 
                            key={child.id}
                            variant="secondary" 
                            className="cursor-pointer hover:bg-stone-200"
                            onClick={() => onPersonClick(child)}
                          >
                            {child.firstName} {child.lastName}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Documents */}
              {documents && documents.length > 0 && (
                <div>
                  <h4 className="font-semibold heritage-text mb-3">Dokumenty i źródła:</h4>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {documents.map((doc: Document) => (
                      <div 
                        key={doc.id}
                        className="bg-stone-100 rounded-lg p-3 text-center cursor-pointer hover:bg-stone-200 transition-colors"
                        onClick={() => handleDocumentClick(doc)}
                      >
                        <FileText className="w-8 h-8 heritage-text mx-auto mb-2" />
                        <p className="text-xs heritage-text font-medium">{doc.title}</p>
                        <p className="text-xs text-stone-600 mt-1">{doc.type}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <Separator />

              {/* Actions */}
              <div className="flex justify-center">
                <Button 
                  className={`btn-heritage-${person.family === 'gierczak' ? 'burgundy' : 'teal'}`}
                  onClick={() => {
                    onClose();
                    // Navigate to tree view centered on this person
                  }}
                >
                  <Eye className="w-4 h-4 mr-2" />
                  Pokaż w drzewie
                </Button>
              </div>
            </div>
          </ScrollArea>
        </DialogContent>
      </Dialog>

      <Lightbox
        isOpen={lightboxOpen}
        onClose={() => setLightboxOpen(false)}
        image={lightboxImage}
      />
    </>
  );
}

--------------------------------

import React, { useLayoutEffect } from "react";
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  MarkerType,
  Edge,
} from "reactflow";
import "reactflow/dist/style.css";
import PersonNode from "./PersonNode";
import { Person } from "@shared/schema";
import dagre from "dagre";

interface InteractiveTreeProps {
  allPeople: Person[];
  onPersonClick: (person: Person) => void;
  showGierczak: boolean;
  showOfiara: boolean;
  showDescendants: boolean;
  showMarriages: boolean;
}

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const nodeWidth = 260;
const nodeHeight = 130;

// ZMIANA: Przeniesienie definicji `nodeTypes` POZA komponent
const nodeTypes = {
  person: PersonNode,
};

const getLayoutedElements = (nodes: any[], edges: any[]) => {
  dagreGraph.setGraph({ rankdir: "TB", nodesep: 50, ranksep: 100 });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, {
      width: node.style?.width ?? nodeWidth,
      height: node.style?.height ?? nodeHeight,
    });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  nodes.forEach((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.targetPosition = "top";
    node.sourcePosition = "bottom";
    node.position = {
      x: nodeWithPosition.x - (node.style?.width ?? nodeWidth) / 2,
      y: nodeWithPosition.y - (node.style?.height ?? nodeHeight) / 2,
    };
    return node;
  });

  return { nodes };
};

export default function InteractiveTree({
  allPeople,
  onPersonClick,
  showGierczak,
  showOfiara,
  showDescendants,
  showMarriages,
}: InteractiveTreeProps) {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);

  useLayoutEffect(() => {
    if (!allPeople) return;

    const visiblePeople = allPeople.filter(
      (person) =>
        (person.family === "gierczak" && showGierczak) ||
        (person.family === "ofiara" && showOfiara)
    );

    const visibleNodeIds = new Set(visiblePeople.map((p) => p.id.toString()));

    const personNodes = visiblePeople.map((person) => ({
      id: person.id.toString(),
      type: "person",
      data: {
        person,
        onClick: () => onPersonClick(person),
        family: person.family,
      },
      position: { x: 0, y: 0 },
    }));

    const structuralEdges: any[] = [];
    visiblePeople.forEach((person) => {
      if (person.parentIds) {
        person.parentIds.forEach((parentId) => {
          if (visibleNodeIds.has(parentId.toString())) {
            structuralEdges.push({
              id: `s-${parentId}-${person.id}`,
              source: parentId.toString(),
              target: person.id.toString(),
            });
          }
        });
      }
    });

    const { nodes: layoutedNodes } = getLayoutedElements(
      personNodes,
      structuralEdges
    );

    const edgesToRender: Edge[] = [];

    if (showDescendants) {
      structuralEdges.forEach((edge) => {
        edgesToRender.push({
          ...edge,
          id: `v-${edge.id}`,
          type: "smoothstep",
          markerEnd: {
            type: MarkerType.ArrowClosed,
            color: "hsl(var(--heritage-burgundy))",
          },
          style: { stroke: "hsl(var(--heritage-burgundy))", strokeWidth: 1.5 },
        });
      });
    }

    if (showMarriages) {
      visiblePeople.forEach((person) => {
        if (person.spouseIds) {
          person.spouseIds.forEach((spouseId) => {
            if (
              person.id < spouseId &&
              visibleNodeIds.has(spouseId.toString())
            ) {
              edgesToRender.push({
                id: `spouse-${person.id}-${spouseId}`,
                source: person.id.toString(),
                target: spouseId.toString(),
                type: "straight",
                style: {
                  stroke: "hsl(var(--heritage-teal))",
                  strokeWidth: 2,
                  strokeDasharray: "5,5",
                },
              });
            }
          });
        }
      });
    }

    setNodes(layoutedNodes);
    setEdges(edgesToRender);
  }, [
    allPeople,
    showGierczak,
    showOfiara,
    showDescendants,
    showMarriages,
    setNodes,
    setEdges,
    onPersonClick,
  ]);

  return (
    <div className="w-full h-full bg-stone-50 dark:bg-stone-900">
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        nodeTypes={nodeTypes}
        fitView
        minZoom={0.1}
        className="react-flow-heritage"
      >
        <Background />
        <Controls />
        <MiniMap
          className="!bg-background border heritage-border"
          nodeStrokeWidth={3}
          nodeColor={(node) => {
            if (node.data?.family === "gierczak") {
              return "hsl(var(--heritage-burgundy))";
            }
            if (node.data?.family === "ofiara") {
              return "hsl(var(--heritage-teal))";
            }
            return "hsl(var(--muted))";
          }}
        />
      </ReactFlow>
    </div>
  );
}


----------------------------

{
  "people": [
    {
      "id": 1,
      "firstName": "Tomasz",
      "lastName": "Gierczak",
      "birthDate": null,
      "deathDate": null,
      "birthPlace": "Jaszowice",
      "occupation": null,
      "family": "gierczak",
      "biography": "Praprzodek rodziny Gierczak. Mieszkał w Jaszowicach - prywatnej wsi szlacheckiej w drugiej połowie XVI wieku w powiecie radomskim województwa sandomierskiego.",
      "spouseIds": [2],
      "childIds": [3],
      "parentIds": []
    },
    {
      "id": 2,
      "firstName": "Zofia",
      "lastName": "Gerczak vel Gierczak",
      "maidenName": "Giel vel Gielowska",
      "birthDate": null,
      "deathDate": null,
      "birthPlace": null,
      "occupation": null,
      "family": "gierczak",
      "biography": "Żona Tomasza Gerczaka vel Gierczaka. Brak dostępu do danych.",
      "spouseIds": [1],
      "childIds": [3, 4, 5, 6, 7],
      "parentIds": []
    },
    {
      "id": 3,
      "firstName": "Franciszek",
      "lastName": "Gerczak vel Gierczak",
      "birthDate": "1816-11-24",
      "deathDate": null,
      "birthPlace": "Jaszowice",
      "occupation": null,
      "family": "gierczak",
      "biography": "Syn Tomasza i Zofii Gerczak vel Gierczak.",
      "spouseIds": [],
      "childIds": [],
      "parentIds": [1, 2]
    },
    {
      "id": 4,
      "firstName": "Ambroży",
      "lastName": "Gerczak vel Gierczak",
      "birthDate": "ok. 1800",
      "deathDate": "1836",
      "birthPlace": "Jaszowice",
      "occupation": "Rolnik",
      "family": "gierczak",
      "biography": "3 x pradziadek. Urodził się pod koniec XVIII w. lub na początku XIX w. Zmarł w 1836. Ożenił się prawdopodobnie w 1820 z Kunegundą Kanią vel Kanionka (Koniak) c. Magdaleny. Mieszkali we wsi Jaszowice k. Radomia. Mieli 8 dzieci.",
      "spouseIds": [8],
      "childIds": [9, 10, 11, 12, 13, 14, 15, 16],
      "parentIds": [1, 2]
    },
    {
      "id": 5,
      "firstName": "Michał",
      "lastName": "Gerczak vel Gierczak",
      "birthDate": null,
      "deathDate": "1854",
      "birthPlace": "Jaszowice",
      "occupation": null,
      "family": "gierczak",
      "biography": "Syn Tomasza i Zofii Gerczak vel Gierczak.",
      "spouseIds": [],
      "childIds": [],
      "parentIds": [1, 2]
    },
    {
      "id": 6,
      "firstName": "Andrzej",
      "lastName": "Gerczak vel Gierczak",
      "birthDate": null,
      "deathDate": "1868",
      "birthPlace": "Jaszowice",
      "occupation": null,
      "family": "gierczak",
      "biography": "Syn Tomasza i Zofii. Ożenił się w 1837 z Teresą Pączek (Górniak, Gurniak, Gorniak, Pączkowa), której rodzicami byli Jakub i Magdalena. Ślub odbył się w parafii Cerekiew.",
      "spouseIds": [17],
      "childIds": [],
      "parentIds": [1, 2]
    },
    {
      "id": 7,
      "firstName": "Marianna",
      "lastName": "Gerczak vel Gierczak",
      "birthDate": null,
      "deathDate": "1916",
      "birthPlace": "Jaszowice",
      "occupation": null,
      "family": "gierczak",
      "biography": "Córka Tomasza i Zofii Gerczak vel Gierczak.",
      "spouseIds": [],
      "childIds": [],
      "parentIds": [1, 2]
    },
    {
      "id": 8,
      "firstName": "Kunegunda",
      "lastName": "Gerczak vel Gierczak",
      "maidenName": "Kania vel Kanionka",
      "birthDate": null,
      "deathDate": null,
      "birthPlace": null,
      "occupation": null,
      "family": "gierczak",
      "biography": "Żona Ambrożego. Rodzicami Kunegundy byli Stanisław i Magdalena. Po śmierci Ambrożego wyszła za mąż w 1837 za Mikołaja Remisiewskiego syna Łukasza i Moniki Łosiak.",
      "spouseIds": [4],
      "childIds": [9, 10, 11, 12, 13, 14, 15, 16],
      "parentIds": []
    },
    {
      "id": 13,
      "firstName": "Karol",
      "lastName": "Gerczak vel Gierczak",
      "birthDate": "1828",
      "deathDate": "1903",
      "birthPlace": "Jaszowice",
      "occupation": "Rolnik",
      "family": "gierczak",
      "biography": "Trzecie dziecko Ambrożego i Kunegundy. Żoną Karola została 23.11.1857 Tekla Kozyra vel Kozera z d. Adamczyk (1831-1909). Karol zamieszkał z Teklą w Gulinku. Oboje małżonkowie doczekali się 3 dzieci.",
      "spouseIds": [18],
      "childIds": [19, 20, 21],
      "parentIds": [4, 8]
    },
    {
      "id": 18,
      "firstName": "Tekla",
      "lastName": "Kozyra vel Kozera",
      "maidenName": "Adamczyk",
      "birthDate": "1831",
      "deathDate": "1909",
      "birthPlace": null,
      "occupation": null,
      "family": "gierczak",
      "biography": "Żona Karola Gerczaka. Rodzicami Tekli byli Adam i Józefa Kredowska.",
      "spouseIds": [13],
      "childIds": [19, 20, 21],
      "parentIds": []
    },
    {
      "id": 19,
      "firstName": "Paweł",
      "lastName": "Gerczak vel Gierczak",
      "birthDate": "1867",
      "deathDate": "1935",
      "birthPlace": "Gulinek",
      "occupation": "Rolnik",
      "family": "gierczak",
      "biography": "Syn Karola i Tekli. Pojął za żonę w 1887 Katarzynę Czerwińską c. Mateusza i Marianny Kieragi. Był dziadkiem Józefa ur. w 1930.",
      "spouseIds": [22],
      "childIds": [23, 24, 25, 26, 27, 28, 29, 30, 31],
      "parentIds": [13, 18]
    },
    {
      "id": 22,
      "firstName": "Katarzyna",
      "lastName": "Czerwińska",
      "maidenName": "Kieraga",
      "birthDate": null,
      "deathDate": null,
      "birthPlace": null,
      "occupation": null,
      "family": "gierczak",
      "biography": "Żona Pawła. Rodzicami Katarzyny byli Mateusz i Marianna Kieraga.",
      "spouseIds": [19],
      "childIds": [23, 24, 25, 26, 27, 28, 29, 30, 31],
      "parentIds": []
    },
    {
      "id": 26,
      "firstName": "Jan",
      "lastName": "Gierczak",
      "birthDate": "1891",
      "deathDate": null,
      "birthPlace": "Gulinek",
      "occupation": "Rolnik",
      "family": "gierczak",
      "biography": "Syn Pawła i Katarzyny. Ojciec Józefa ur. 1930. Z Agnieszką Baćmagą z d. Szewczyk ożenił się w 1917. Małżonkowie mieli ośmioro dzieci, z których pierwsza trójka zmarła we wczesnym dzieciństwie.",
      "spouseIds": [32],
      "childIds": [33, 34, 35, 36, 37, 38, 39, 40],
      "parentIds": [19, 22]
    },
    {
      "id": 32,
      "firstName": "Agnieszka",
      "lastName": "Gierczak",
      "maidenName": "Baćmaga z d. Szewczyk",
      "birthDate": "1894-04-13",
      "deathDate": null,
      "birthPlace": null,
      "occupation": null,
      "family": "gierczak",
      "biography": "Żona Jana, babcia autora. Urodziła się z rodziców Kazimierza i Antonimy Szewczyk. Małżonkowie mieli ośmioro dzieci, z których pierwsza trójka zmarła we wczesnym dzieciństwie.",
      "spouseIds": [26],
      "childIds": [33, 34, 35, 36, 37, 38, 39, 40],
      "parentIds": []
    },
    {
      "id": 39,
      "firstName": "Józef",
      "lastName": "Gierczak",
      "birthDate": "1930",
      "deathDate": "1996",
      "birthPlace": "Gulinek",
      "occupation": "Rolnik",
      "family": "gierczak",
      "biography": "Syn Jana i Agnieszki, ojciec autora. Z Marianną Ofiarą (1931-1987) z d. Sobień ożenił się w 1952. Małżonkowie mieli Witolda (zmarł jako roczne dziecko), Adama ur. w 1956 i Marię ur. w 1958.",
      "spouseIds": [41],
      "childIds": [42, 43, 44],
      "parentIds": [26, 32]
    },
    {
      "id": 41,
      "firstName": "Marianna",
      "lastName": "Gierczak",
      "maidenName": "Ofiara z d. Sobień",
      "birthDate": "1931",
      "deathDate": "1987",
      "birthPlace": "Ludwików",
      "occupation": null,
      "family": "ofiara",
      "biography": "Żona Józefa Gierczaka, matka autora. Za Józefa Gierczaka, sąsiada zza miedzy, wyszła w 1952. Córka Józefa Ofiary i Heleny z d. Sobień.",
      "spouseIds": [39],
      "childIds": [42, 43, 44],
      "parentIds": [45, 46]
    },
    {
      "id": 45,
      "firstName": "Józef",
      "lastName": "Ofiara",
      "birthDate": "1896",
      "deathDate": null,
      "birthPlace": "Ludwików",
      "occupation": "Rolnik",
      "family": "ofiara",
      "biography": "Dziadek autora, urodził się w Ludwikowie k. Jedlińska. W 1918 poślubił Rozalię z d. Mitak. Po śmierci Rozalii (33) ożenił się w 1926 z Heleną Sobień. Syn Andrzeja Ofiary i Franciszki Szaruch.",
      "spouseIds": [47, 46],
      "childIds": [48, 49, 50, 51, 52, 53, 54, 55, 41, 56],
      "parentIds": [57, 58]
    },
    {
      "id": 46,
      "firstName": "Helena",
      "lastName": "Ofiara",
      "maidenName": "Sobień",
      "birthDate": "1905-01-09",
      "deathDate": null,
      "birthPlace": null,
      "occupation": null,
      "family": "ofiara",
      "biography": "Babcia autora, druga żona Józefa Ofiary. Urodziła się z rodziców Karola i Ewy Drużdżel. Miała liczne rodzeństwo. Z Józefem miała sześcioro dzieci, z których pierwsza czwórka zmarła bardzo wcześnie.",
      "spouseIds": [45],
      "childIds": [51, 52, 53, 54, 55, 41, 56],
      "parentIds": []
    },
    {
      "id": 57,
      "firstName": "Andrzej",
      "lastName": "Ofiara",
      "birthDate": null,
      "deathDate": null,
      "birthPlace": "Ludwików",
      "occupation": "Rolnik",
      "family": "ofiara",
      "biography": "Pradziadek autora. Ożenił się z Franciszką Szaruch (Saruch). Mieli 4 dzieci: Ignacego, Antoniego, Józefa (dziadka autora) i Katarzynę.",
      "spouseIds": [58],
      "childIds": [45, 59, 60, 61],
      "parentIds": []
    },
    {
      "id": 58,
      "firstName": "Franciszka",
      "lastName": "Szaruch",
      "birthDate": null,
      "deathDate": null,
      "birthPlace": null,
      "occupation": null,
      "family": "ofiara",
      "biography": "Żona Andrzeja Ofiary. Brak danych.",
      "spouseIds": [57],
      "childIds": [45, 59, 60, 61],
      "parentIds": []
    }
  ],
  "documents": [
    {
      "id": 1,
      "personId": 1,
      "title": "Akt urodzenia Jana Gierczaka",
      "type": "birth",
      "description": "Metryka urodzenia z parafii Cerekiew",
      "imageUrl": "https://images.unsplash.com/photo-1553729784-e91953dec042?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600"
    },
    {
      "id": 2,
      "personId": 1,
      "title": "Akt ślubu Jana i Anny",
      "type": "marriage",
      "description": "Dokument ślubu z 1845 roku",
      "imageUrl": "https://images.unsplash.com/photo-1618556450994-a6a128ef0d9d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600"
    }
  ],
  "places": [
    {
      "name": "Jaszowice",
      "description": "Główna miejscowość rodu Gierczaków",
      "imageUrl": "https://pixabay.com/get/g6de97cc45e5be3ce1aeb68017b82f940edbf35e49e84af44d015428e2a44627d2b92d479ce214d6c1c57ce44a7817d354c44c1aa522bccafb98d1328dcdbb05e_1280.jpg"
    },
    {
      "name": "Ludwików",
      "description": "Miejsce pochodzenia rodu Ofiarów",
      "imageUrl": "https://pixabay.com/get/gc06fc77a8a983246516b4657991585fc4b8d7476aa870249367ba9b649a62d92690f8e86076d1c06b694884c35186592b30240b85a2a0a81e612984e1f61b4c3_1280.jpg"
    },
    {
      "name": "Cerekiew",
      "description": "Parafia i cmentarz rodzinny",
      "imageUrl": "https://pixabay.com/get/gb838724c97b3a06a5d1601e0b3b6bf647cd39a9f2864f9eca85b44338a6b803e640ae27baffbb7af9d06ecb886cb71acdacac9eebb44f455475a9307ddf35d84_1280.jpg"
    }
  ]
}


------------------------------

import React, { useLayoutEffect } from "react";
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  MarkerType,
  Edge,
} from "reactflow";
import "reactflow/dist/style.css";
import PersonNode from "./PersonNode";
import { Person } from "@shared/schema";
import dagre from "dagre";

interface InteractiveTreeProps {
  allPeople: Person[];
  onPersonClick: (person: Person) => void;
  showGierczak: boolean;
  showOfiara: boolean;
  showDescendants: boolean;
  showMarriages: boolean;
}

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const nodeWidth = 260;
const nodeHeight = 130;

const nodeTypes = {
  person: PersonNode,
};

const getLayoutedElements = (nodes: any[], edges: any[]) => {
  dagreGraph.setGraph({ rankdir: "TB", nodesep: 50, ranksep: 100 });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, {
      width: node.style?.width ?? nodeWidth,
      height: node.style?.height ?? nodeHeight,
    });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  nodes.forEach((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.targetPosition = "top";
    node.sourcePosition = "bottom";
    node.position = {
      x: nodeWithPosition.x - (node.style?.width ?? nodeWidth) / 2,
      y: nodeWithPosition.y - (node.style?.height ?? nodeHeight) / 2,
    };
  });

  return { nodes };
};

export default function InteractiveTree({
  allPeople,
  onPersonClick,
  showGierczak,
  showOfiara,
  showDescendants,
  showMarriages,
}: InteractiveTreeProps) {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);

  useLayoutEffect(() => {
    if (!allPeople) return;

    const visiblePeople = allPeople.filter(
      (person) =>
        (person.family === "gierczak" && showGierczak) ||
        (person.family === "ofiara" && showOfiara)
    );

    const visibleNodeIds = new Set(visiblePeople.map((p) => p.id.toString()));

    const personNodes = visiblePeople.map((person) => ({
      id: person.id.toString(),
      type: "person",
      data: {
        person,
        onClick: () => onPersonClick(person),
        family: person.family,
      },
      position: { x: 0, y: 0 },
    }));

    const structuralEdges: any[] = [];
    visiblePeople.forEach((person) => {
      if (person.parentIds) {
        person.parentIds.forEach((parentId) => {
          if (visibleNodeIds.has(parentId.toString())) {
            structuralEdges.push({
              id: `s-${parentId}-${person.id}`,
              source: parentId.toString(),
              target: person.id.toString(),
            });
          }
        });
      }
    });

    console.log("\u2705 Visible people:", visiblePeople);
    console.log("\u2705 Structural edges:", structuralEdges);

    const { nodes: layoutedNodes } = getLayoutedElements(
      personNodes,
      structuralEdges
    );

    const edgesToRender: Edge[] = [];

    if (showDescendants) {
      structuralEdges.forEach((edge) => {
        edgesToRender.push({
          ...edge,
          id: `v-${edge.id}`,
          type: "smoothstep",
          markerEnd: {
            type: MarkerType.ArrowClosed,
            color: "red",
          },
          style: { stroke: "red", strokeWidth: 2 },
        });
      });
    }

    if (showMarriages) {
      visiblePeople.forEach((person) => {
        if (person.spouseIds) {
          person.spouseIds.forEach((spouseId) => {
            if (
              person.id < spouseId &&
              visibleNodeIds.has(spouseId.toString())
            ) {
              edgesToRender.push({
                id: `spouse-${person.id}-${spouseId}`,
                source: person.id.toString(),
                target: spouseId.toString(),
                type: "straight",
                style: {
                  stroke: "blue",
                  strokeWidth: 2,
                  strokeDasharray: "5,5",
                },
              });
            }
          });
        }
      });
    }

    console.log("\u2705 Final edges to render:", edgesToRender);

    setNodes(layoutedNodes);
    setEdges(edgesToRender);
  }, [
    allPeople,
    showGierczak,
    showOfiara,
    showDescendants,
    showMarriages,
    setNodes,
    setEdges,
    onPersonClick,
  ]);

  return (
    <div className="w-full h-full bg-stone-50 dark:bg-stone-900">
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        nodeTypes={nodeTypes}
        fitView
        minZoom={0.1}
        style={{ zIndex: 10 }}
        className="react-flow-heritage"
      >
        <Background />
        <Controls />
        <MiniMap
          className="!bg-background border heritage-border"
          nodeStrokeWidth={3}
          nodeColor={(node) => {
            if (node.data?.family === "gierczak") {
              return "hsl(var(--heritage-burgundy))";
            }
            if (node.data?.family === "ofiara") {
              return "hsl(var(--heritage-teal))";
            }
            return "hsl(var(--muted))";
          }}
        />
      </ReactFlow>
    </div>
  );
}


---------------------------- dobry kod ----------------------

import React, { useLayoutEffect } from "react";
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  MarkerType,
  Edge,
} from "reactflow";
import "reactflow/dist/style.css";
import PersonNode from "./PersonNode";
import { Person } from "@shared/schema";
import dagre from "dagre";

interface InteractiveTreeProps {
  allPeople: Person[];
  onPersonClick: (person: Person) => void;
  showGierczak: boolean;
  showOfiara: boolean;
  showDescendants: boolean;
  showMarriages: boolean;
}

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const nodeWidth = 260;
const nodeHeight = 130;

const nodeTypes = {
  person: PersonNode,
};

const getLayoutedElements = (nodes: any[], edges: any[]) => {
  dagreGraph.setGraph({ rankdir: "TB", nodesep: 50, ranksep: 100 });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, {
      width: node.style?.width ?? nodeWidth,
      height: node.style?.height ?? nodeHeight,
    });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  nodes.forEach((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.targetPosition = "top";
    node.sourcePosition = "bottom";
    node.position = {
      x: nodeWithPosition.x - (node.style?.width ?? nodeWidth) / 2,
      y: nodeWithPosition.y - (node.style?.height ?? nodeHeight) / 2,
    };
  });

  return { nodes };
};

export default function InteractiveTree({
  allPeople,
  onPersonClick,
  showGierczak,
  showOfiara,
  showDescendants,
  showMarriages,
}: InteractiveTreeProps) {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);

  useLayoutEffect(() => {
    if (!allPeople) return;

    const visiblePeople = allPeople.filter(
      (person) =>
        (person.family === "gierczak" && showGierczak) ||
        (person.family === "ofiara" && showOfiara)
    );

    const visibleNodeIds = new Set(visiblePeople.map((p) => p.id.toString()));

    const personNodes = visiblePeople.map((person) => ({
      id: person.id.toString(),
      type: "person",
      data: {
        person,
        onClick: () => onPersonClick(person),
        family: person.family,
      },
      position: { x: 0, y: 0 },
    }));

    const structuralEdges: any[] = [];
    visiblePeople.forEach((person) => {
      if (person.parentIds) {
        person.parentIds.forEach((parentId) => {
          if (visibleNodeIds.has(parentId.toString())) {
            structuralEdges.push({
              id: `s-${parentId}-${person.id}`,
              source: parentId.toString(),
              target: person.id.toString(),
            });
          }
        });
      }
    });

    console.log("\u2705 Visible people:", visiblePeople);
    console.log("\u2705 Structural edges:", structuralEdges);

    const { nodes: layoutedNodes } = getLayoutedElements(
      personNodes,
      structuralEdges
    );

    const edgesToRender: Edge[] = [];

    if (showDescendants) {
      structuralEdges.forEach((edge) => {
        edgesToRender.push({
          ...edge,
          id: `v-${edge.id}`,
          type: "smoothstep",
          markerEnd: {
            type: MarkerType.ArrowClosed,
            color: "red",
          },
          style: { stroke: "red", strokeWidth: 2 },
        });
      });
    }

    if (showMarriages) {
      visiblePeople.forEach((person) => {
        if (person.spouseIds) {
          person.spouseIds.forEach((spouseId) => {
            if (
              person.id < spouseId &&
              visibleNodeIds.has(spouseId.toString())
            ) {
              edgesToRender.push({
                id: `spouse-${person.id}-${spouseId}`,
                source: person.id.toString(),
                target: spouseId.toString(),
                type: "straight",
                style: {
                  stroke: "blue",
                  strokeWidth: 2,
                  strokeDasharray: "5,5",
                },
              });
            }
          });
        }
      });
    }

    console.log("\u2705 Final edges to render:", edgesToRender);

    setNodes(layoutedNodes);
    setEdges(edgesToRender);
  }, [
    allPeople,
    showGierczak,
    showOfiara,
    showDescendants,
    showMarriages,
    setNodes,
    setEdges,
    onPersonClick,
  ]);

  return (
    <div className="w-full h-full bg-stone-50 dark:bg-stone-900">
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        nodeTypes={nodeTypes}
        fitView
        minZoom={0.1}
        style={{ zIndex: 10 }}
        className="react-flow-heritage"
      >
        <Background />
        <Controls />
        <MiniMap
          className="!bg-background border heritage-border"
          nodeStrokeWidth={3}
          nodeColor={(node) => {
            if (node.data?.family === "gierczak") {
              return "hsl(var(--heritage-burgundy))";
            }
            if (node.data?.family === "ofiara") {
              return "hsl(var(--heritage-teal))";
            }
            return "hsl(var(--muted))";
          }}
        />
      </ReactFlow>
    </div>
  );
}


------------------------------

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...(process.env.NODE_ENV !== "production" &&
    process.env.REPL_ID !== undefined
      ? [
          await import("@replit/vite-plugin-cartographer").then((m) =>
            m.cartographer(),
          ),
        ]
      : []),
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets"),
    },
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true,
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"],
    },
  },
});
