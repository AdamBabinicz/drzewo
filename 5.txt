import React from "react";
import { Handle, Position, NodeProps } from "reactflow";
import { User, Calendar } from "lucide-react";
import { Person } from "@shared/schema";
import { useLanguage } from "@/hooks/useLanguage";

type PersonNodeData = {
  person: Person;
  onClick: () => void;
  family: "gierczak" | "ofiara";
};

// Funkcja pomocnicza do formatowania daty
const formatDate = (dateString: string | null | undefined, locale: string) => {
  if (!dateString) return "?";
  // Jeśli to tylko rok, zwróć rok
  if (/^\d{4}$/.test(dateString)) {
    return dateString;
  }
  try {
    const date = new Date(dateString);
    // Sprawdź, czy data jest prawidłowa
    if (isNaN(date.getTime())) return dateString;
    return new Intl.DateTimeFormat(locale).format(date);
  } catch (e) {
    return dateString; // Zwróć oryginalny string w razie błędu
  }
};

export default function PersonNode({ data }: NodeProps<PersonNodeData>) {
  const { language } = useLanguage();
  const { person, onClick, family } = data;
  const isGierczak = family === "gierczak";

  const borderColor = isGierczak
    ? "border-heritage-burgundy"
    : "border-heritage-teal";

  const birth = formatDate(person.birthDate, language);
  const death = formatDate(person.deathDate, language);

  const lifeSpan = `${birth} - ${death}`;

  return (
    <div
      className={`person-node bg-white dark:bg-stone-800 border-2 ${borderColor} rounded-lg p-3 shadow-md cursor-pointer hover:shadow-lg transition-all w-[240px]`}
      onClick={onClick}
    >
      <Handle type="target" position={Position.Top} className="!bg-stone-400" />
      <div className="flex items-center gap-3">
        <div className="w-16 h-16 bg-stone-200 dark:bg-stone-700 rounded-full flex-shrink-0 flex items-center justify-center">
          {person.photoUrl ? (
            <img
              src={person.photoUrl}
              alt={`${person.firstName} ${person.lastName}`}
              className="w-full h-full rounded-full object-cover"
            />
          ) : (
            <User className="w-8 h-8 text-stone-500" />
          )}
        </div>
        <div className="flex-grow">
          <h4 className="font-semibold text-base heritage-text mb-1 truncate">
            {person.firstName} {person.lastName}
          </h4>
          {(person.birthDate || person.deathDate) && (
            <p className="text-xs text-stone-600 dark:text-stone-400 flex items-center">
              <Calendar className="w-3 h-3 mr-1.5 flex-shrink-0" />
              <span>{lifeSpan}</span>
            </p>
          )}
        </div>
      </div>
      <Handle
        type="source"
        position={Position.Bottom}
        className="!bg-stone-400"
      />
    </div>
  );
}


----------------------------

@import url("https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Lato:wght@300;400;500;600&display=swap");
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: hsl(45, 20%, 98%);
  --foreground: hsl(30, 8%, 15%);
  --muted: hsl(45, 15%, 94%);
  --muted-foreground: hsl(30, 5%, 45%);
  --popover: hsl(45, 20%, 98%);
  --popover-foreground: hsl(30, 8%, 15%);
  --card: hsl(0, 0%, 100%);
  --card-foreground: hsl(30, 8%, 15%);
  --border: hsl(45, 12%, 88%);
  --input: hsl(45, 12%, 92%);
  --primary: hsl(355, 65%, 42%);
  --primary-foreground: hsl(0, 0%, 98%);
  --secondary: hsl(45, 15%, 94%);
  --secondary-foreground: hsl(30, 8%, 15%);
  --accent: hsl(174, 70%, 25%);
  --accent-foreground: hsl(0, 0%, 98%);
  --destructive: hsl(0, 84.2%, 60.2%);
  --destructive-foreground: hsl(60, 9.1%, 97.8%);
  --ring: hsl(30, 8%, 15%);
  --radius: 0.75rem;

  /* Heritage color palette - enhanced */
  --heritage-burgundy: hsl(355, 65%, 42%);
  --heritage-teal: hsl(174, 70%, 25%);
  --heritage-brown: hsl(30, 8%, 15%);
  --heritage-gray: hsl(45, 12%, 88%);
  --heritage-gray-dark: hsl(45, 15%, 82%);
  --parchment: hsl(45, 20%, 98%);
  --parchment-dark: hsl(45, 18%, 95%);
  --heritage-gold: hsl(42, 78%, 60%);
  --heritage-cream: hsl(45, 25%, 96%);
}

.dark {
  --background: hsl(30, 8%, 8%);
  --foreground: hsl(45, 15%, 92%);
  --muted: hsl(30, 5%, 15%);
  --muted-foreground: hsl(45, 8%, 65%);
  --popover: hsl(30, 8%, 10%);
  --popover-foreground: hsl(45, 15%, 92%);
  --card: hsl(30, 6%, 12%);
  --card-foreground: hsl(45, 15%, 92%);
  --border: hsl(30, 5%, 20%);
  --input: hsl(30, 5%, 18%);
  --primary: hsl(355, 65%, 45%);
  --primary-foreground: hsl(0, 0%, 98%);
  --secondary: hsl(30, 5%, 15%);
  --secondary-foreground: hsl(45, 15%, 92%);
  --accent: hsl(174, 60%, 35%);
  --accent-foreground: hsl(0, 0%, 98%);
  --destructive: hsl(0, 62.8%, 30.6%);
  --destructive-foreground: hsl(0, 0%, 98%);
  --ring: hsl(45, 15%, 92%);

  /* Heritage dark theme colors */
  --heritage-burgundy: hsl(355, 60%, 50%);
  --heritage-teal: hsl(174, 60%, 35%);
  --heritage-brown: hsl(45, 15%, 92%);
  --heritage-gray: hsl(30, 5%, 20%);
  --heritage-gray-dark: hsl(30, 5%, 25%);
  --parchment: hsl(30, 8%, 8%);
  --parchment-dark: hsl(30, 6%, 12%);
  --heritage-gold: hsl(42, 70%, 55%);
  --heritage-cream: hsl(30, 6%, 12%);
}

@layer base {
  * {
    @apply border-border;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  html {
    overflow-x: hidden;
  }
  body {
    @apply bg-background text-foreground font-sans antialiased;
    font-family: "Lato", sans-serif;
    width: 100%;
    overflow-x: hidden;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "Playfair Display", serif;
  }
}

@layer components {
  .heritage-bg {
    background: linear-gradient(
      135deg,
      var(--parchment) 0%,
      var(--parchment-dark) 100%
    );
    position: relative;
  }

  .heritage-bg::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: radial-gradient(
        circle at 25% 25%,
        hsl(42, 78%, 60%, 0.03) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 75% 75%,
        hsl(355, 65%, 42%, 0.02) 0%,
        transparent 50%
      );
    pointer-events: none;
  }

  .heritage-text {
    color: var(--heritage-brown);
  }

  .heritage-burgundy {
    color: var(--heritage-burgundy);
  }

  .heritage-teal {
    color: var(--heritage-teal);
  }

  .heritage-gold {
    color: var(--heritage-gold);
  }

  .btn-heritage-burgundy {
    background: linear-gradient(
      135deg,
      var(--heritage-burgundy) 0%,
      hsl(355, 65%, 38%) 100%
    );
    color: white;
    border: none;
    box-shadow: 0 4px 12px hsla(355, 65%, 42%, 0.3);
    @apply hover:shadow-lg hover:scale-105 transition-all duration-200;
  }

  .btn-heritage-teal {
    background: linear-gradient(
      135deg,
      var(--heritage-teal) 0%,
      hsl(174, 70%, 22%) 100%
    );
    color: white;
    border: none;
    box-shadow: 0 4px 12px hsla(174, 70%, 25%, 0.3);
    @apply hover:shadow-lg hover:scale-105 transition-all duration-200;
  }

  .heritage-border {
    border-color: var(--heritage-gray);
  }

  .heritage-card {
    background: var(--card);
    border: 1px solid var(--heritage-gray);
    border-radius: var(--radius);
    box-shadow: 0 4px 12px hsla(30, 8%, 15%, 0.05);
    @apply transition-all duration-200 hover:shadow-lg hover:border-opacity-60;
  }

  .person-node {
    @apply cursor-pointer transition-all duration-300 hover:shadow-xl hover:scale-105;
    background: var(--card);
    border: 2px solid var(--heritage-gray);
    border-radius: 12px;
    box-shadow: 0 4px 20px hsla(30, 8%, 15%, 0.1);
  }

  .person-node:hover {
    box-shadow: 0 8px 32px hsla(30, 8%, 15%, 0.15);
  }

  .family-gierczak {
    border-color: var(--heritage-burgundy);
    box-shadow: 0 4px 20px hsla(355, 65%, 42%, 0.2);
  }

  .family-ofiara {
    border-color: var(--heritage-teal);
    box-shadow: 0 4px 20px hsla(174, 70%, 25%, 0.2);
  }

  .elegant-separator {
    position: relative;
    text-align: center;
    margin: 2rem 0;
  }

  .elegant-separator::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      var(--heritage-gray),
      transparent
    );
  }

  .elegant-separator span {
    background: var(--background);
    padding: 0 1rem;
    color: var(--heritage-brown);
    font-weight: 500;
  }

  .heritage-gradient-text {
    background: linear-gradient(
      135deg,
      var(--heritage-burgundy) 0%,
      var(--heritage-teal) 100%
    );
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: 600;
  }
}


-----------------------------

@import url("https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Lato:wght@300;400;500;600&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* MOTYW JASNY – pergamin, sepia, szafir */
  --background: hsl(42, 40%, 94%);
  --foreground: hsl(20, 20%, 20%);

  --muted: hsl(40, 30%, 88%);
  --muted-foreground: hsl(25, 20%, 35%);

  --popover: hsl(42, 35%, 96%);
  --popover-foreground: hsl(20, 20%, 20%);

  --card: hsl(42, 40%, 97%);
  --card-foreground: hsl(20, 20%, 25%);

  --border: hsl(35, 25%, 80%);
  --input: hsl(45, 30%, 90%);

  --primary: hsl(210, 50%, 35%); /* głęboki szafir */
  --primary-foreground: hsl(45, 40%, 95%);

  --secondary: hsl(35, 35%, 85%);
  --secondary-foreground: hsl(20, 20%, 25%);

  --accent: hsl(30, 50%, 55%); /* złocisty brąz */
  --accent-foreground: hsl(45, 40%, 95%);

  --destructive: hsl(0, 65%, 50%);
  --destructive-foreground: hsl(60, 10%, 95%);

  --ring: hsl(210, 50%, 35%);

  /* Wykresy */
  --chart-1: hsl(30, 60%, 55%);
  --chart-2: hsl(210, 50%, 45%);
  --chart-3: hsl(35, 50%, 65%);
  --chart-4: hsl(200, 50%, 55%);
  --chart-5: hsl(28, 55%, 50%);

  /* Sidebar */
  --sidebar-background: hsl(45, 35%, 92%);
  --sidebar-foreground: hsl(20, 20%, 25%);
  --sidebar-primary: hsl(210, 50%, 35%);
  --sidebar-primary-foreground: hsl(45, 40%, 95%);
  --sidebar-accent: hsl(35, 35%, 85%);
  --sidebar-accent-foreground: hsl(20, 20%, 25%);
  --sidebar-border: hsl(35, 25%, 80%);
  --sidebar-ring: hsl(210, 50%, 35%);

  --radius: 0.5rem;
}

.dark {
  /* MOTYW CIEMNY – drewno, świeca, złoto, szafir */
  --background: hsl(30, 20%, 12%);
  --foreground: hsl(42, 40%, 88%);

  --muted: hsl(30, 15%, 18%);
  --muted-foreground: hsl(38, 25%, 70%);

  --popover: hsl(28, 20%, 14%);
  --popover-foreground: hsl(42, 40%, 88%);

  --card: hsl(30, 20%, 16%);
  --card-foreground: hsl(42, 35%, 85%);

  --border: hsl(35, 20%, 25%);
  --input: hsl(30, 15%, 22%);

  --primary: hsl(210, 60%, 65%); /* jaśniejszy szafir */
  --primary-foreground: hsl(30, 20%, 12%);

  --secondary: hsl(35, 25%, 25%);
  --secondary-foreground: hsl(42, 35%, 85%);

  --accent: hsl(40, 55%, 70%);
  --accent-foreground: hsl(28, 20%, 12%);

  --destructive: hsl(0, 70%, 60%);
  --destructive-foreground: hsl(60, 10%, 95%);

  --ring: hsl(210, 60%, 65%);

  /* Wykresy */
  --chart-1: hsl(40, 60%, 65%);
  --chart-2: hsl(210, 60%, 60%);
  --chart-3: hsl(35, 55%, 62%);
  --chart-4: hsl(200, 55%, 60%);
  --chart-5: hsl(28, 60%, 58%);

  /* Sidebar */
  --sidebar-background: hsl(30, 20%, 14%);
  --sidebar-foreground: hsl(42, 35%, 85%);
  --sidebar-primary: hsl(210, 60%, 65%);
  --sidebar-primary-foreground: hsl(28, 20%, 12%);
  --sidebar-accent: hsl(35, 25%, 25%);
  --sidebar-accent-foreground: hsl(42, 35%, 85%);
  --sidebar-border: hsl(35, 20%, 25%);
  --sidebar-ring: hsl(210, 60%, 65%);
}

* {
  border-color: hsl(var(--border));
}

body {
  background-color: hsl(var(--background));
  color: hsl(var(--foreground));
}

/* Dodatkowe style dla lepszego wyglądu drzewa genealogicznego */
.genealogy-node {
  background: hsl(var(--card));
  border: 2px solid hsl(var(--accent));
  border-radius: 8px;
  box-shadow: 0 2px 8px hsla(var(--foreground), 0.1);
}

.genealogy-connection {
  stroke: hsl(var(--accent));
  stroke-width: 2px;
}

/* Style dla starych fotografii */
.vintage-photo {
  border: 3px solid hsl(var(--accent));
  border-radius: 4px;
  box-shadow: 0 4px 12px hsla(var(--foreground), 0.2);
  filter: sepia(20%);
}

/* Efekt starego pergaminu dla kart */
.parchment-card {
  background: linear-gradient(
    135deg,
    hsl(var(--card)) 0%,
    hsl(45, 20%, 96%) 100%
  );
  border: 1px solid hsl(var(--accent));
}

.dark .parchment-card {
  background: linear-gradient(
    135deg,
    hsl(var(--card)) 0%,
    hsl(30, 18%, 18%) 100%
  );
}

--------------------------------------

import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { ThemeProvider } from "@/hooks/useTheme";
import { LanguageProvider, useLanguage } from "@/hooks/useLanguage";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { Route, Switch, Router } from "wouter";

import Navbar from "@/components/layout/Navbar";
import Footer from "@/components/layout/Footer";

import Home from "@/pages/Home";
import InteractiveTreeView from "@/pages/InteractiveTreeView";
import PersonIndex from "@/pages/PersonIndex";
import GalleryView from "@/pages/GalleryView";
import SourcesView from "@/pages/SourcesView";
import FamilyBranchView from "@/pages/FamilyBranchView";
import NotFound from "@/pages/not-found";

const queryClient = new QueryClient();

function AppRoutes() {
  const { p } = useLanguage();

  return (
    <Switch>
      <Route path={p("home")} component={Home} />
      <Route path={p("tree")} component={InteractiveTreeView} />
      <Route path={p("index")} component={PersonIndex} />
      <Route path={p("gallery")} component={GalleryView} />
      <Route path={p("sources")} component={SourcesView} />
      <Route path={`${p("familyBase")}/:family`} component={FamilyBranchView} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider defaultTheme="light" storageKey="genealogy-theme">
        <Router>
          <LanguageProvider defaultLanguage="pl">
            <TooltipProvider>
              <div className="flex flex-col min-h-screen dark:bg-[hsl(27,55%,13%)]">
                <Navbar />
                <main className="flex-grow">
                  <AppRoutes />
                </main>
                <Footer />
                <Toaster />
              </div>
            </TooltipProvider>
          </LanguageProvider>
        </Router>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

export default App;


---------------------------

import { useState } from "react";
import { Link, useLocation } from "wouter";
import {
  Menu,
  Network,
  Users,
  Sun,
  Moon,
  Languages,
  Globe,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { useTheme } from "@/hooks/useTheme";
import { useLanguage } from "@/hooks/useLanguage";

export default function Navbar() {
  const [location] = useLocation();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const { theme, setTheme } = useTheme();
  const { language, setLanguage, t, p } = useLanguage();

  const navigation = [
    { name: t("nav.home"), href: p("home") },
    { name: t("nav.tree"), href: p("tree") },
    { name: t("nav.index"), href: p("index") },
    { name: t("nav.gallery"), href: p("gallery") },
    { name: t("nav.sources"), href: p("sources") },
  ];

  const familyLinks = [
    { name: t("family.gierczak"), href: `${p("familyBase")}/gierczak` },
    { name: t("family.ofiara"), href: `${p("familyBase")}/ofiara` },
  ];

  const isActive = (href: string) => location === href;

  return (
    <nav className="bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 shadow-sm border-b heritage-border sticky top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <Link href={p("home")} className="flex-shrink-0">
            <h1 className="font-serif text-lg md:text-xl font-semibold heritage-gradient-text flex items-center">
              <Network className="w-5 h-5 mr-2" />
              <span className="hidden sm:inline">{t("nav.title")}</span>
              <span className="sm:hidden">{t("nav.title.mobile")}</span>
            </h1>
          </Link>

          <div className="hidden md:flex items-center space-x-6">
            <div className="flex items-baseline space-x-4">
              {navigation.map((item) => (
                <Link
                  key={item.href}
                  href={item.href}
                  className={`px-3 py-2 text-sm font-medium transition-all duration-200 rounded-md ${
                    isActive(item.href)
                      ? "heritage-burgundy bg-heritage-cream"
                      : "heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50"
                  }`}
                >
                  {item.name}
                </Link>
              ))}

              <DropdownMenu>
                <DropdownMenuTrigger className="heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50 px-3 py-2 text-sm font-medium transition-all duration-200 rounded-md inline-flex items-center">
                  {t("nav.families")} <Users className="ml-1 w-3 h-3" />
                </DropdownMenuTrigger>
                <DropdownMenuContent className="heritage-card">
                  {familyLinks.map((item) => (
                    <DropdownMenuItem key={item.name} asChild>
                      <Link href={item.href} className="cursor-pointer">
                        {item.name}
                      </Link>
                    </DropdownMenuItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            </div>

            <div className="flex items-center space-x-2 border-l pl-4 heritage-border">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="sm" className="h-8 w-8 px-0">
                    <Globe className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="heritage-card">
                  <DropdownMenuItem
                    onClick={() => setLanguage("pl")}
                    className={
                      language === "pl" ? "heritage-burgundy font-medium" : ""
                    }
                  >
                    Polski
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => setLanguage("en")}
                    className={
                      language === "en" ? "heritage-burgundy font-medium" : ""
                    }
                  >
                    English
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>

              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="sm" className="h-8 w-8 px-0">
                    <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
                    <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="heritage-card">
                  <DropdownMenuItem onClick={() => setTheme("light")}>
                    <Sun className="mr-2 h-4 w-4" />
                    {language === "pl" ? "Jasny" : "Light"}
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setTheme("dark")}>
                    <Moon className="mr-2 h-4 w-4" />
                    {language === "pl" ? "Ciemny" : "Dark"}
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setTheme("system")}>
                    <Languages className="mr-2 h-4 w-4" />
                    {language === "pl" ? "System" : "System"}
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>

          <div className="md:hidden flex items-center space-x-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setLanguage(language === "pl" ? "en" : "pl")}
              className="h-8 px-2 text-xs heritage-text"
            >
              {language.toUpperCase()}
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setTheme(theme === "light" ? "dark" : "light")}
              className="h-8 w-8 px-0"
            >
              <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
              <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
            </Button>
            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon" className="heritage-text">
                  <Menu className="w-5 h-5" />
                </Button>
              </SheetTrigger>
              <SheetContent side="right" className="w-80 heritage-card">
                <div className="flex flex-col space-y-4 mt-8">
                  {navigation.map((item) => (
                    <Link
                      key={item.href}
                      href={item.href}
                      className={`block px-4 py-3 text-base font-medium transition-all duration-200 ${
                        isActive(item.href)
                          ? "heritage-burgundy bg-heritage-cream"
                          : "heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50"
                      } rounded-lg`}
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      {item.name}
                    </Link>
                  ))}
                  <div className="elegant-separator">
                    <span>{t("nav.families")}</span>
                  </div>
                  {familyLinks.map((item) => (
                    <Link
                      key={item.href}
                      href={item.href}
                      className="block px-6 py-3 text-base font-medium heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50 rounded-lg transition-all duration-200"
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      {item.name}
                    </Link>
                  ))}
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
      </div>
    </nav>
  );
}

-------------------------------

// App.tsx - WERSJA ZMODYFIKOWANA

import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { ThemeProvider } from "@/hooks/useTheme";
import { LanguageProvider, useLanguage } from "@/hooks/useLanguage";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
// ZMIANA 1: Importujemy 'useEffect' z React i 'useLocation' z wouter
import { useEffect } from "react";
import { Route, Switch, Router, useLocation } from "wouter";

import Navbar from "@/components/layout/Navbar";
import Footer from "@/components/layout/Footer";

import Home from "@/pages/Home";
import InteractiveTreeView from "@/pages/InteractiveTreeView";
import PersonIndex from "@/pages/PersonIndex";
import GalleryView from "@/pages/GalleryView";
import SourcesView from "@/pages/SourcesView";
import FamilyBranchView from "@/pages/FamilyBranchView";
import NotFound from "@/pages/not-found";

const queryClient = new QueryClient();

// Komponent pomocniczy do zarządzania przewijaniem
const ScrollToTop = () => {
  const [location] = useLocation();
  useEffect(() => {
    window.scrollTo(0, 0);
  }, [location]); // Uruchom ten efekt za każdym razem, gdy zmieni się lokalizacja (URL)

  return null; // Ten komponent niczego nie renderuje
};

function AppRoutes() {
  const { p } = useLanguage();

  return (
    <Switch>
      <Route path={p("home")} component={Home} />
      <Route path={p("tree")} component={InteractiveTreeView} />
      <Route path={p("index")} component={PersonIndex} />
      <Route path={p("gallery")} component={GalleryView} />
      <Route path={p("sources")} component={SourcesView} />
      <Route path={`${p("familyBase")}/:family`} component={FamilyBranchView} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider defaultTheme="light" storageKey="genealogy-theme">
        <Router>
          <LanguageProvider defaultLanguage="pl">
            <TooltipProvider>
              {/* ZMIANA 2: Umieszczamy nasz nowy komponent wewnątrz Routera */}
              <ScrollToTop />
              {/* Usunięto zbędny kolor tła z tego diva */}
              <div className="flex flex-col min-h-screen dark:bg-[hsl(27,55%,13%)]">
                <Navbar />
                <main className="flex-grow">
                  <AppRoutes />
                </main>
                <Footer />
                <Toaster />
              </div>
            </TooltipProvider>
          </LanguageProvider>
        </Router>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

export default App;



------------------------------------

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import Lightbox from "@/components/ui/Lightbox";
import { Images, FileText, MapPin } from "lucide-react";
import SEO from "@/components/SEO";
import { useLanguage } from "@/hooks/useLanguage";

type GalleryCategory = "all" | "portraits" | "documents" | "places";

interface GalleryItem {
  id: string;
  src: string;
  alt: string;
  category: GalleryCategory;
  titleKey: string;
  descriptionKey?: string;
}

export default function GalleryView() {
  const { t } = useLanguage();
  const [selectedCategory, setSelectedCategory] =
    useState<GalleryCategory>("all");
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [lightboxImage, setLightboxImage] = useState<{
    src: string;
    alt: string;
  } | null>(null);

  const galleryItems: GalleryItem[] = [
    {
      id: "portrait-1",
      src: "/images/6.jpg",
      alt: "Portret rodzinny z początku XX wieku",
      category: "portraits",
      titleKey: "gallery.item.portrait-1.title",
      descriptionKey: "gallery.item.portrait-1.desc",
    },
    {
      id: "portrait-2",
      src: "/images/33.png",
      alt: "Zdjęcie mojej mamy z okresu powojennego",
      category: "portraits",
      titleKey: "gallery.item.portrait-2.title",
      descriptionKey: "gallery.item.portrait-2.desc",
    },
    {
      id: "portrait-3",
      src: "/images/przodek.png",
      alt: "Portret starszego człowieka w tradycyjnym stroju",
      category: "portraits",
      titleKey: "gallery.item.portrait-3.title",
      descriptionKey: "gallery.item.portrait-3.desc",
    },
    {
      id: "portrait-4",
      src: "/images/28.png",
      alt: "Portret rodzinny z początku XX wieku",
      category: "portraits",
      titleKey: "gallery.item.portrait-4.title",
      descriptionKey: "gallery.item.portrait-4.desc",
    },
    {
      id: "doc-1",
      src: "/images/14.jpg",
      alt: "Akt ślubu Jana i Agnieszki",
      category: "documents",
      titleKey: "gallery.item.doc-1.title",
      descriptionKey: "gallery.item.doc-1.desc",
    },
    {
      id: "doc-2",
      src: "/images/11.jpg",
      alt: "Moja mama jako matka chrzestna Zofii Bilskiej",
      category: "portraits",
      titleKey: "gallery.item.doc-2.title",
      descriptionKey: "gallery.item.doc-2.desc",
    },
    {
      id: "doc-3",
      src: "/images/12.png",
      alt: "Stary dokument prawny z pieczęcią woskową",
      category: "documents",
      titleKey: "gallery.item.doc-3.title",
      descriptionKey: "gallery.item.doc-3.desc",
    },
    {
      id: "doc-4",
      src: "/images/1.png",
      alt: "Ręcznie napisane drzewo genealogiczne",
      category: "documents",
      titleKey: "gallery.item.doc-4.title",
      descriptionKey: "gallery.item.doc-4.desc",
    },
    {
      id: "place-1",
      src: "/images/31.png",
      alt: "I Komunia Św. mojego wujka Romana Ofiary",
      category: "portraits",
      titleKey: "gallery.item.place-1.title",
      descriptionKey: "gallery.item.place-1.desc",
    },
    {
      id: "place-2",
      src: "/images/24.jpg",
      alt: "Historyczne zabudowania wsi Jaszowice",
      category: "places",
      titleKey: "gallery.item.place-2.title",
      descriptionKey: "gallery.item.place-2.desc",
    },
    {
      id: "place-3",
      src: "/images/1.jfif",
      alt: "Stary cmentarz z nagrobkami rodzinnymi",
      category: "places",
      titleKey: "gallery.item.place-3.title",
      descriptionKey: "gallery.item.place-3.desc",
    },
  ];

  const categories = [
    { id: "all" as const, name: t("gallery.filter.all"), icon: Images },
    {
      id: "portraits" as const,
      name: t("gallery.filter.portraits"),
      icon: Images,
    },
    {
      id: "documents" as const,
      name: t("gallery.filter.documents"),
      icon: FileText,
    },
    { id: "places" as const, name: t("gallery.filter.places"), icon: MapPin },
  ];

  const filteredItems =
    selectedCategory === "all"
      ? galleryItems
      : galleryItems.filter((item) => item.category === selectedCategory);

  const handleImageClick = (item: GalleryItem) => {
    const title = t(item.titleKey);
    const description = item.descriptionKey ? t(item.descriptionKey) : "";
    setLightboxImage({
      src: item.src,
      alt: `${title}${description ? ` - ${description}` : ""}`,
    });
    setLightboxOpen(true);
  };

  return (
    <>
      <SEO title={t("gallery.title")} description={t("gallery.subtitle")} />

      <div className="min-h-screen bg-stone-50">
        <div className="bg-white shadow-sm border-b heritage-border">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="text-center">
              <h1 className="font-serif text-3xl md:text-4xl font-semibold heritage-text mb-4">
                {t("gallery.title")}
              </h1>
              <p className="text-xl text-stone-600 max-w-3xl mx-auto">
                {t("gallery.subtitle")}
              </p>
            </div>
          </div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="flex flex-wrap justify-center gap-4 mb-12">
            {categories.map((category) => {
              const IconComponent = category.icon;
              const isActive = selectedCategory === category.id;
              return (
                <Button
                  key={category.id}
                  variant={isActive ? "default" : "outline"}
                  className={`px-6 py-2 ${
                    isActive
                      ? "btn-heritage-burgundy"
                      : "heritage-border heritage-text hover:bg-stone-100"
                  }`}
                  onClick={() => setSelectedCategory(category.id)}
                >
                  <IconComponent className="w-4 h-4 mr-2" />
                  {category.name}
                </Button>
              );
            })}
          </div>

          <div className="text-center mb-8">
            <p className="text-stone-600">
              {categories.find((c) => c.id === selectedCategory)?.name} -{" "}
              <span className="font-semibold heritage-text">
                {t("gallery.results", { count: filteredItems.length })}
              </span>
            </p>
          </div>

          {filteredItems.length > 0 ? (
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
              {filteredItems.map((item) => (
                <Card
                  key={item.id}
                  className="group cursor-pointer hover:shadow-lg transition-all overflow-hidden"
                  onClick={() => handleImageClick(item)}
                >
                  <div className="relative">
                    <img
                      src={item.src}
                      alt={item.alt}
                      className="w-full h-80 object-cover transition-transform group-hover:scale-105"
                      loading="lazy"
                    />
                    <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                      <div className="text-white text-center">
                        <Images className="w-8 h-8 mx-auto mb-2" />
                        <p className="text-sm font-medium">
                          {t("gallery.zoom")}
                        </p>
                      </div>
                    </div>

                    <div className="absolute top-2 right-2">
                      <span
                        className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium text-white ${
                          item.category === "portraits"
                            ? "bg-blue-500"
                            : item.category === "documents"
                            ? "bg-green-500"
                            : item.category === "places"
                            ? "bg-orange-500"
                            : "bg-stone-500"
                        }`}
                      >
                        {categories.find((c) => c.id === item.category)?.name}
                      </span>
                    </div>
                  </div>

                  <CardContent className="p-3">
                    <h3 className="font-semibold heritage-text text-sm mb-1 truncate">
                      {t(item.titleKey)}
                    </h3>
                    {item.descriptionKey && (
                      <p className="text-xs text-stone-600 line-clamp-2">
                        {t(item.descriptionKey)}
                      </p>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <Images className="w-16 h-16 text-stone-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold heritage-text mb-2">
                {t("gallery.noResults.title")}
              </h3>
              <p className="text-stone-600 mb-4">
                {t("gallery.noResults.desc")}
              </p>
              <Button
                variant="outline"
                onClick={() => setSelectedCategory("all")}
                className="heritage-border heritage-text hover:bg-stone-100"
              >
                {t("gallery.noResults.cta")}
              </Button>
            </div>
          )}
        </div>

        <Lightbox
          isOpen={lightboxOpen}
          onClose={() => setLightboxOpen(false)}
          image={lightboxImage}
        />
      </div>
    </>
  );
}


--------------------------------------

import { useState } from "react";
import { Link, useLocation } from "wouter";
import {
  Menu,
  Network,
  Users,
  Sun,
  Moon,
  Languages,
  Globe,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { useTheme } from "@/hooks/useTheme";
import { useLanguage } from "@/hooks/useLanguage";

export default function Navbar() {
  const [location] = useLocation();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const { theme, setTheme } = useTheme();
  const { language, setLanguage, t, p } = useLanguage();

  const navigation = [
    { name: t("nav.home"), href: p("home") },
    { name: t("nav.tree"), href: p("tree") },
    { name: t("nav.index"), href: p("index") },
    { name: t("nav.gallery"), href: p("gallery") },
    { name: t("nav.sources"), href: p("sources") },
  ];

  const familyLinks = [
    { name: t("family.gierczak"), href: `${p("familyBase")}/gierczak` },
    { name: t("family.ofiara"), href: `${p("familyBase")}/ofiara` },
  ];

  const isActive = (href: string) => location === href;

  const handleLogoClick = (e: React.MouseEvent<HTMLAnchorElement>) => {
    if (location === p("home")) {
      e.preventDefault();
      window.scrollTo({ top: 0, behavior: "smooth" });
    }
  };

  return (
    <nav className="bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 shadow-sm border-b heritage-border fixed w-full top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <Link
            href={p("home")}
            className="flex-shrink-0"
            onClick={handleLogoClick}
          >
            <h1 className="font-serif text-lg md:text-xl font-semibold heritage-gradient-text flex items-center">
              <Network className="w-5 h-5 mr-2" />
              <span className="hidden sm:inline">{t("nav.title")}</span>
              <span className="sm:hidden">{t("nav.title.mobile")}</span>
            </h1>
          </Link>

          <div className="hidden md:flex items-center space-x-6">
            <div className="flex items-baseline space-x-4">
              {navigation.map((item) => (
                <Link
                  key={item.href}
                  href={item.href}
                  onClick={
                    item.href === p("home") ? handleLogoClick : undefined
                  }
                  className={`px-3 py-2 text-sm font-medium transition-all duration-200 rounded-md ${
                    isActive(item.href)
                      ? "heritage-burgundy bg-heritage-cream"
                      : "heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50"
                  }`}
                >
                  {item.name}
                </Link>
              ))}

              <DropdownMenu>
                <DropdownMenuTrigger className="heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50 px-3 py-2 text-sm font-medium transition-all duration-200 rounded-md inline-flex items-center">
                  {t("nav.families")} <Users className="ml-1 w-3 h-3" />
                </DropdownMenuTrigger>
                <DropdownMenuContent className="heritage-card">
                  {familyLinks.map((item) => (
                    <DropdownMenuItem key={item.name} asChild>
                      <Link href={item.href} className="cursor-pointer">
                        {item.name}
                      </Link>
                    </DropdownMenuItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            </div>

            <div className="flex items-center space-x-2 border-l pl-4 heritage-border">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="sm" className="h-8 w-8 px-0">
                    <Globe className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="heritage-card">
                  <DropdownMenuItem
                    onClick={() => setLanguage("pl")}
                    className={
                      language === "pl" ? "heritage-burgundy font-medium" : ""
                    }
                  >
                    Polski
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => setLanguage("en")}
                    className={
                      language === "en" ? "heritage-burgundy font-medium" : ""
                    }
                  >
                    English
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>

              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="sm" className="h-8 w-8 px-0">
                    <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
                    <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="heritage-card">
                  <DropdownMenuItem onClick={() => setTheme("light")}>
                    <Sun className="mr-2 h-4 w-4" />
                    {language === "pl" ? "Jasny" : "Light"}
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setTheme("dark")}>
                    <Moon className="mr-2 h-4 w-4" />
                    {language === "pl" ? "Ciemny" : "Dark"}
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setTheme("system")}>
                    <Languages className="mr-2 h-4 w-4" />
                    {language === "pl" ? "System" : "System"}
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>

          <div className="md:hidden flex items-center space-x-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setLanguage(language === "pl" ? "en" : "pl")}
              className="h-8 px-2 text-xs heritage-text"
            >
              {language.toUpperCase()}
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setTheme(theme === "light" ? "dark" : "light")}
              className="h-8 w-8 px-0"
            >
              <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
              <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
            </Button>
            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon" className="heritage-text">
                  <Menu className="w-5 h-5" />
                </Button>
              </SheetTrigger>
              <SheetContent side="right" className="w-80 heritage-card">
                <SheetHeader className="mb-4 text-left">
                  <SheetTitle>{t("nav.title")}</SheetTitle>
                </SheetHeader>
                <div className="flex flex-col space-y-4">
                  {navigation.map((item) => (
                    <Link
                      key={item.href}
                      href={item.href}
                      className={`block px-4 py-3 text-base font-medium transition-all duration-200 ${
                        isActive(item.href)
                          ? "heritage-burgundy bg-heritage-cream"
                          : "heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50"
                      } rounded-lg`}
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      {item.name}
                    </Link>
                  ))}
                  <div className="elegant-separator">
                    <span>{t("nav.families")}</span>
                  </div>
                  {familyLinks.map((item) => (
                    <Link
                      key={item.href}
                      href={item.href}
                      className="block px-6 py-3 text-base font-medium heritage-text hover:text-[hsl(var(--heritage-burgundy))] hover:bg-heritage-cream/50 rounded-lg transition-all duration-200"
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      {item.name}
                    </Link>
                  ))}
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
      </div>
    </nav>
  );
}


----------------------------

import React, { useLayoutEffect } from "react";
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  MarkerType,
  Edge,
  Node,
  NodeTypes,
  Position,
} from "reactflow";
import "reactflow/dist/style.css";
import PersonNode from "./PersonNode";
import { Person } from "@shared/schema";
import dagre from "dagre";

interface InteractiveTreeProps {
  allPeople: Person[];
  onPersonClick: (person: Person) => void;
  showGierczak: boolean;
  showOfiara: boolean;
  showDescendants: boolean;
  showMarriages: boolean;
}

type LayoutEdge = Edge & {
  minlen?: number;
  weight?: number;
};

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const nodeWidth = 260;
const nodeHeight = 130;

const nodeTypes: NodeTypes = {
  person: PersonNode,
};

const getLayoutedElements = (nodes: Node[], edges: LayoutEdge[]) => {
  dagreGraph.setGraph({ rankdir: "TB", nodesep: 25, ranksep: 90 });

  nodes.forEach((node) => {
    const width = node.id.startsWith("union-") ? 0 : nodeWidth;
    const height = node.id.startsWith("union-") ? 0 : nodeHeight;
    dagreGraph.setNode(node.id, { width, height });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target, {
      minlen: edge.minlen || 1,
      weight: edge.weight || 1,
    });
  });

  dagre.layout(dagreGraph);

  nodes.forEach((node) => {
    const n = dagreGraph.node(node.id);
    if (n) {
      node.targetPosition = Position.Top;
      node.sourcePosition = Position.Bottom;
      node.position = {
        x: n.x - n.width / 2,
        y: n.y - n.height / 2,
      };
    }
  });

  return { nodes };
};

export default function InteractiveTree({
  allPeople,
  onPersonClick,
  showGierczak,
  showOfiara,
  showDescendants,
  showMarriages,
}: InteractiveTreeProps) {
  const [nodes, setNodes, onNodesChange] = useNodesState<Node[]>([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge[]>([]);

  useLayoutEffect(() => {
    if (!allPeople || allPeople.length === 0) {
      setNodes([]);
      setEdges([]);
      return;
    }

    const allPersonNodes: Node[] = allPeople.map((person) => ({
      id: person.id.toString(),
      type: "person",
      data: {
        person,
        onClick: () => onPersonClick(person),
        family: person.family,
      },
      position: { x: 0, y: 0 },
    }));

    const unionNodes: Node[] = [];
    const layoutEdges: LayoutEdge[] = [];

    allPeople.forEach((person) => {
      const pid = person.id.toString();

      if (person.parentIds?.length === 2) {
        const [p1, p2] = person.parentIds.sort((a, b) => a - b);
        const coupleKey = `${p1}-${p2}`;
        const unionId = `union-${coupleKey}`;

        if (!unionNodes.find((u) => u.id === unionId)) {
          unionNodes.push({
            id: unionId,
            type: "default",
            position: { x: 0, y: 0 },
            data: {},
            sourcePosition: Position.Bottom,
            targetPosition: Position.Top,
          });
          layoutEdges.push({
            id: `l-${p1}-${unionId}`,
            source: p1.toString(),
            target: unionId,
            weight: 2,
          });
          layoutEdges.push({
            id: `l-${p2}-${unionId}`,
            source: p2.toString(),
            target: unionId,
            weight: 2,
          });
        }
        layoutEdges.push({
          id: `l-${unionId}-${pid}`,
          source: unionId,
          target: pid,
          weight: 2,
        });
      } else if (person.parentIds?.length === 1) {
        const p = person.parentIds[0].toString();
        layoutEdges.push({
          id: `l-${p}-${pid}`,
          source: p,
          target: pid,
          weight: 2,
        });
      }

      person.spouseIds?.forEach((sid) => {
        if (person.id < sid) {
          layoutEdges.push({
            id: `rank-${person.id}-${sid}`,
            source: person.id.toString(),
            target: sid.toString(),
            minlen: 1,
            weight: 10,
          });
        }
      });
    });

    // dodatkowo wymuszona relacja Gierczak → Ofiara w układzie
    layoutEdges.push({
      id: "stacking-edge",
      source: "1",
      target: "57",
      minlen: 3,
      weight: 1,
    });

    const allNodesForLayout = [...allPersonNodes, ...unionNodes];
    const { nodes: positionedNodes } = getLayoutedElements(
      allNodesForLayout,
      layoutEdges
    );
    const nodeMap = new Map(positionedNodes.map((n) => [n.id, n]));

    const visibleIds = new Set(
      allPeople
        .filter(
          (p) =>
            (p.family === "gierczak" && showGierczak) ||
            (p.family === "ofiara" && showOfiara)
        )
        .map((p) => p.id.toString())
    );

    const finalNodes = positionedNodes.filter(
      (node) => !node.id.startsWith("union-") && visibleIds.has(node.id)
    );

    const finalEdges: Edge[] = [];

    if (showDescendants) {
      allPeople.forEach((p) => {
        p.parentIds?.forEach((par) => {
          const cid = p.id.toString(),
            pid = par.toString();
          if (visibleIds.has(cid) && visibleIds.has(pid)) {
            finalEdges.push({
              id: `s-${pid}-${cid}`,
              source: pid,
              target: cid,
              type: "smoothstep",
              markerEnd: { type: MarkerType.ArrowClosed, color: "red" },
              style: { stroke: "red", strokeWidth: 2 },
            });
          }
        });
      });
    }

    if (showMarriages) {
      allPeople.forEach((p) => {
        p.spouseIds?.forEach((sid) => {
          const sidStr = sid.toString(),
            pidStr = p.id.toString();
          if (p.id < sid && visibleIds.has(pidStr) && visibleIds.has(sidStr)) {
            finalEdges.push({
              id: `m-${pidStr}-${sidStr}`,
              source: pidStr,
              target: sidStr,
              type: "straight",
              style: {
                stroke: "blue",
                strokeWidth: 2,
                strokeDasharray: "5,5",
              },
            });
          }
        });
      });
    }

    setNodes(finalNodes);
    setEdges(finalEdges);
  }, [
    allPeople,
    onPersonClick,
    showGierczak,
    showOfiara,
    showDescendants,
    showMarriages,
    setNodes,
    setEdges,
  ]);

  return (
    <div className="w-full h-full bg-stone-50 dark:bg-stone-700">
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        nodeTypes={nodeTypes}
        fitView
        minZoom={0.1}
        style={{ zIndex: 10 }}
        className="react-flow-heritage"
      >
        <Background />
        <Controls />
        <MiniMap
          className="!bg-background border heritage-border"
          nodeStrokeWidth={3}
          nodeColor={(node) => {
            if (node.data?.family === "gierczak")
              return "hsl(var(--heritage-burgundy))";
            if (node.data?.family === "ofiara")
              return "hsl(var(--heritage-teal))";
            return "hsl(var(--muted))";
          }}
        />
      </ReactFlow>
    </div>
  );
}


---------------------------------

import { useState, useMemo } from "react";
import { useQuery } from "@tanstack/react-query";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import PersonCard from "@/components/ui/PersonCard";
import PersonModal from "@/components/ui/PersonModal";
import { Person } from "@shared/schema";
import { Search } from "lucide-react";
import SEO from "@/components/SEO";
import genealogyData from "@/data/genealogy.json";
import { useLanguage } from "@/hooks/useLanguage";

export default function PersonIndex() {
  const { t } = useLanguage();
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedLetter, setSelectedLetter] = useState<string | null>(null);
  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);
  const [modalOpen, setModalOpen] = useState(false);

  const { data: people = [] } = useQuery({
    queryKey: ["/api/people"],
    queryFn: () => Promise.resolve(genealogyData.people as Person[]),
  });

  const availableLetters = useMemo(() => {
    const letters = new Set(
      people.map((person) => person.lastName.charAt(0).toUpperCase())
    );
    return Array.from(letters).sort();
  }, [people]);

  const filteredPeople = useMemo(() => {
    let filtered = people;
    if (searchTerm) {
      filtered = filtered.filter(
        (person) =>
          `${person.firstName} ${person.lastName}`
            .toLowerCase()
            .includes(searchTerm.toLowerCase()) ||
          (person.maidenName &&
            person.maidenName
              .toLowerCase()
              .includes(searchTerm.toLowerCase())) ||
          (person.birthPlace &&
            person.birthPlace.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }
    if (selectedLetter) {
      filtered = filtered.filter(
        (person) => person.lastName.charAt(0).toUpperCase() === selectedLetter
      );
    }
    return filtered.sort((a, b) => {
      const nameA = `${a.lastName} ${a.firstName}`.toLowerCase();
      const nameB = `${b.lastName} ${b.firstName}`.toLowerCase();
      return nameA.localeCompare(nameB);
    });
  }, [people, searchTerm, selectedLetter]);

  const handlePersonClick = (person: Person) => {
    setSelectedPerson(person);
    setModalOpen(true);
  };

  const handleLetterClick = (letter: string) => {
    setSelectedLetter(selectedLetter === letter ? null : letter);
  };

  return (
    <>
      <SEO title={t("index.title")} description={t("index.subtitle")} />
      <div className="min-h-screen dark:bg-stone-600 bg-stone-50">
        <div className="bg-white shadow-sm border-b heritage-border">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="text-center">
              <h1 className="font-serif text-3xl md:text-4xl font-semibold heritage-text mb-4">
                {t("index.title")}
              </h1>
              <p className="text-xl text-stone-600 max-w-3xl mx-auto">
                {t("index.subtitle")}
              </p>
            </div>
          </div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="max-w-md mx-auto mb-8">
            <div className="relative">
              <Input
                type="text"
                placeholder={t("index.searchPlaceholder")}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-stone-500" />
            </div>
          </div>

          <div className="flex flex-wrap justify-center gap-2 mb-8">
            {availableLetters.map((letter) => (
              <Button
                key={letter}
                variant={selectedLetter === letter ? "default" : "outline"}
                size="sm"
                className={`w-10 h-10 ${
                  selectedLetter === letter
                    ? "btn-heritage-burgundy"
                    : "heritage-border heritage-text hover:bg-stone-100"
                }`}
                onClick={() => handleLetterClick(letter)}
              >
                {letter}
              </Button>
            ))}
            {selectedLetter && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSelectedLetter(null)}
                className="text-stone-600 hover:text-stone-800"
              >
                {t("index.clear")}
              </Button>
            )}
          </div>

          <div className="text-center mb-6">
            <p className="text-stone-600">
              {t("index.resultsFound", { count: filteredPeople.length })}
              {selectedLetter &&
                t("index.resultsForLetter", { letter: selectedLetter })}
              {searchTerm && t("index.resultsForSearch", { term: searchTerm })}
            </p>
          </div>

          {filteredPeople.length > 0 ? (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              {filteredPeople.map((person) => (
                <PersonCard
                  key={person.id}
                  person={person}
                  onClick={() => handlePersonClick(person)}
                />
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="w-24 h-24 bg-stone-200 rounded-full flex items-center justify-center mx-auto mb-4">
                <Search className="w-8 h-8 text-stone-500" />
              </div>
              <h3 className="text-lg font-semibold heritage-text mb-2">
                {t("index.noResults.title")}
              </h3>
              <p className="text-stone-600 mb-4">{t("index.noResults.desc")}</p>
              {(searchTerm || selectedLetter) && (
                <Button
                  variant="outline"
                  onClick={() => {
                    setSearchTerm("");
                    setSelectedLetter(null);
                  }}
                  className="heritage-border heritage-text hover:bg-stone-100"
                >
                  {t("index.noResults.cta")}
                </Button>
              )}
            </div>
          )}

          {filteredPeople.length > 50 && (
            <div className="text-center mt-8">
              <Button className="btn-heritage-burgundy">
                {t("index.showMore")}
              </Button>
            </div>
          )}
        </div>

        <PersonModal
          person={selectedPerson}
          isOpen={modalOpen}
          onClose={() => setModalOpen(false)}
          onPersonClick={handlePersonClick}
          allPeople={people}
        />
      </div>
    </>
  );
}


---------------------------------

import { Person, Document, InsertPerson, InsertDocument } from "@shared/schema";

export interface IStorage {
  getAllPeople(): Promise<Person[]>;
  getPersonById(id: number): Promise<Person | undefined>;
  getPeopleByFamily(family: string): Promise<Person[]>;
  getAllDocuments(): Promise<Document[]>;
  getDocumentsByPersonId(personId: number): Promise<Document[]>;
}

export class MemStorage implements IStorage {
  private people: Map<number, Person>;
  private documents: Map<number, Document>;

  constructor() {
    this.people = new Map();
    this.documents = new Map();
    this.initializeData();
  }

  private initializeData() {
    // Authentic genealogical data for Gierczak and Ofiara families
    const authenticPeople: Person[] = [
      // Gierczak family line
      {
        id: 1,
        firstName: "Tomasz",
        lastName: "Gierczak",
        birthDate: null,
        deathDate: null,
        birthPlace: "Jaszowice",
        occupation: null,
        family: "gierczak",
        biography: "Praprzodek rodziny Gierczak. Mieszkał w Jaszowicach - prywatnej wsi szlacheckiej w drugiej połowie XVI wieku w powiecie radomskim województwa sandomierskiego.",
        spouseIds: [2],
        childIds: [3],
        parentIds: [],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 2,
        firstName: "Zofia",
        lastName: "Giel",
        maidenName: "Gielowska",
        birthDate: null,
        deathDate: null,
        birthPlace: null,
        occupation: null,
        family: "gierczak",
        biography: "Żona Tomasza Gierczaka, z domu Giel (Gielowska).",
        spouseIds: [1],
        childIds: [3],
        parentIds: [],
        documents: [],
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 3,
        firstName: "Ambroży",
        lastName: "Gierczak",
        birthDate: null,
        deathDate: "1836",
        birthPlace: "Jaszowice",
        occupation: null,
        family: "gierczak",
        biography: "Syn Tomasza i Zofii Gierczak. Zmarł w 1836 roku. Poślubił Kunegundę Kania około 1820 roku.",
        spouseIds: [4],
        childIds: [5],
        parentIds: [1, 2],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 4,
        firstName: "Kunegunda",
        lastName: "Kania",
        maidenName: "Koniak, Karcz",
        birthDate: null,
        deathDate: null,
        birthPlace: null,
        occupation: null,
        family: "gierczak",
        biography: "Żona Ambrożego Gierczaka, poślubiona około 1820 roku.",
        spouseIds: [3],
        childIds: [5],
        parentIds: [],
        documents: [],
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 5,
        firstName: "Karol",
        lastName: "Gierczak",
        birthDate: "1828",
        deathDate: "1903",
        birthPlace: "Jaszowice",
        occupation: null,
        family: "gierczak",
        biography: "Syn Ambrożego i Kunegundy. Urodził się w 1828 roku, zmarł w 1903. Poślubił Teklę Kozyra 23 listopada 1857 roku.",
        spouseIds: [6],
        childIds: [7],
        parentIds: [3, 4],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 6,
        firstName: "Tekla",
        lastName: "Kozyra",
        maidenName: "Kozera",
        birthDate: "1831-10-19",
        deathDate: "1909",
        birthPlace: null,
        occupation: null,
        family: "gierczak",
        biography: "Żona Karola Gierczaka, urodzona 19 października 1831, zmarła w 1909. Pobrali się 23 listopada 1857 roku.",
        spouseIds: [5],
        childIds: [7],
        parentIds: [],
        documents: [],
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 7,
        firstName: "Paweł",
        lastName: "Gierczak",
        birthDate: "1867-01-11",
        deathDate: "1935-07-29",
        birthPlace: "Gulinek",
        occupation: null,
        family: "gierczak",
        biography: "Syn Karola i Tekli. Urodził się 11 stycznia 1867 w Gulinku k. Zakrzewa - prywatnej wsi szlacheckiej, zmarł 29 lipca 1935. Poślubił Katarzynę Czerwińską w 1887 roku.",
        spouseIds: [8],
        childIds: [9],
        parentIds: [5, 6],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 8,
        firstName: "Katarzyna",
        lastName: "Czerwińska",
        birthDate: null,
        deathDate: null,
        birthPlace: null,
        occupation: null,
        family: "gierczak",
        biography: "Żona Pawła Gierczaka, poślubiona w 1887 roku.",
        spouseIds: [7],
        childIds: [9],
        parentIds: [],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 9,
        firstName: "Jan",
        lastName: "Gierczak",
        birthDate: "1891-06-18",
        deathDate: "1958-11-07",
        birthPlace: "Gulinek",
        occupation: null,
        family: "gierczak",
        biography: "Syn Pawła i Katarzyny. Urodził się 18 czerwca 1891, zmarł 7 listopada 1958. Poślubił Agnieszkę Baćmaga 14 listopada 1917 roku.",
        spouseIds: [10],
        childIds: [11],
        parentIds: [7, 8],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 10,
        firstName: "Agnieszka",
        lastName: "Baćmaga",
        birthDate: "1894-04-13",
        deathDate: "1969-11-08",
        birthPlace: null,
        occupation: null,
        family: "gierczak",
        biography: "Żona Jana Gierczaka, urodzona 13 kwietnia 1894, zmarła 8 listopada 1969. Pobrali się 14 listopada 1917 roku.",
        spouseIds: [9],
        childIds: [11],
        parentIds: [],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 11,
        firstName: "Józef",
        lastName: "Gierczak",
        birthDate: "1930-02-23",
        deathDate: "1996-08-08",
        birthPlace: "Gulinek",
        occupation: null,
        family: "gierczak",
        biography: "Syn Jana i Agnieszki. Urodził się 23 lutego 1930, zmarł 8 sierpnia 1996. Poślubił Mariannę Ofiarę 26 listopada 1952 roku.",
        spouseIds: [12],
        childIds: [],
        parentIds: [9, 10],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },

      // Ofiara family line
      {
        id: 12,
        firstName: "Marianna",
        lastName: "Ofiara",
        birthDate: "1931-12-08",
        deathDate: "1987-01-26",
        birthPlace: "Ludwików",
        occupation: null,
        family: "ofiara",
        biography: "Córka Józefa Ofiary i Heleny Sobień. Urodziła się 8 grudnia 1931, zmarła 26 stycznia 1987. Poślubiła Józefa Gierczaka 26 listopada 1952 roku.",
        spouseIds: [11],
        childIds: [],
        parentIds: [13, 14],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 13,
        firstName: "Józef",
        lastName: "Ofiara",
        birthDate: "1896",
        deathDate: "1968-06-17",
        birthPlace: "Ludwików",
        occupation: null,
        family: "ofiara",
        biography: "Syn Andrzeja Ofiary i Franciszki Szaruch. Urodził się w 1896 roku w Ludwikowie, zmarł 17 czerwca 1968. Poślubił Helenę Sobień 9 lutego 1926 roku.",
        spouseIds: [14],
        childIds: [12],
        parentIds: [15, 16],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 14,
        firstName: "Helena",
        lastName: "Sobień",
        birthDate: "1905-01-09",
        deathDate: "1978-09-06",
        birthPlace: null,
        occupation: null,
        family: "ofiara",
        biography: "Żona Józefa Ofiary, urodzona 9 stycznia 1905, zmarła 6 września 1978. Pobrali się 9 lutego 1926 roku.",
        spouseIds: [13],
        childIds: [12],
        parentIds: [],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 15,
        firstName: "Andrzej",
        lastName: "Ofiara",
        birthDate: null,
        deathDate: null,
        birthPlace: "Ludwików",
        occupation: null,
        family: "ofiara",
        biography: "Praprzodek rodziny Ofiara. Mieszkał w Ludwikowie, gdzie już w latach 1442–1457 właścicielami miejscowości okolicznych byli Mikołaj i Zbigniew Czajkowie herbu Dębno. W XVI wieku tereny należały do rodu Jedlińskich herbu Nabram, gdzie w 1530 r. napisano prawo lokacji Jedlińska przez króla Zygmunta I Starego.",
        spouseIds: [16],
        childIds: [13],
        parentIds: [],
        documents: [],
        maidenName: null,
        deathPlace: null,
        photoUrl: null
      },
      {
        id: 16,
        firstName: "Franciszka",
        lastName: "Szaruch",
        maidenName: "Saruch",
        birthDate: "1876",
        deathDate: null,
        birthPlace: null,
        occupation: null,
        family: "ofiara",
        biography: "Żona Andrzeja Ofiary, urodzona w 1876 roku.",
        spouseIds: [15],
        childIds: [13],
        parentIds: [],
        documents: [],
        deathPlace: null,
        photoUrl: null
      }
    ];

    const sampleDocuments: Document[] = [
      {
        id: 1,
        personId: 11,
        title: "Akt ślubu Józefa Gierczaka i Marianny Ofiara",
        type: "marriage",
        description: "Dokument ślubu z 26 listopada 1952 roku",
        imageUrl: "https://images.unsplash.com/photo-1618556450994-a6a128ef0d9d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600"
      },
      {
        id: 2,
        personId: 9,
        title: "Akt ślubu Jana Gierczaka i Agnieszki Baćmaga",
        type: "marriage",
        description: "Dokument ślubu z 14 listopada 1917 roku",
        imageUrl: "https://images.unsplash.com/photo-1553729784-e91953dec042?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600"
      },
      {
        id: 3,
        personId: 5,
        title: "Akt ślubu Karola Gierczaka i Tekli Kozyra",
        type: "marriage",
        description: "Dokument ślubu z 23 listopada 1857 roku",
        imageUrl: "https://images.unsplash.com/photo-1618556450994-a6a128ef0d9d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600"
      }
    ];

    authenticPeople.forEach(person => this.people.set(person.id, person));
    sampleDocuments.forEach(doc => this.documents.set(doc.id, doc));
  }

  async getAllPeople(): Promise<Person[]> {
    return Array.from(this.people.values());
  }

  async getPersonById(id: number): Promise<Person | undefined> {
    return this.people.get(id);
  }

  async getPeopleByFamily(family: string): Promise<Person[]> {
    return Array.from(this.people.values()).filter(person => person.family === family);
  }

  async getAllDocuments(): Promise<Document[]> {
    return Array.from(this.documents.values());
  }

  async getDocumentsByPersonId(personId: number): Promise<Document[]> {
    return Array.from(this.documents.values()).filter(doc => doc.personId === personId);
  }
}

export const storage = new MemStorage();