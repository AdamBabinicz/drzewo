import { useState } from "react";
import Lightbox, { type Slide } from "yet-another-react-lightbox";
import Captions from "yet-another-react-lightbox/plugins/captions";
import Fullscreen from "yet-another-react-lightbox/plugins/fullscreen";
import Zoom from "yet-another-react-lightbox/plugins/zoom";

import "yet-another-react-lightbox/styles.css";
import "yet-another-react-lightbox/plugins/captions.css";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogClose,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { X } from "lucide-react";
import { useLanguage } from "@/hooks/useLanguage";
import { Person, Keepsake } from "../../../../shared/schema";

type SlideWithDescription = Slide & {
  description?: string;
};

interface KeepsakesModalProps {
  person: Person;
  isOpen: boolean;
  onClose: () => void;
}

export default function KeepsakesModal({
  person,
  isOpen,
  onClose,
}: KeepsakesModalProps) {
  const { t, language } = useLanguage();
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [lightboxIndex, setLightboxIndex] = useState(0);

  const getDynamicText = (
    field: { pl: string; en: string } | string | null | undefined
  ) => {
    if (!field) return "";
    if (typeof field === "object" && field !== null && "pl" in field) {
      return field[language as keyof typeof field] || field.pl;
    }
    return field;
  };

  const keepsakes = person.keepsakes || [];
  if (keepsakes.length === 0) return null;

  const handleImageClick = (index: number) => {
    setLightboxIndex(index);
    setLightboxOpen(true);
  };

  const lightboxSlides: SlideWithDescription[] = keepsakes.map(
    (k: Keepsake) => ({
      src: k.imageUrl,
      title: getDynamicText(k.title),
      description: getDynamicText(k.description),
    })
  );

  return (
    <>
      {/*
        KROK 1: Ustawiamy Dialog w tryb "niemodalny", aby nie blokował zdarzeń dotykowych Lightboxa (naprawia swipe).
      */}
      <Dialog open={isOpen} onOpenChange={onClose} modal={false}>
        <DialogContent
          // KROK 2: Blokujemy zamknięcie Dialogu po kliknięciu na tło Lightboxa.
          onInteractOutside={(e) => {
            if (lightboxOpen) {
              e.preventDefault();
            }
          }}
          className="w-[95%] max-w-4xl max-h-[90vh] bg-stone-50 dark:bg-background-alt top-4 translate-y-0 md:top-1/2 md:-translate-y-1/2"
        >
          <DialogHeader>
            <DialogTitle className="font-serif text-2xl heritage-text">
              {t("keepsakes.modal.title", {
                name: `${person.firstName} ${person.lastName}`,
              })}
            </DialogTitle>
            <DialogDescription className="sr-only">
              {t("person.hasKeepsakesDesc")}
            </DialogDescription>
          </DialogHeader>

          <ScrollArea className="max-h-[70vh]">
            <div className="grid gap-4 p-1 grid-cols-[repeat(auto-fit,minmax(300px,1fr))]">
              {keepsakes.map((keepsake: Keepsake, index: number) => (
                <div
                  key={index}
                  className="heritage-card p-3 cursor-pointer group"
                  onClick={() => handleImageClick(index)}
                >
                  <div className="overflow-hidden rounded-md mb-3 aspect-square">
                    <img
                      src={keepsake.imageUrl}
                      alt={getDynamicText(keepsake.title)}
                      className="w-full h-full object-contain transition-transform duration-300 group-hover:scale-110"
                      loading="lazy"
                    />
                  </div>
                  <h4 className="font-semibold heritage-text">
                    {getDynamicText(keepsake.title)}
                  </h4>
                  <p className="text-sm text-muted-foreground mt-1">
                    {getDynamicText(keepsake.description)}
                  </p>
                </div>
              ))}
            </div>
          </ScrollArea>
          <DialogClose className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
            <X className="h-4 w-4" />
            <span className="sr-only">{t("keepsakes.close")}</span>
          </DialogClose>
        </DialogContent>
      </Dialog>

      {lightboxOpen && (
        <Lightbox
          className="custom-lightbox"
          plugins={[Captions, Fullscreen, Zoom]}
          open={lightboxOpen}
          close={() => setLightboxOpen(false)}
          slides={lightboxSlides}
          index={lightboxIndex}
          carousel={{ finite: true }}
          controller={{ closeOnBackdropClick: true }}
          captions={{
            descriptionTextAlign: "center",
            descriptionMaxLines: 5,
          }}
        />
      )}
    </>
  );
}


----------------------------

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogClose,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import {
  User,
  Calendar,
  MapPin,
  Briefcase,
  Users,
  X,
  MessageSquareText,
  Clock,
  Book,
  Heart,
  Archive,
  Asterisk,
} from "lucide-react";
import { Person, Anecdote, Event } from "../../../../shared/schema";
import { useLanguage } from "@/hooks/useLanguage";
import DocumentModal from "./DocumentModal";
import KeepsakesModal from "./KeepsakesModal";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface PersonModalProps {
  person: Person | null;
  isOpen: boolean;
  onClose: () => void;
  onPersonClick: (person: Person) => void;
  allPeople: Person[];
}

const formatDate = (dateString: string | null | undefined, locale: string) => {
  if (!dateString || dateString === "?") return "?";

  const translations: { [key: string]: { pl: string; en: string } } = {
    "ok.": { pl: "ok.", en: "c." },
    przed: { pl: "przed", en: "before" },
    po: { pl: "po", en: "after" },
    between: { pl: "między", en: "between" },
  };

  const parts = dateString.split(" ");
  const keyword = parts[0];

  if (Object.prototype.hasOwnProperty.call(translations, keyword)) {
    const translationSet = translations[keyword];
    const translatedKeyword =
      locale === "en" ? translationSet.en : translationSet.pl;

    if (keyword === "between" && parts.length === 4 && parts[2] === "and") {
      const year1 = parts[1];
      const year2 = parts[3];
      return locale === "pl"
        ? `między ${year1} a ${year2}`
        : `between ${year1} and ${year2}`;
    }

    const restOfString = parts.slice(1).join(" ");
    return `${translatedKeyword} ${restOfString}`;
  }

  if (
    /^\d{4}$/.test(dateString) ||
    /^\d{4}s$/.test(dateString) ||
    /^\d{4} \?$/.test(dateString) ||
    /^\d{4}xx$/.test(dateString)
  )
    return dateString;
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return dateString;
    return new Intl.DateTimeFormat(locale, {
      day: "numeric",
      month: "long",
      year: "numeric",
    }).format(date);
  } catch (e) {
    return dateString;
  }
};

const renderTextWithLinks = (text: string) => {
  const parts = text.split(/<link>(.*?)<\/link>/g);
  return (
    <>
      {parts.map((part, index) => {
        if (index % 2 === 1) {
          return (
            <a
              key={index}
              href="https://ognisko.netlify.app/"
              target="_blank"
              rel="noopener noreferrer"
              className="font-semibold text-heritage-burgundy hover:underline"
              onClick={(e) => e.stopPropagation()}
            >
              {part}
            </a>
          );
        }
        return part;
      })}
    </>
  );
};

export default function PersonModal({
  person,
  isOpen,
  onClose,
  onPersonClick,
  allPeople,
}: PersonModalProps) {
  const { t, language } = useLanguage();
  const [documentModalOpen, setDocumentModalOpen] = useState(false);
  const [selectedDocumentId, setSelectedDocumentId] = useState<number | null>(
    null
  );
  const [keepsakesModalOpen, setKeepsakesModalOpen] = useState(false);

  const currentPerson = allPeople.find((p) => p.id === person?.id) || person;

  if (!currentPerson) return null;

  const handleDocumentClick = (docId: number) => {
    setSelectedDocumentId(docId);
    setDocumentModalOpen(true);
  };

  const getDynamicText = (
    field: { pl: string; en: string } | string | null | undefined
  ) => {
    if (!field) return null;
    if (typeof field === "object" && field !== null && "pl" in field) {
      return field[language as keyof typeof field] || field.pl;
    }
    return field;
  };

  const formatTimeWithContext = (timeString: string | null | undefined) => {
    if (!timeString) return timeString;

    if (timeString.toLowerCase().includes("rano")) {
      const timePart = timeString.replace(/rano/gi, "").trim();
      return `${timePart} ${t("time.morning")}`.trim();
    }

    const timeMatch = timeString.match(/^(\d{1,2}):(\d{2})$/);
    if (timeMatch) {
      const hour = parseInt(timeMatch[1], 10);
      if (hour < 12) {
        return `${timeString} ${t("time.morning")}`;
      }
    }

    return timeString;
  };

  const occupationText = getDynamicText(currentPerson.occupation);
  const biographyText = getDynamicText(currentPerson.biography);
  const hasAnecdotes =
    currentPerson.anecdotes && currentPerson.anecdotes.length > 0;
  const hasKeepsakes =
    currentPerson.keepsakes && currentPerson.keepsakes.length > 0;

  const parents = currentPerson.parentIds
    ? allPeople.filter((p) => currentPerson.parentIds!.includes(p.id))
    : [];
  const children = currentPerson.childIds
    ? allPeople.filter((p) => currentPerson.childIds!.includes(p.id))
    : [];

  const familyName =
    currentPerson.family === "gierczak"
      ? t("family.gierczak")
      : t("family.ofiara");
  const familyColor =
    currentPerson.family === "gierczak" ? "heritage-burgundy" : "heritage-teal";

  const birthEvent = currentPerson.events?.find(
    (e: Event) => e.type === "birth"
  );
  const deathEvent = currentPerson.events?.find(
    (e: Event) => e.type === "death"
  );

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <TooltipProvider>
          <DialogContent className="w-[95%] max-w-2xl max-h-[90vh] bg-stone-50 dark:bg-background-alt">
            <DialogHeader>
              <DialogTitle className="font-serif text-2xl heritage-text">
                {currentPerson.firstName} {currentPerson.lastName}
                {currentPerson.maidenName &&
                  ` (${t("person.maidenName")} ${currentPerson.maidenName})`}
              </DialogTitle>
              <DialogDescription className={`${familyColor}`}>
                {familyName}
              </DialogDescription>
            </DialogHeader>

            <ScrollArea className="max-h-[70vh] pr-4">
              <div className="space-y-6">
                <div className="flex flex-col md:flex-row gap-6">
                  <div className="md:w-1/3 flex-shrink-0">
                    <div className="w-48 h-48 bg-stone-200 dark:bg-background rounded-lg mx-auto flex items-center justify-center">
                      {currentPerson.photoUrl ? (
                        <img
                          src={currentPerson.photoUrl}
                          alt={`${currentPerson.firstName} ${currentPerson.lastName}`}
                          className="w-full h-full rounded-lg object-cover"
                          loading="lazy"
                        />
                      ) : (
                        <User className="w-16 h-16 text-muted-foreground" />
                      )}
                    </div>
                  </div>
                  <div className="md:w-2/3 space-y-4">
                    {(currentPerson.birthDate ||
                      currentPerson.birthDateNote ||
                      currentPerson.deathDate ||
                      currentPerson.deathDateNote) && (
                      <div className="flex items-start space-x-3">
                        <Calendar className="w-4 h-4 text-muted-foreground mt-1" />
                        <div>
                          {(currentPerson.birthDate ||
                            currentPerson.birthDateNote) && (
                            <div className="flex items-center gap-2">
                              <p className="heritage-text">
                                <span className="font-semibold">
                                  {t("person.born")}:
                                </span>{" "}
                                {formatDate(
                                  currentPerson.birthDateNote ||
                                    currentPerson.birthDate,
                                  language
                                )}
                              </p>
                              {birthEvent && (
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <Book
                                      className="w-4 h-4 text-blue-500 cursor-pointer"
                                      onClick={() =>
                                        handleDocumentClick(
                                          birthEvent.source.documentId
                                        )
                                      }
                                    />
                                  </TooltipTrigger>
                                  <TooltipContent>
                                    <p>{t("tooltip.viewBirthRecord")}</p>
                                  </TooltipContent>
                                </Tooltip>
                              )}
                            </div>
                          )}
                          {(currentPerson.deathDate ||
                            currentPerson.deathDateNote) && (
                            <div className="flex items-center gap-2">
                              <p className="heritage-text">
                                <span className="font-semibold">
                                  {t("person.died")}:
                                </span>{" "}
                                {formatDate(
                                  currentPerson.deathDateNote ||
                                    currentPerson.deathDate,
                                  language
                                )}
                              </p>
                              {deathEvent && (
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <Book
                                      className="w-4 h-4 text-blue-500 cursor-pointer"
                                      onClick={() =>
                                        handleDocumentClick(
                                          deathEvent.source.documentId
                                        )
                                      }
                                    />
                                  </TooltipTrigger>
                                  <TooltipContent>
                                    <p>{t("tooltip.viewDeathRecord")}</p>
                                  </TooltipContent>
                                </Tooltip>
                              )}
                            </div>
                          )}
                        </div>
                      </div>
                    )}

                    {currentPerson.marriages?.map((marriage, index) => {
                      const spouse = allPeople.find(
                        (p) => p.id === marriage.spouseId
                      );
                      if (!spouse) return null;

                      return (
                        <div key={index} className="flex items-start space-x-3">
                          <Heart className="w-4 h-4 text-muted-foreground mt-1" />
                          <div>
                            <p
                              className="heritage-text cursor-pointer hover:underline"
                              onClick={() => onPersonClick(spouse)}
                            >
                              <span className="font-semibold">
                                {t("person.marriedTo")}:
                              </span>{" "}
                              {spouse.firstName} {spouse.lastName}
                            </p>
                            {marriage.date && (
                              <div className="flex items-center gap-2">
                                <p className="text-sm text-muted-foreground">
                                  {formatDate(marriage.date, language)}
                                </p>
                                {marriage.source && (
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Book
                                        className="w-4 h-4 text-blue-500 cursor-pointer"
                                        onClick={(e) => {
                                          e.stopPropagation();
                                          handleDocumentClick(
                                            marriage.source!.documentId
                                          );
                                        }}
                                      />
                                    </TooltipTrigger>
                                    <TooltipContent>
                                      <p>{t("tooltip.viewMarriageRecord")}</p>
                                    </TooltipContent>
                                  </Tooltip>
                                )}
                                {marriage.note && (
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <Asterisk className="w-4 h-4 text-heritage-gold cursor-help" />
                                    </TooltipTrigger>
                                    <TooltipContent>
                                      <p className="max-w-xs">
                                        {getDynamicText(marriage.note)}
                                      </p>
                                    </TooltipContent>
                                  </Tooltip>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      );
                    })}

                    {hasKeepsakes && (
                      <div className="flex items-start space-x-3">
                        <Archive className="w-4 h-4 text-muted-foreground mt-1" />
                        <div>
                          <p
                            className="heritage-text cursor-pointer hover:underline"
                            onClick={() => setKeepsakesModalOpen(true)}
                          >
                            <span className="font-semibold">
                              {t("person.keepsakes")}
                            </span>
                          </p>
                          <p className="text-sm text-muted-foreground">
                            {t("person.hasKeepsakesDesc")}
                          </p>
                        </div>
                      </div>
                    )}

                    {(currentPerson.birthTime || currentPerson.deathTime) && (
                      <div className="flex items-start space-x-3">
                        <Clock className="w-4 h-4 text-muted-foreground mt-1" />
                        <div>
                          {currentPerson.birthTime && (
                            <p className="heritage-text">
                              <span className="font-semibold">
                                {t("person.birthTime")}:
                              </span>{" "}
                              {formatTimeWithContext(currentPerson.birthTime)}
                            </p>
                          )}
                          {currentPerson.deathTime && (
                            <p className="heritage-text">
                              <span className="font-semibold">
                                {t("person.deathTime")}:
                              </span>{" "}
                              {formatTimeWithContext(currentPerson.deathTime)}
                            </p>
                          )}
                        </div>
                      </div>
                    )}
                    {currentPerson.birthPlace && (
                      <div className="flex items-center space-x-3">
                        <MapPin className="w-4 h-4 text-muted-foreground" />
                        <span className="heritage-text">
                          {t("person.bornIn")}: {currentPerson.birthPlace}
                        </span>
                      </div>
                    )}
                    {occupationText && (
                      <div className="flex items-center space-x-3">
                        <Briefcase className="w-4 h-4 text-muted-foreground" />
                        <span className="heritage-text">{occupationText}</span>
                      </div>
                    )}
                  </div>
                </div>
                {biographyText && (
                  <div>
                    <h4 className="font-semibold heritage-text mb-3 flex items-center">
                      <User className="w-4 h-4 mr-2" />
                      {t("person.biography")}
                    </h4>
                    <p className="text-muted-foreground leading-relaxed whitespace-pre-wrap">
                      {biographyText}
                    </p>
                  </div>
                )}
                {hasAnecdotes && (
                  <div>
                    <h4 className="font-semibold heritage-text mb-3 flex items-center">
                      <MessageSquareText className="w-4 h-4 mr-2" />
                      {t("person.anecdotes")}
                    </h4>
                    <div className="space-y-4">
                      {currentPerson.anecdotes?.map(
                        (anecdote: Anecdote, index: number) => (
                          <blockquote
                            key={index}
                            className="border-l-4 border-heritage-gray dark:border-heritage-gold pl-4 italic text-muted-foreground"
                          >
                            {renderTextWithLinks(
                              getDynamicText(anecdote) || ""
                            )}
                          </blockquote>
                        )
                      )}
                    </div>
                  </div>
                )}
                <div>
                  <h4 className="font-semibold heritage-text mb-3 flex items-center">
                    <Users className="w-4 h-4 mr-2" />
                    {t("person.family")}
                  </h4>
                  <div className="space-y-4">
                    {parents.length > 0 && (
                      <div>
                        <h5 className="font-medium text-sm heritage-text mb-2">
                          {t("person.parents")}:
                        </h5>
                        <div className="flex flex-wrap gap-2">
                          {parents.map((p) => (
                            <Badge
                              key={p.id}
                              variant="secondary"
                              className="cursor-pointer bg-stone-100 dark:bg-card hover:bg-stone-200 dark:hover:bg-border"
                              onClick={() => onPersonClick(p)}
                            >
                              {p.firstName} {p.lastName}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}

                    {children.length > 0 && (
                      <div>
                        <h5 className="font-medium text-sm heritage-text mb-2">
                          {t("person.children")}:
                        </h5>
                        <div className="flex flex-wrap gap-2">
                          {children.map((p) => (
                            <Badge
                              key={p.id}
                              variant="secondary"
                              className="cursor-pointer bg-stone-100 dark:bg-card hover:bg-stone-200 dark:hover:bg-border"
                              onClick={() => onPersonClick(p)}
                            >
                              {p.firstName} {p.lastName}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </ScrollArea>
            <DialogClose className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
              <X className="h-4 w-4" />
              <span className="sr-only">Close</span>
            </DialogClose>
          </DialogContent>
        </TooltipProvider>
      </Dialog>
      <DocumentModal
        isOpen={documentModalOpen}
        onClose={() => setDocumentModalOpen(false)}
        documentId={selectedDocumentId}
      />
      {hasKeepsakes && (
        <KeepsakesModal
          isOpen={keepsakesModalOpen}
          onClose={() => setKeepsakesModalOpen(false)}
          person={currentPerson}
        />
      )}
    </>
  );
}

---------------------------------
// src/components/FamilyBranchView.tsx
import { useRoute } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import PersonModal from "@/components/ui/PersonModal";
import { Person } from "@shared/schema";
import { MapPin, Users, Eye, BookText, ChevronDown, Award } from "lucide-react";
import { useMemo, useState } from "react";
import SEO from "@/components/SEO";
import genealogyData from "@/data/index";
// import genealogyData from "@/data/genealogy.json";
import { Link } from "wouter";
import { useLanguage } from "@/hooks/useLanguage";
import { getFamilyStructure } from "@/lib/genealogyUtils";
import FamilyUnitCard from "@/components/ui/FamilyUnitCard";

export default function FamilyBranchView() {
  const { t, p, language } = useLanguage();
  const [, params] = useRoute(`${p("familyBase")}/:family`);
  const family = params?.family as "gierczak" | "ofiara";

  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [etymologyOpen, setEtymologyOpen] = useState(false);

  const { data: allPeople = [] } = useQuery({
    queryKey: ["/api/people"],
    queryFn: () => Promise.resolve(genealogyData.people as Person[]),
  });

  const { progenitorUnit, descendantUnits } = useMemo(() => {
    if (family && allPeople.length > 0) {
      return getFamilyStructure(family, allPeople);
    }
    return { progenitorUnit: null, descendantUnits: [] };
  }, [family, allPeople]);

  const familyInfo = {
    gierczak: {
      name: t("family.gierczak"),
      description: t("home.branches.gierczak.desc"),
      color: "heritage-burgundy",
      borderColor: "border-heritage-burgundy",
      btnColor: "btn-heritage-burgundy",
      imageUrl: "/images/jaszowice.avif",
      placeIds: ["jaszowice", "gulinek_gierczak"],
    },
    ofiara: {
      name: t("family.ofiara"),
      description: t("home.branches.ofiara.desc"),
      color: "heritage-teal",
      borderColor: "border-heritage-teal",
      btnColor: "btn-heritage-teal",
      imageUrl: "/images/ludwikow.avif",
      // ZMIANA TUTAJ: Zmieniona kolejność wyświetlania miejsc
      placeIds: ["wola_gutowska", "ludwikow", "gulinek_ofiara"],
    },
  };

  const currentFamily = family ? familyInfo[family] : null;

  if (!family || !currentFamily) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold heritage-text mb-4">
            {t("familyBranch.notFound.title")}
          </h2>
          <p className="text-muted-foreground">
            {t("familyBranch.notFound.desc")}
          </p>
        </div>
      </div>
    );
  }

  const totalPeopleInBranch = useMemo(() => {
    if (!progenitorUnit) return 0;
    const allIds = new Set<number>();
    [progenitorUnit, ...descendantUnits].forEach((unit) => {
      unit.parents.forEach((p) => allIds.add(p.id));
      unit.children.forEach((c) => allIds.add(c.id));
    });
    return allIds.size;
  }, [progenitorUnit, descendantUnits]);

  const handlePersonClick = (person: Person) => {
    setSelectedPerson(person);
    setModalOpen(true);
  };

  const getDynamicText = (
    field: { pl: string; en: string } | string | null | undefined
  ) => {
    if (!field) return null;
    if (typeof field === "object" && field !== null && "pl" in field) {
      return field[language as keyof typeof field] || field.pl;
    }
    return field;
  };

  const familyPlaces =
    genealogyData.places
      ?.filter((place) => currentFamily.placeIds.includes(place.id))
      // ZMIANA TUTAJ: Sortowanie miejsc zgodnie z nową kolejnością
      .sort(
        (a, b) =>
          currentFamily.placeIds.indexOf(a.id) -
          currentFamily.placeIds.indexOf(b.id)
      ) || [];

  const GierczakEtymology = () => (
    <div className="prose prose-sm dark:prose-invert max-w-none">
      <h4>{t("familyBranch.etymology.gierczak.h1")}</h4>
      <p>{t("familyBranch.etymology.gierczak.p1")}</p>
      <p>{t("familyBranch.etymology.gierczak.p2")}</p>
      <ul>
        <li>{t("familyBranch.etymology.gierczak.l1")}</li>
        <li>{t("familyBranch.etymology.gierczak.l2")}</li>
      </ul>
      <h4>{t("familyBranch.etymology.gierczak.h2")}</h4>
      <p>{t("familyBranch.etymology.gierczak.p3")}</p>
      <h5>{t("familyBranch.etymology.gierczak.h3")}</h5>
      <p>{t("familyBranch.etymology.gierczak.p4")}</p>
      <p>{t("familyBranch.etymology.gierczak.p5")}</p>
      <h5>{t("familyBranch.etymology.gierczak.h4")}</h5>
      <p>{t("familyBranch.etymology.gierczak.p6")}</p>
      <h5>{t("familyBranch.etymology.gierczak.h5")}</h5>
      <p>{t("familyBranch.etymology.gierczak.p7")}</p>
      <h4>{t("familyBranch.etymology.gierczak.h6")}</h4>
      <p>{t("familyBranch.etymology.gierczak.p8")}</p>
      <h4>{t("familyBranch.etymology.gierczak.h7")}</h4>
      <p>{t("familyBranch.etymology.gierczak.p9")}</p>
    </div>
  );

  const OfiaraEtymology = () => (
    <div className="prose prose-sm dark:prose-invert max-w-none">
      <h4>{t("familyBranch.etymology.ofiara.h1")}</h4>
      <p>{t("familyBranch.etymology.ofiara.p1")}</p>
      <h4>{t("familyBranch.etymology.ofiara.h2")}</h4>
      <p>{t("familyBranch.etymology.ofiara.p2")}</p>
      <h5>{t("familyBranch.etymology.ofiara.h3")}</h5>
      <p>{t("familyBranch.etymology.ofiara.p3")}</p>
      <h5>{t("familyBranch.etymology.ofiara.h4")}</h5>
      <p>{t("familyBranch.etymology.ofiara.p4")}</p>
      <h4>{t("familyBranch.etymology.ofiara.h5")}</h4>
      <p>{t("familyBranch.etymology.ofiara.p5")}</p>
      <h5>{t("familyBranch.etymology.ofiara.h6")}</h5>
      <p>{t("familyBranch.etymology.ofiara.p6")}</p>
      <h4>{t("familyBranch.etymology.ofiara.h7")}</h4>
      <p>{t("familyBranch.etymology.ofiara.p7")}</p>
    </div>
  );

  return (
    <>
      <SEO
        title={currentFamily.name}
        description={`${
          currentFamily.description
        } Poznaj historię i członków ${currentFamily.name.toLowerCase()}.`}
      />

      <div className="bg-background">
        <div className="relative h-80 md:h-96">
          <img
            src={currentFamily.imageUrl}
            alt={`Miejsca związane z ${currentFamily.name}`}
            className="w-full h-full object-cover"
            loading="lazy"
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/30 to-transparent"></div>
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="text-center text-white p-4">
              <h2 className="font-serif text-4xl md:text-6xl font-bold mb-4">
                {currentFamily.name}
              </h2>
              <p className="text-xl md:text-2xl opacity-90">
                {familyPlaces.map((p) => p.name).join(", ")}
              </p>
            </div>
          </div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="mb-12">
            <Card className="bg-stone-50 dark:bg-background-alt">
              <CardContent className="p-8">
                <div className="grid md:grid-cols-2 gap-8 items-center">
                  <div>
                    <h2 className="font-serif text-2xl font-semibold heritage-text mb-4">
                      {t("familyBranch.history.title")}
                    </h2>
                    <p className="text-muted-foreground leading-relaxed mb-4">
                      {currentFamily.description}
                    </p>
                    <div className="mb-6">
                      <Button
                        variant="ghost"
                        onClick={() => setEtymologyOpen(!etymologyOpen)}
                        className="text-sm text-muted-foreground dark:hover:text-popover p-1 h-auto"
                      >
                        <BookText className="w-4 h-4 mr-2" />
                        {t("familyBranch.etymology.title")}
                        <ChevronDown
                          className={`w-4 h-4 ml-1 transition-transform ${
                            etymologyOpen ? "rotate-180" : ""
                          }`}
                        />
                      </Button>
                      {etymologyOpen && (
                        <div className="mt-4 p-4 rounded-md border bg-background/50">
                          {family === "gierczak" && <GierczakEtymology />}
                          {family === "ofiara" && <OfiaraEtymology />}
                        </div>
                      )}
                    </div>
                    <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                      <div className="flex items-center">
                        <MapPin className="w-4 h-4 mr-1" />
                        {t("familyBranch.history.places")}:
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {familyPlaces.map((place) => (
                          <span
                            key={place.id}
                            className="bg-muted dark:bg-card text-muted-foreground dark:text-foreground px-2 py-1 rounded"
                          >
                            {place.name}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                  <div className="text-center">
                    <div
                      className={`inline-flex items-center justify-center w-24 h-24 rounded-full bg-stone-100 dark:bg-card mb-4`}
                    >
                      <Users className={`w-12 h-12 ${currentFamily.color}`} />
                    </div>
                    <p className="text-3xl font-bold heritage-text">
                      {totalPeopleInBranch}
                    </p>
                    <p className="text-muted-foreground">
                      {t("familyBranch.history.membersInDb")}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="bg-white dark:bg-gradient-dark-brown rounded-lg p-4 sm:p-8">
            <div className="flex flex-wrap items-center justify-between gap-4 mb-6">
              <h2 className="font-serif text-3xl font-semibold heritage-text">
                {t("familyBranch.members.title")}
              </h2>
              <Button
                asChild
                className={`${currentFamily.btnColor} transition-all duration-300 hover:scale-105 hover:shadow-md`}
              >
                <Link href={p("tree")}>
                  <Eye className="w-4 h-4 mr-2" />
                  {t("familyBranch.members.viewInTree")}
                </Link>
              </Button>
            </div>

            {progenitorUnit ? (
              <div>
                <div className="mb-12">
                  <div className="flex items-center mb-4">
                    <Award className="w-6 h-6 mr-3 text-amber-500" />
                    <h2 className="font-serif text-2xl font-semibold heritage-text">
                      {t("familyBranch.progenitorTitle")}
                    </h2>
                  </div>
                  <div
                    className={`p-4 rounded-lg bg-stone-50 dark:bg-background-alt border-t-4 ${currentFamily.borderColor}`}
                  >
                    <FamilyUnitCard
                      unit={progenitorUnit}
                      onPersonClick={handlePersonClick}
                      familyColor={currentFamily.borderColor}
                    />
                  </div>
                </div>

                {descendantUnits.length > 0 && (
                  <div>
                    <h2 className="font-serif text-2xl font-semibold heritage-text mb-4">
                      {t("familyBranch.descendantsTitle")}
                    </h2>
                    {descendantUnits.map((unit, index) => (
                      <FamilyUnitCard
                        key={index}
                        unit={unit}
                        onPersonClick={handlePersonClick}
                        familyColor={currentFamily.borderColor}
                      />
                    ))}
                  </div>
                )}
              </div>
            ) : (
              <Card className="heritage-card">
                <CardContent className="p-8 text-center">
                  <Users className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-semibold heritage-text mb-2">
                    {t("familyBranch.members.noData.title")}
                  </h3>
                  <p className="text-muted-foreground">
                    {t("familyBranch.members.noData.desc")}
                  </p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>

        <PersonModal
          person={selectedPerson}
          isOpen={modalOpen}
          onClose={() => setModalOpen(false)}
          onPersonClick={handlePersonClick}
          allPeople={allPeople}
        />
      </div>
    </>
  );
}


--------------------------------
import { useState } from "react";
import InteractiveTree from "@/components/tree/InteractiveTree";
import PersonModal from "@/components/ui/PersonModal";
import { Person } from "@shared/schema";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle, Check, Settings } from "lucide-react";
import SEO from "@/components/SEO";
import { useLanguage } from "@/hooks/useLanguage";
import genealogyData from "@/data/index";
// import genealogyData from "@/data/genealogy.json";

const ControlCheckbox = ({
  label,
  checked,
  onToggle,
  colorClass = "",
}: {
  label: string;
  checked: boolean;
  onToggle: () => void;
  colorClass?: string;
}) => (
  <button
    onClick={onToggle}
    className="flex items-center cursor-pointer text-sm gap-2 text-foreground"
  >
    <div className="w-4 h-4 border rounded flex items-center justify-center bg-background">
      {checked && <Check className={`w-3 h-3 ${colorClass}`} />}
    </div>
    {label}
  </button>
);

export default function InteractiveTreeView() {
  const { t } = useLanguage();
  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);
  const [modalOpen, setModalOpen] = useState(false);

  // Stany do zarządzania widocznością wszystkich elementów
  const [showGierczak, setShowGierczak] = useState(true);
  const [showOfiara, setShowOfiara] = useState(true);
  const [showDescendants, setShowDescendants] = useState(true);
  const [showMarriages, setShowMarriages] = useState(true);

  const allPeople = genealogyData.people as Person[];
  const isLoading = false;
  const error = null;

  const handlePersonClick = (person: Person) => {
    setSelectedPerson(person);
    setModalOpen(true);
  };

  const handleModalClose = () => {
    setModalOpen(false);
    setSelectedPerson(null);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center space-y-4">
          <Skeleton className="h-8 w-64 mx-auto" />
          <Skeleton className="h-4 w-48 mx-auto" />
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <Alert className="max-w-md">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            Nie udało się załadować danych genealogicznych. Spróbuj ponownie
            później.
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <>
      <SEO title={t("tree.title")} description={t("tree.subtitle")} />

      <div className="min-h-screen dark:bg-background flex flex-col">
        <div className="bg-white dark:bg-background-alt shadow-sm border-b heritage-border">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 text-center">
            <h2 className="font-serif text-3xl md:text-4xl font-semibold heritage-gradient-text mb-4">
              {t("tree.title")}
            </h2>
            <p className="text-lg text-muted-foreground max-w-3xl mx-auto">
              {t("tree.subtitle")}
            </p>
          </div>
        </div>

        <div className="flex-grow h-[calc(100vh-164px)] relative">
          <InteractiveTree
            allPeople={allPeople}
            onPersonClick={handlePersonClick}
            showGierczak={showGierczak}
            showOfiara={showOfiara}
            showDescendants={showDescendants}
            showMarriages={showMarriages}
          />

          <div className="absolute bottom-4 left-4 bg-card/95 backdrop-blur-sm rounded-lg p-3 shadow-lg heritage-border flex items-center flex-wrap gap-x-6 gap-y-2">
            <div className="flex items-center text-sm font-semibold heritage-text mr-2">
              <Settings className="w-4 h-4 mr-2" />
              {t("tree.viewFilters")}
            </div>
            <ControlCheckbox
              label={t("family.gierczak")}
              checked={showGierczak}
              onToggle={() => setShowGierczak(!showGierczak)}
              colorClass="heritage-burgundy"
            />
            <ControlCheckbox
              label={t("family.ofiara")}
              checked={showOfiara}
              onToggle={() => setShowOfiara(!showOfiara)}
              colorClass="heritage-teal"
            />
            <ControlCheckbox
              label={t("tree.legend.descendants")}
              checked={showDescendants}
              onToggle={() => setShowDescendants(!showDescendants)}
              colorClass="heritage-burgundy"
            />
            <ControlCheckbox
              label={t("tree.legend.marriages")}
              checked={showMarriages}
              onToggle={() => setShowMarriages(!showMarriages)}
              colorClass="heritage-teal"
            />
          </div>
        </div>

        <PersonModal
          person={selectedPerson}
          isOpen={modalOpen}
          onClose={handleModalClose}
          onPersonClick={handlePersonClick}
          allPeople={allPeople}
        />
      </div>
    </>
  );
}


-----------------------------------

import { useState, useMemo } from "react";
import { useQuery } from "@tanstack/react-query";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import PersonCard from "@/components/ui/PersonCard";
import PersonModal from "@/components/ui/PersonModal";
import { Person } from "@shared/schema";
import { Search } from "lucide-react";
import SEO from "@/components/SEO";
import genealogyData from "@/data/index";
// import genealogyData from "@/data/genealogy.json";
import { useLanguage } from "@/hooks/useLanguage";

export default function PersonIndex() {
  const { t } = useLanguage();
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedLetter, setSelectedLetter] = useState<string | null>(null);
  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);
  const [modalOpen, setModalOpen] = useState(false);

  const { data: people = [] } = useQuery({
    queryKey: ["/api/people"],
    queryFn: () => Promise.resolve(genealogyData.people as Person[]),
  });

  const availableLetters = useMemo(() => {
    const letters = new Set(
      people.map((person) => person.lastName.charAt(0).toUpperCase())
    );
    return Array.from(letters).sort();
  }, [people]);

  const filteredPeople = useMemo(() => {
    let filtered = people;
    if (searchTerm) {
      filtered = filtered.filter(
        (person) =>
          `${person.firstName} ${person.lastName}`
            .toLowerCase()
            .includes(searchTerm.toLowerCase()) ||
          (person.maidenName &&
            person.maidenName
              .toLowerCase()
              .includes(searchTerm.toLowerCase())) ||
          (person.birthPlace &&
            person.birthPlace.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }
    if (selectedLetter) {
      filtered = filtered.filter(
        (person) => person.lastName.charAt(0).toUpperCase() === selectedLetter
      );
    }
    return filtered.sort((a, b) => {
      const nameA = `${a.lastName} ${a.firstName}`.toLowerCase();
      const nameB = `${b.lastName} ${b.firstName}`.toLowerCase();
      return nameA.localeCompare(nameB);
    });
  }, [people, searchTerm, selectedLetter]);

  const handlePersonClick = (person: Person) => {
    setSelectedPerson(person);
    setModalOpen(true);
  };

  const handleLetterClick = (letter: string) => {
    setSelectedLetter(selectedLetter === letter ? null : letter);
  };

  return (
    <>
      <SEO title={t("index.title")} description={t("index.subtitle")} />
      <div className="min-h-screen bg-stone-50 dark:bg-card">
        <div className="bg-white dark:bg-background shadow-sm border-b heritage-border">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="text-center">
              <h2 className="font-serif text-3xl md:text-4xl font-semibold heritage-text mb-4">
                {t("index.title")}
              </h2>
              <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
                {t("index.subtitle")}
              </p>
            </div>
          </div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="max-w-md mx-auto mb-8">
            <div className="relative">
              <Input
                type="text"
                placeholder={t("index.searchPlaceholder")}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 h-12"
              />
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-muted-foreground" />
            </div>
          </div>

          <div className="flex flex-wrap justify-center gap-2 mb-8">
            {availableLetters.map((letter) => (
              <Button
                key={letter}
                variant={selectedLetter === letter ? "default" : "outline"}
                size="sm"
                className={`w-10 h-10 ${
                  selectedLetter === letter
                    ? "btn-heritage-burgundy"
                    : "heritage-border heritage-text hover:text-slate-400 dark:text-white dark:hover:text-slate-400 hover:bg-heritage-cream dark:bg-background-alt transition-all"
                }`}
                onClick={() => handleLetterClick(letter)}
              >
                {letter}
              </Button>
            ))}
            {selectedLetter && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSelectedLetter(null)}
                className="text-muted-foreground hover:text-foreground"
              >
                {t("index.clear")}
              </Button>
            )}
          </div>

          {/* --- NOWY WRAPPER DLA SEKCJI WYNIKÓW --- */}
          <div className="bg-white dark:bg-background-alt rounded-lg p-4 sm:p-8 mt-8">
            <div className="text-center mb-6">
              <p className="text-muted-foreground">
                {t("index.resultsFound", { count: filteredPeople.length })}
                {selectedLetter &&
                  t("index.resultsForLetter", { letter: selectedLetter })}
                {searchTerm &&
                  t("index.resultsForSearch", { term: searchTerm })}
              </p>
            </div>

            {filteredPeople.length > 0 ? (
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {filteredPeople.map((person) => (
                  <PersonCard
                    key={person.id}
                    person={person}
                    onClick={() => handlePersonClick(person)}
                  />
                ))}
              </div>
            ) : (
              <div className="text-center py-12">
                <div className="w-24 h-24 bg-background rounded-full flex items-center justify-center mx-auto mb-4 border heritage-border">
                  <Search className="w-8 h-8 text-muted-foreground" />
                </div>
                <h3 className="text-lg font-semibold heritage-text mb-2">
                  {t("index.noResults.title")}
                </h3>
                <p className="text-muted-foreground mb-4">
                  {t("index.noResults.desc")}
                </p>
                {(searchTerm || selectedLetter) && (
                  <Button
                    variant="outline"
                    onClick={() => {
                      setSearchTerm("");
                      setSelectedLetter(null);
                    }}
                    className="heritage-border heritage-text hover:bg-heritage-cream dark:hover:bg-background"
                  >
                    {t("index.noResults.cta")}
                  </Button>
                )}
              </div>
            )}
          </div>

          {filteredPeople.length > 50 && (
            <div className="text-center mt-8">
              <Button className="btn-heritage-burgundy">
                {t("index.showMore")}
              </Button>
            </div>
          )}
        </div>
      </div>

      <PersonModal
        person={selectedPerson}
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        onPersonClick={handlePersonClick}
        allPeople={people}
      />
    </>
  );
}
