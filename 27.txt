"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item?.dataKey || item?.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

--------------------------------

import { useState } from "react";
import Lightbox, { type Slide } from "yet-another-react-lightbox";
// Usuwamy import wtyczki Captions, bo jej nie użyjemy
import "yet-another-react-lightbox/styles.css";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogClose,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { X } from "lucide-react";
import { useLanguage } from "@/hooks/useLanguage";
import { Person, Keepsake } from "../../../../shared/schema";

// Rozszerzamy typ Slide o nasze niestandardowe dane
type CustomSlide = Slide & {
  customTitle?: string;
  customDescription?: string;
};

interface KeepsakesModalProps {
  person: Person;
  isOpen: boolean;
  onClose: () => void;
}

export default function KeepsakesModal({
  person,
  isOpen,
  onClose,
}: KeepsakesModalProps) {
  const { t, language } = useLanguage();
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [lightboxIndex, setLightboxIndex] = useState(0);

  const getDynamicText = (
    field: { pl: string; en: string } | string | null | undefined
  ) => {
    if (!field) return null;
    if (typeof field === "object" && field !== null && "pl" in field) {
      return field[language as keyof typeof field] || field.pl;
    }
    return field;
  };

  const keepsakes = person.keepsakes || [];
  if (keepsakes.length === 0) return null;

  const handleImageClick = (index: number) => {
    setLightboxIndex(index);
    setLightboxOpen(true);
  };

  const lightboxSlides: CustomSlide[] = keepsakes.map((k: Keepsake) => ({
    src: k.imageUrl,
    customTitle: getDynamicText(k.title) || undefined,
    customDescription: getDynamicText(k.description) || undefined,
  }));

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="w-[95%] max-w-4xl max-h-[90vh] bg-stone-50 dark:bg-background-alt">
          <DialogHeader>
            <DialogTitle className="font-serif text-2xl heritage-text">
              {t("keepsakes.modal.title", {
                name: `${person.firstName} ${person.lastName}`,
              })}
            </DialogTitle>
            <DialogDescription className="sr-only">
              {t("person.hasKeepsakesDesc")}
            </DialogDescription>
          </DialogHeader>

          <ScrollArea className="max-h-[70vh] pr-4">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-1">
              {keepsakes.map((keepsake: Keepsake, index: number) => (
                <div
                  key={index}
                  className="heritage-card p-3 cursor-pointer group"
                  onClick={() => handleImageClick(index)}
                >
                  <div className="overflow-hidden rounded-md mb-3 aspect-square">
                    <img
                      src={keepsake.imageUrl}
                      alt={getDynamicText(keepsake.title) || ""}
                      className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                      loading="lazy"
                    />
                  </div>
                  <h4 className="font-semibold heritage-text">
                    {getDynamicText(keepsake.title)}
                  </h4>
                  <p className="text-sm text-muted-foreground mt-1">
                    {getDynamicText(keepsake.description)}
                  </p>
                </div>
              ))}
            </div>
          </ScrollArea>
          <DialogClose className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
            <X className="h-4 w-4" />
            <span className="sr-only">{t("keepsakes.close")}</span>
          </DialogClose>
        </DialogContent>
      </Dialog>

      <Lightbox
        open={lightboxOpen}
        close={() => setLightboxOpen(false)}
        slides={lightboxSlides}
        index={lightboxIndex}
        // Używamy `render.slide` do pełnej kontroli
        render={{
          slide: ({ slide, rect }) => {
            const customSlide = slide as CustomSlide;
            return (
              <div className="relative w-full h-full">
                {/* Kontener na obrazek */}
                <div className="w-full h-full flex items-center justify-center">
                  <img
                    alt={customSlide.customTitle || ""}
                    src={customSlide.src}
                    className="max-h-[85vh] max-w-[90vw] object-contain"
                  />
                </div>

                {/* Kontener na podpis, w pełni kontrolowany przez Tailwind */}
                {(customSlide.customTitle || customSlide.customDescription) && (
                  <div className="absolute bottom-0 left-0 w-full p-8 text-center text-white bg-gradient-to-t from-black/80 to-transparent pointer-events-none">
                    <div className="max-w-[50vw] mx-auto">
                      {customSlide.customTitle && (
                        <h3 className="font-serif text-2xl font-semibold leading-tight">
                          {customSlide.customTitle}
                        </h3>
                      )}
                      {customSlide.customDescription && (
                        <p className="mt-2 text-base opacity-90">
                          {customSlide.customDescription}
                        </p>
                      )}
                    </div>
                  </div>
                )}
              </div>
            );
          },
        }}
      />
    </>
  );
}

--------------------------------

@import url("https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Lato:wght@300;400;500;600&display=swap");
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: hsl(45, 20%, 98%);
  --foreground: hsl(30, 8%, 15%);
  --muted: hsl(45, 15%, 94%);
  --muted-foreground: hsl(30, 5%, 45%);
  --popover: hsl(45, 20%, 98%);
  --popover-foreground: hsl(30, 8%, 15%);
  --card: hsl(0, 0%, 100%);
  --card-foreground: hsl(30, 8%, 15%);
  --border: hsl(45, 12%, 88%);
  --input: hsl(45, 12%, 92%);
  --primary: hsl(355, 65%, 42%);
  --primary-foreground: hsl(0, 0%, 98%);
  --secondary: hsl(45, 15%, 94%);
  --secondary-foreground: hsl(30, 8%, 15%);
  --accent: hsl(174, 70%, 25%);
  --accent-foreground: hsl(0, 0%, 98%);
  --destructive: hsl(0, 84.2%, 60.2%);
  --destructive-foreground: hsl(60, 9.1%, 97.8%);
  --ring: hsl(30, 8%, 15%);
  --radius: 0.75rem;
  --heritage-burgundy: hsl(355, 65%, 42%);
  --heritage-teal: hsl(174, 70%, 25%);
  --heritage-brown: hsl(30, 8%, 15%);
  --heritage-gray: hsl(45, 12%, 88%);
  --heritage-gray-dark: hsl(45, 15%, 82%);
  --parchment: hsl(45, 20%, 98%);
  --parchment-dark: hsl(45, 18%, 95%);
  --heritage-gold: hsl(42, 78%, 60%);
  --heritage-cream: hsl(45, 25%, 96%);
}

.dark {
  --background: hsl(28, 25%, 12%);
  --background-alt: hsl(28, 20%, 18%);
  --card: hsl(28, 25%, 16%);
  --popover: hsl(28, 25%, 14%);
  --foreground: hsl(35, 30%, 94%);
  --card-foreground: hsl(35, 30%, 94%);
  --popover-foreground: hsl(35, 30%, 94%);
  --muted-foreground: hsl(35, 20%, 65%);
  --border: hsl(28, 15%, 28%);
  --input: hsl(28, 15%, 25%);
  --muted: hsl(28, 15%, 22%);
  --secondary: hsl(28, 15%, 22%);
  --secondary-foreground: hsl(35, 30%, 94%);
  --primary: hsl(42, 78%, 60%);
  --primary-foreground: hsl(25, 35%, 15%);
  --accent: hsl(38, 90%, 65%);
  --accent-foreground: hsl(25, 35%, 15%);
  --ring: hsl(42, 78%, 65%);
  --heritage-burgundy: hsl(42, 78%, 60%);
  --heritage-teal: hsl(40, 85%, 65%);
  --heritage-brown: hsl(35, 30%, 94%);
  --heritage-gray: hsl(28, 15%, 28%);
  --heritage-gray-dark: hsl(28, 15%, 32%);
  --parchment: var(--background);
  --parchment-dark: var(--card);
  --heritage-gold: hsl(42, 95%, 70%);
  --heritage-cream: var(--card);
  --destructive: hsl(0, 70%, 50%);
  --destructive-foreground: hsl(0, 0%, 100%);
}

@layer base {
  * {
    @apply border-border;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  html {
    overflow-x: hidden;
    scroll-behavior: smooth;
  }
  body {
    @apply bg-background text-foreground font-sans antialiased;
    font-family: "Lato", sans-serif;
    width: 100%;
    overflow-x: hidden;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "Playfair Display", serif;
  }
}

@layer components {
  .heritage-bg {
    background: var(--parchment);
    position: relative;
  }
  .dark .heritage-bg {
    background: var(--background);
  }
  .heritage-bg::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: radial-gradient(
        circle at 25% 25%,
        hsla(42, 78%, 60%, 0.05) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 75% 75%,
        hsla(45, 80%, 55%, 0.03) 0%,
        transparent 50%
      );
    pointer-events: none;
    opacity: 0.5;
  }

  .bg-background-alt {
    background-color: var(--background-alt);
  }
  .bg-gradient-s-brown {
    background-image: linear-gradient(
      160deg,
      var(--background-alt) 0%,
      var(--background) 100%
    );
  }
  .bg-gradient-dark-brown {
    background-image: linear-gradient(
      180deg,
      hsl(28, 25%, 15%) 0%,
      hsl(28, 25%, 12%) 100%
    );
  }

  .heritage-text {
    color: var(--heritage-brown);
  }
  .heritage-burgundy {
    color: var(--heritage-burgundy);
  }
  .heritage-teal {
    color: var(--heritage-teal);
  }
  .heritage-gold {
    color: var(--heritage-gold);
  }

  .btn-heritage-burgundy {
    background: var(--heritage-burgundy);
    color: var(--primary-foreground);
    border: 1px solid hsla(42, 78%, 50%, 0.5);
    @apply hover:shadow-lg hover:scale-105 transition-all duration-200;
  }
  .dark .btn-heritage-burgundy {
    box-shadow: 0 4px 20px hsla(42, 78%, 60%, 0.15);
  }

  .btn-heritage-teal {
    background: var(--heritage-teal);
    color: var(--accent-foreground);
    border: 1px solid hsla(40, 85%, 55%, 0.5);
    @apply hover:shadow-lg hover:scale-105 transition-all duration-200;
  }
  .dark .btn-heritage-teal {
    box-shadow: 0 4px 20px hsla(40, 85%, 65%, 0.15);
  }
  .heritage-border {
    border-color: var(--heritage-gray);
  }

  .heritage-card {
    background: var(--card);
    border: 1px solid var(--heritage-gray);
    border-radius: var(--radius);
    box-shadow: 0 4px 12px hsla(30, 8%, 15%, 0.05);
    @apply transition-all duration-200 hover:shadow-lg hover:border-opacity-60;
  }

  .person-node {
    @apply cursor-pointer transition-all duration-300 hover:shadow-xl hover:scale-105;
    background: var(--card);
    border: 2px solid var(--heritage-gray);
    border-radius: 12px;
    box-shadow: 0 4px 20px hsla(25, 20%, 12%, 0.2);
  }
  .person-node:hover {
    box-shadow: 0 8px 32px hsla(25, 20%, 12%, 0.3);
  }

  .family-gierczak {
    border-color: var(--heritage-burgundy);
  }
  .family-ofiara {
    border-color: var(--heritage-teal);
  }

  /* Poprawiony selektor - text-align dotyczy tylko tego elementu */
  .elegant-separator {
    position: relative;
    text-align: center;
    margin: 2rem 0;
  }

  .elegant-separator::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      var(--heritage-gray),
      transparent
    );
  }
  .elegant-separator span {
    background: var(--background);
    padding: 0 1rem;
    color: var(--heritage-brown);
    font-weight: 500;
  }

  .heritage-gradient-text {
    background: linear-gradient(
      135deg,
      var(--heritage-burgundy) 0%,
      var(--heritage-teal) 100%
    );
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: 600;
  }

  .scroll-to-top-btn {
    background-color: var(--heritage-brown);
    color: var(--parchment);
    border: 1px solid var(--heritage-gray);
    @apply opacity-80 hover:opacity-100 transition-all duration-300 ease-in-out hover:scale-110 hover:shadow-2xl;
  }

  .dark .scroll-to-top-btn {
    background-color: var(--primary);
    color: var(--primary-foreground);
    border: 1px solid hsl(42, 78%, 70%);
  }

  /* Ten blok pozostaje, jest poprawny i dotyczy tylko Lightboxa */
  .custom-lightbox {
    --yarl__caption_max_width: 50vw;
    --yarl__caption_background_color: rgba(0, 0, 0, 0.6);
    --yarl__caption_padding: 1rem 1rem 2rem;
  }

  .custom-lightbox .yarl__caption_title {
    font-family: "Playfair Display", serif;
    font-size: 1.25rem;
    font-weight: 600;
    line-height: 1.4;
    text-align: center;
  }

  .custom-lightbox .yarl__caption_description {
    font-family: "Lato", sans-serif;
    line-height: 1.6;
    margin-top: 0.5rem;
    text-align: center;
  }
}


------------------------------

@import url("https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Lato:wght@300;400;500;600&display=swap");
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: hsl(45, 20%, 98%);
  --foreground: hsl(30, 8%, 15%);
  --muted: hsl(45, 15%, 94%);
  --muted-foreground: hsl(30, 5%, 45%);
  --popover: hsl(45, 20%, 98%);
  --popover-foreground: hsl(30, 8%, 15%);
  --card: hsl(0, 0%, 100%);
  --card-foreground: hsl(30, 8%, 15%);
  --border: hsl(45, 12%, 88%);
  --input: hsl(45, 12%, 92%);
  --primary: hsl(355, 65%, 42%);
  --primary-foreground: hsl(0, 0%, 98%);
  --secondary: hsl(45, 15%, 94%);
  --secondary-foreground: hsl(30, 8%, 15%);
  --accent: hsl(174, 70%, 25%);
  --accent-foreground: hsl(0, 0%, 98%);
  --destructive: hsl(0, 84.2%, 60.2%);
  --destructive-foreground: hsl(60, 9.1%, 97.8%);
  --ring: hsl(30, 8%, 15%);
  --radius: 0.75rem;
  --heritage-burgundy: hsl(355, 65%, 42%);
  --heritage-teal: hsl(174, 70%, 25%);
  --heritage-brown: hsl(30, 8%, 15%);
  --heritage-gray: hsl(45, 12%, 88%);
  --heritage-gray-dark: hsl(45, 15%, 82%);
  --parchment: hsl(45, 20%, 98%);
  --parchment-dark: hsl(45, 18%, 95%);
  --heritage-gold: hsl(42, 78%, 60%);
  --heritage-cream: hsl(45, 25%, 96%);
}

.dark {
  --background: hsl(28, 25%, 12%);
  --background-alt: hsl(28, 20%, 18%);
  --card: hsl(28, 25%, 16%);
  --popover: hsl(28, 25%, 14%);
  --foreground: hsl(35, 30%, 94%);
  --card-foreground: hsl(35, 30%, 94%);
  --popover-foreground: hsl(35, 30%, 94%);
  --muted-foreground: hsl(35, 20%, 65%);
  --border: hsl(28, 15%, 28%);
  --input: hsl(28, 15%, 25%);
  --muted: hsl(28, 15%, 22%);
  --secondary: hsl(28, 15%, 22%);
  --secondary-foreground: hsl(35, 30%, 94%);
  --primary: hsl(42, 78%, 60%);
  --primary-foreground: hsl(25, 35%, 15%);
  --accent: hsl(38, 90%, 65%);
  --accent-foreground: hsl(25, 35%, 15%);
  --ring: hsl(42, 78%, 65%);
  --heritage-burgundy: hsl(42, 78%, 60%);
  --heritage-teal: hsl(40, 85%, 65%);
  --heritage-brown: hsl(35, 30%, 94%);
  --heritage-gray: hsl(28, 15%, 28%);
  --heritage-gray-dark: hsl(28, 15%, 32%);
  --parchment: var(--background);
  --parchment-dark: var(--card);
  --heritage-gold: hsl(42, 95%, 70%);
  --heritage-cream: var(--card);
  --destructive: hsl(0, 70%, 50%);
  --destructive-foreground: hsl(0, 0%, 100%);
}

@layer base {
  * {
    @apply border-border;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  html {
    overflow-x: hidden;
    scroll-behavior: smooth;
  }
  body {
    @apply bg-background text-foreground font-sans antialiased;
    font-family: "Lato", sans-serif;
    width: 100%;
    overflow-x: hidden;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "Playfair Display", serif;
  }
}

@layer components {
  .heritage-bg {
    background: var(--parchment);
    position: relative;
  }
  .dark .heritage-bg {
    background: var(--background);
  }
  .heritage-bg::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: radial-gradient(
        circle at 25% 25%,
        hsla(42, 78%, 60%, 0.05) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 75% 75%,
        hsla(45, 80%, 55%, 0.03) 0%,
        transparent 50%
      );
    pointer-events: none;
    opacity: 0.5;
  }

  .bg-background-alt {
    background-color: var(--background-alt);
  }
  .bg-gradient-s-brown {
    background-image: linear-gradient(
      160deg,
      var(--background-alt) 0%,
      var(--background) 100%
    );
  }
  .bg-gradient-dark-brown {
    background-image: linear-gradient(
      180deg,
      hsl(28, 25%, 15%) 0%,
      hsl(28, 25%, 12%) 100%
    );
  }

  .heritage-text {
    color: var(--heritage-brown);
  }
  .heritage-burgundy {
    color: var(--heritage-burgundy);
  }
  .heritage-teal {
    color: var(--heritage-teal);
  }
  .heritage-gold {
    color: var(--heritage-gold);
  }

  .btn-heritage-burgundy {
    background: var(--heritage-burgundy);
    color: var(--primary-foreground);
    border: 1px solid hsla(42, 78%, 50%, 0.5);
    @apply hover:shadow-lg hover:scale-105 transition-all duration-200;
  }
  .dark .btn-heritage-burgundy {
    box-shadow: 0 4px 20px hsla(42, 78%, 60%, 0.15);
  }

  .btn-heritage-teal {
    background: var(--heritage-teal);
    color: var(--accent-foreground);
    border: 1px solid hsla(40, 85%, 55%, 0.5);
    @apply hover:shadow-lg hover:scale-105 transition-all duration-200;
  }
  .dark .btn-heritage-teal {
    box-shadow: 0 4px 20px hsla(40, 85%, 65%, 0.15);
  }
  .heritage-border {
    border-color: var(--heritage-gray);
  }

  .heritage-card {
    background: var(--card);
    border: 1px solid var(--heritage-gray);
    border-radius: var(--radius);
    box-shadow: 0 4px 12px hsla(30, 8%, 15%, 0.05);
    @apply transition-all duration-200 hover:shadow-lg hover:border-opacity-60;
  }

  .person-node {
    @apply cursor-pointer transition-all duration-300 hover:shadow-xl hover:scale-105;
    background: var(--card);
    border: 2px solid var(--heritage-gray);
    border-radius: 12px;
    box-shadow: 0 4px 20px hsla(25, 20%, 12%, 0.2);
  }
  .person-node:hover {
    box-shadow: 0 8px 32px hsla(25, 20%, 12%, 0.3);
  }

  .family-gierczak {
    border-color: var(--heritage-burgundy);
  }
  .family-ofiara {
    border-color: var(--heritage-teal);
  }

  .elegant-separator {
    position: relative;
    text-align: center;
    margin: 2rem 0;
  }

  .elegant-separator::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      var(--heritage-gray),
      transparent
    );
  }
  .elegant-separator span {
    background: var(--background);
    padding: 0 1rem;
    color: var(--heritage-brown);
    font-weight: 500;
  }

  .heritage-gradient-text {
    background: linear-gradient(
      135deg,
      var(--heritage-burgundy) 0%,
      var(--heritage-teal) 100%
    );
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: 600;
  }

  .scroll-to-top-btn {
    background-color: var(--heritage-brown);
    color: var(--parchment);
    border: 1px solid var(--heritage-gray);
    @apply opacity-80 hover:opacity-100 transition-all duration-300 ease-in-out hover:scale-110 hover:shadow-2xl;
  }

  .dark .scroll-to-top-btn {
    background-color: var(--primary);
    color: var(--primary-foreground);
    border: 1px solid hsl(42, 78%, 70%);
  }

  .custom-lightbox .yarl__button {
    opacity: 1 !important;
    pointer-events: auto !important;
    background-color: rgba(30, 30, 30, 0.2);
    transition: background-color 0.2s;
  }

  .custom-lightbox .yarl__button:hover {
    background-color: rgba(30, 30, 30, 0.4);
  }
}
