type LocalizedString = {
  pl: string;
  en: string;
};

export type Marriage = {
  spouseId: number;
  date?: string | null;
  place?: string | null;
};

export type Anecdote = {
  pl: string;
  en: string;
};

export type Person = {
  id: number;
  firstName: string;
  lastName: string;
  maidenName?: string | null;
  birthDate?: string | null;
  deathDate?: string | null;
  birthPlace?: string | null;
  deathPlace?: string | null;
  occupation: LocalizedString | string | null;
  biography: LocalizedString | string | null;
  family: "gierczak" | "ofiara";
  photoUrl?: string | null;
  parentIds?: number[];
  spouseIds?: number[];
  childIds?: number[];
  marriages?: Marriage[];
  anecdotes?: Anecdote[];
};

export type DocumentType =
  | "marriage_record"
  | "death_record"
  | "birth_record"
  | "photo"
  | "genealogy_chart"
  | "other";

export type Document = {
  id: number;
  personId?: number;
  title: string;
  type: DocumentType;
  description?: string;
  imageUrl: string;
};

export type Place = {
  id: string;
  name: string;
  context?: "gierczak" | "ofiara";
  description: LocalizedString | string;
  imageUrl: string;
};

export type InsertPerson = Omit<Person, "id">;
export type InsertDocument = Omit<Document, "id">;


---------------------------

// src/lib/genealogyUtils.ts
import { Person } from "@shared/schema";

export interface FamilyUnit {
  parents: Person[];
  children: Person[];
}

const sortByBirthDate = (a: Person, b: Person): number => {
  const getYear = (p: Person) => {
    const yearStr = p.birthDate?.substring(0, 4);
    return yearStr && !isNaN(parseInt(yearStr)) ? parseInt(yearStr) : 9999;
  };
  return getYear(a) - getYear(b);
};

const sortParents = (a: Person, b: Person): number => {
  const aIsWife = !!a.maidenName;
  const bIsWife = !!b.maidenName;

  if (aIsWife && !bIsWife) {
    return 1;
  }
  if (!aIsWife && bIsWife) {
    return -1;
  }

  return sortByBirthDate(a, b);
};

function getFullBranch(
  rootPeople: Person[],
  peopleMap: Map<number, Person>
): Person[] {
  const fullBranchSet = new Set<Person>();
  const queue = [...rootPeople];
  const processedIds = new Set<number>();

  while (queue.length > 0) {
    const person = queue.shift();
    if (!person || processedIds.has(person.id)) continue;

    processedIds.add(person.id);
    fullBranchSet.add(person);

    (person.spouseIds ?? []).forEach((spouseId) => {
      const spouse = peopleMap.get(spouseId);
      if (spouse) fullBranchSet.add(spouse);
    });

    (person.childIds ?? []).forEach((childId) => {
      const child = peopleMap.get(childId);
      if (child) queue.push(child);
    });
  }
  return Array.from(fullBranchSet);
}

export function getFamilyStructure(
  familyTag: "gierczak" | "ofiara",
  allPeople: Person[]
): { progenitorUnit: FamilyUnit | null; descendantUnits: FamilyUnit[] } {
  if (allPeople.length === 0) {
    return { progenitorUnit: null, descendantUnits: [] };
  }

  const peopleMap = new Map(allPeople.map((p) => [p.id, p]));

  const initialRoots = allPeople.filter(
    (p) =>
      p.family === familyTag &&
      !(p.parentIds ?? []).some((id) => peopleMap.get(id)?.family === familyTag)
  );

  const progenitorBio = initialRoots.find((p) => {
    if (typeof p.biography !== "object" || p.biography === null) return false;
    const bioPL = p.biography.pl?.toLowerCase() || "";
    const bioEN = p.biography.en?.toLowerCase() || "";
    return bioPL.includes("protoplasta") || bioEN.includes("progenitor");
  });

  const mainProgenitor = progenitorBio ?? initialRoots.sort(sortByBirthDate)[0];

  if (!mainProgenitor) {
    return { progenitorUnit: null, descendantUnits: [] };
  }

  const branchPeople = getFullBranch([mainProgenitor], peopleMap);
  const branchPeopleIds = new Set(branchPeople.map((p) => p.id));

  const progenitorSpouses = (mainProgenitor.spouseIds ?? [])
    .map((id) => peopleMap.get(id))
    .filter((p): p is Person => p !== undefined);

  const progenitorChildren = (mainProgenitor.childIds ?? [])
    .map((id) => peopleMap.get(id))
    .filter((p): p is Person => p !== undefined && branchPeopleIds.has(p.id))
    .sort(sortByBirthDate);

  const progenitorUnit: FamilyUnit = {
    parents: [mainProgenitor, ...progenitorSpouses].sort(sortParents),
    children: progenitorChildren,
  };

  const descendantUnits: FamilyUnit[] = [];
  const processedParentIds = new Set<number>([
    mainProgenitor.id,
    ...progenitorSpouses.map((s) => s.id),
  ]);

  function buildDescendantUnits(children: Person[]) {
    for (const child of children) {
      if (processedParentIds.has(child.id)) continue;

      const grandChildren = (child.childIds ?? [])
        .map((id) => peopleMap.get(id))
        .filter(
          (p): p is Person => p !== undefined && branchPeopleIds.has(p.id)
        )
        .sort(sortByBirthDate);

      // KLUCZOWA ZMIANA: Twórz jednostkę tylko jeśli osoba ma dzieci
      if ((child.childIds ?? []).length > 0) {
        processedParentIds.add(child.id);

        const childSpouses = (child.spouseIds ?? [])
          .map((id) => peopleMap.get(id))
          .filter((p): p is Person => p !== undefined);

        childSpouses.forEach((spouse) => processedParentIds.add(spouse.id));

        descendantUnits.push({
          parents: [child, ...childSpouses].sort(sortParents),
          children: grandChildren,
        });

        // Kontynuuj rekurencję tylko dla tych, którzy mieli dzieci
        if (grandChildren.length > 0) {
          buildDescendantUnits(grandChildren);
        }
      }
    }
  }

  buildDescendantUnits(progenitorChildren);

  return { progenitorUnit, descendantUnits };
}


-------------------------------

import { User, Calendar, MapPin, MessageSquare } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Person } from "@shared/schema";
import { useLanguage } from "@/hooks/useLanguage";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface PersonCardProps {
  person: Person;
  onClick: () => void;
}

export default function PersonCard({ person, onClick }: PersonCardProps) {
  const { t, language } = useLanguage();
  const isGierczak = person.family === "gierczak";
  const accentColor = isGierczak
    ? "text-[hsl(var(--heritage-burgundy))]"
    : "text-[hsl(var(--heritage-teal))]";
  const hasAnecdotes = person.anecdotes && person.anecdotes.length > 0;

  const getOccupationText = (p: Person) => {
    if (!p.occupation) return null;
    if (typeof p.occupation === "object") {
      return (
        p.occupation[language as keyof typeof p.occupation] || p.occupation.pl
      );
    }
    return p.occupation;
  };

  const occupationText = getOccupationText(person);

  return (
    <TooltipProvider delayDuration={200}>
      <Card
        className="cursor-pointer hover:shadow-md transition-shadow heritage-border"
        onClick={onClick}
      >
        <CardContent className="p-4">
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 bg-stone-200 rounded-full flex items-center justify-center flex-shrink-0">
              {person.photoUrl ? (
                <img
                  src={person.photoUrl}
                  alt={`${person.firstName} ${person.lastName}`}
                  className="w-full h-full rounded-full object-cover"
                  loading="lazy"
                />
              ) : (
                <User className="w-6 h-6 text-stone-500" />
              )}
            </div>

            <div className="flex-1 min-w-0">
              <div className="flex items-center">
                <h4 className="font-semibold heritage-text truncate">
                  {person.firstName} {person.lastName}
                  {person.maidenName && (
                    <span className="text-sm ml-1">
                      ({t("person.maidenName")} {person.maidenName})
                    </span>
                  )}
                </h4>
                {hasAnecdotes && (
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <MessageSquare className="w-3.5 h-3.5 text-stone-400 ml-2 flex-shrink-0" />
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{t("person.hasAnecdotes")}</p>
                    </TooltipContent>
                  </Tooltip>
                )}
              </div>

              {(person.birthDate || person.deathDate) && (
                <p className="text-sm text-stone-600 dark:text-slate-300 flex items-center">
                  <Calendar className="w-3 h-3 mr-1" />
                  {person.birthDate}
                  {person.deathDate ? `-${person.deathDate}` : ""}
                </p>
              )}

              {person.birthPlace && (
                <p className="text-xs text-stone-500 flex items-center">
                  <MapPin className="w-3 h-3 mr-1" />
                  {t("person.born")} {person.birthPlace}
                </p>
              )}

              {occupationText && (
                <p className={`text-xs ${accentColor} font-medium`}>
                  {occupationText}
                </p>
              )}
            </div>

            <div className={`${accentColor}`}>
              <svg
                className="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M9 5l7 7-7 7"
                />
              </svg>
            </div>
          </div>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
}


-------------------------

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogClose,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import {
  User,
  Calendar,
  MapPin,
  Briefcase,
  Users,
  X,
  MessageSquareText,
} from "lucide-react";
import { Person } from "@shared/schema";
import { useLanguage } from "@/hooks/useLanguage";

interface PersonModalProps {
  person: Person | null;
  isOpen: boolean;
  onClose: () => void;
  onPersonClick: (person: Person) => void;
  allPeople: Person[];
}

const formatDate = (dateString: string | null | undefined, locale: string) => {
  if (!dateString || dateString === "?") return "?";
  if (
    /^\d{4}$/.test(dateString) ||
    /^\d{4}s$/.test(dateString) ||
    /^\d{4} \?$/.test(dateString) ||
    /^\d{4}xx$/.test(dateString)
  )
    return dateString;
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return dateString;
    return new Intl.DateTimeFormat(locale, {
      day: "numeric",
      month: "long",
      year: "numeric",
    }).format(date);
  } catch (e) {
    return dateString;
  }
};

export default function PersonModal({
  person,
  isOpen,
  onClose,
  onPersonClick,
  allPeople,
}: PersonModalProps) {
  const { t, language } = useLanguage();

  if (!person) return null;

  const getDynamicText = (
    field: { pl: string; en: string } | string | null | undefined
  ) => {
    if (!field) return null;
    if (typeof field === "object" && field !== null && "pl" in field) {
      return field[language as keyof typeof field] || field.pl;
    }
    return field;
  };

  const occupationText = getDynamicText(person.occupation);
  const biographyText = getDynamicText(person.biography);
  const hasAnecdotes = person.anecdotes && person.anecdotes.length > 0;

  const parents = person.parentIds
    ? allPeople.filter((p) => person.parentIds!.includes(p.id))
    : [];
  const spouses = person.spouseIds
    ? allPeople.filter((p) => person.spouseIds!.includes(p.id))
    : [];
  const children = person.childIds
    ? allPeople.filter((p) => person.childIds!.includes(p.id))
    : [];

  const familyName =
    person.family === "gierczak" ? t("family.gierczak") : t("family.ofiara");
  const familyColor =
    person.family === "gierczak" ? "heritage-burgundy" : "heritage-teal";

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="w-[95%] max-w-2xl max-h-[90vh] bg-stone-50 dark:bg-background-alt">
        <DialogHeader>
          <DialogTitle className="font-serif text-2xl heritage-text">
            {person.firstName} {person.lastName}
            {person.maidenName &&
              ` (${t("person.maidenName")} ${person.maidenName})`}
          </DialogTitle>
          <DialogDescription className={`${familyColor}`}>
            {familyName}
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="max-h-[70vh] pr-4">
          <div className="space-y-6">
            <div className="flex flex-col md:flex-row gap-6">
              <div className="md:w-1/3 flex-shrink-0">
                <div className="w-48 h-48 bg-stone-200 dark:bg-background rounded-lg mx-auto flex items-center justify-center">
                  {person.photoUrl ? (
                    <img
                      src={person.photoUrl}
                      alt={`${person.firstName} ${person.lastName}`}
                      className="w-full h-full rounded-lg object-cover"
                      loading="lazy"
                    />
                  ) : (
                    <User className="w-16 h-16 text-muted-foreground" />
                  )}
                </div>
              </div>
              <div className="md:w-2/3 space-y-4">
                {(person.birthDate || person.deathDate) && (
                  <div className="flex items-start space-x-3">
                    <Calendar className="w-4 h-4 text-muted-foreground mt-1" />
                    <div>
                      {person.birthDate && (
                        <span className="heritage-text">
                          {t("person.born")}:{" "}
                          {formatDate(person.birthDate, language)}
                        </span>
                      )}
                      {person.deathDate && (
                        <span className="block heritage-text">
                          {t("person.died")}:{" "}
                          {formatDate(person.deathDate, language)}
                        </span>
                      )}
                    </div>
                  </div>
                )}
                {person.birthPlace && (
                  <div className="flex items-center space-x-3">
                    <MapPin className="w-4 h-4 text-muted-foreground" />
                    <span className="heritage-text">
                      {t("person.bornIn")}: {person.birthPlace}
                    </span>
                  </div>
                )}
                {occupationText && (
                  <div className="flex items-center space-x-3">
                    <Briefcase className="w-4 h-4 text-muted-foreground" />
                    <span className="heritage-text">{occupationText}</span>
                  </div>
                )}
              </div>
            </div>
            {biographyText && (
              <div>
                <h4 className="font-semibold heritage-text mb-3 flex items-center">
                  <User className="w-4 h-4 mr-2" />
                  {t("person.biography")}
                </h4>
                <p className="text-muted-foreground leading-relaxed whitespace-pre-wrap">
                  {biographyText}
                </p>
              </div>
            )}
            {hasAnecdotes && (
              <div>
                <h4 className="font-semibold heritage-text mb-3 flex items-center">
                  <MessageSquareText className="w-4 h-4 mr-2" />
                  {t("person.anecdotes")}
                </h4>
                <div className="space-y-4">
                  {person.anecdotes?.map((anecdote, index) => (
                    <blockquote
                      key={index}
                      className="border-l-4 border-heritage-gray dark:border-heritage-gold pl-4 italic text-muted-foreground"
                    >
                      {getDynamicText(anecdote)}
                    </blockquote>
                  ))}
                </div>
              </div>
            )}
            <div>
              <h4 className="font-semibold heritage-text mb-3 flex items-center">
                <Users className="w-4 h-4 mr-2" />
                {t("person.family")}
              </h4>
              <div className="space-y-4">
                {parents.length > 0 && (
                  <div>
                    <h5 className="font-medium text-sm heritage-text mb-2">
                      {t("person.parents")}:
                    </h5>
                    <div className="flex flex-wrap gap-2">
                      {parents.map((p) => (
                        <Badge
                          key={p.id}
                          variant="secondary"
                          className="cursor-pointer bg-stone-100 dark:bg-card hover:bg-stone-200 dark:hover:bg-border"
                          onClick={() => onPersonClick(p)}
                        >
                          {p.firstName} {p.lastName}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
                {spouses.length > 0 && (
                  <div>
                    <h5 className="font-medium text-sm heritage-text mb-2">
                      {t("person.spouse")}:
                    </h5>
                    <div className="flex flex-col gap-2 items-start">
                      {spouses.map((spouse) => {
                        const marriage = person.marriages?.find(
                          (m) => m.spouseId === spouse.id
                        );
                        return (
                          <div
                            key={spouse.id}
                            className="flex items-center gap-2 bg-stone-100 dark:bg-card rounded-full pr-3"
                          >
                            <Badge
                              variant="secondary"
                              className="cursor-pointer bg-stone-100 dark:bg-card hover:bg-stone-200 dark:hover:bg-border rounded-full py-1"
                              onClick={() => onPersonClick(spouse)}
                            >
                              {spouse.firstName} {spouse.lastName}
                            </Badge>
                            {marriage?.date && (
                              <span className="text-xs text-muted-foreground">
                                ({t("person.marriedOn")}:{" "}
                                {formatDate(marriage.date, language)})
                              </span>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}
                {children.length > 0 && (
                  <div>
                    <h5 className="font-medium text-sm heritage-text mb-2">
                      {t("person.children")}:
                    </h5>
                    <div className="flex flex-wrap gap-2">
                      {children.map((p) => (
                        <Badge
                          key={p.id}
                          variant="secondary"
                          className="cursor-pointer bg-stone-100 dark:bg-card hover:bg-stone-200 dark:hover:bg-border"
                          onClick={() => onPersonClick(p)}
                        >
                          {p.firstName} {p.lastName}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </ScrollArea>
        <DialogClose className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </DialogClose>
      </DialogContent>
    </Dialog>
  );
}


------------------------------------

import React from "react";
import { Handle, Position, NodeProps } from "reactflow";
import { User, Calendar, MessageSquare } from "lucide-react";
import { Person } from "@shared/schema";
import { useLanguage } from "@/hooks/useLanguage";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

type PersonNodeData = {
  person: Person;
  onClick: () => void;
  family: "gierczak" | "ofiara";
};

const formatDate = (dateString: string | null | undefined, locale: string) => {
  if (!dateString) return "?";
  if (/^\d{4}$/.test(dateString)) {
    return dateString;
  }
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return dateString;
    return new Intl.DateTimeFormat(locale).format(date);
  } catch (e) {
    return dateString;
  }
};

export default function PersonNode({ data }: NodeProps<PersonNodeData>) {
  const { t, language } = useLanguage();
  const { person, onClick, family } = data;
  const isGierczak = family === "gierczak";

  const borderColor = isGierczak
    ? "border-heritage-burgundy"
    : "border-heritage-teal";

  const birth = formatDate(person.birthDate, language);
  const death = formatDate(person.deathDate, language);
  const lifeSpan = `${birth} - ${death}`;
  const hasAnecdotes = person.anecdotes && person.anecdotes.length > 0;

  return (
    <TooltipProvider delayDuration={200}>
      <div
        className={`person-node bg-white dark:bg-stone-800 border-2 ${borderColor} rounded-lg p-3 shadow-md cursor-pointer hover:shadow-lg transition-all w-[240px]`}
        onClick={onClick}
      >
        <Handle
          type="target"
          position={Position.Top}
          className="!bg-stone-400"
        />
        <div className="flex items-center gap-3">
          <div className="w-16 h-16 bg-stone-200 dark:bg-stone-700 rounded-full flex-shrink-0 flex items-center justify-center">
            {person.photoUrl ? (
              <img
                src={person.photoUrl}
                alt={`${person.firstName} ${person.lastName}`}
                className="w-full h-full rounded-full object-cover"
              />
            ) : (
              <User className="w-8 h-8 text-stone-500" />
            )}
          </div>
          <div className="flex-grow min-w-0">
            <div className="flex items-center">
              <h4 className="font-semibold text-base heritage-text mb-1 break-words">
                {person.firstName} {person.lastName}
              </h4>
              {hasAnecdotes && (
                <Tooltip>
                  <TooltipTrigger asChild>
                    <MessageSquare className="w-3 h-3 text-stone-400 ml-1.5 mb-1 flex-shrink-0" />
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>{t("person.hasAnecdotes")}</p>
                  </TooltipContent>
                </Tooltip>
              )}
            </div>
            {(person.birthDate || person.deathDate) && (
              <p className="text-xs text-stone-600 dark:text-stone-400 flex items-center">
                <Calendar className="w-3 h-3 mr-1.5 flex-shrink-0" />
                <span>{lifeSpan}</span>
              </p>
            )}
          </div>
        </div>
        <Handle
          type="source"
          position={Position.Bottom}
          className="!bg-stone-400"
        />
      </div>
    </TooltipProvider>
  );
}


----------------------------

// src/components/PersonModal.tsx

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogClose,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import {
  User,
  Calendar,
  MapPin,
  Briefcase,
  Users,
  X,
  MessageSquareText,
} from "lucide-react";
import { Person } from "@shared/schema";
import { useLanguage } from "@/hooks/useLanguage";

interface PersonModalProps {
  person: Person | null;
  isOpen: boolean;
  onClose: () => void;
  onPersonClick: (person: Person) => void;
  allPeople: Person[];
}

const formatDate = (dateString: string | null | undefined, locale: string) => {
  if (!dateString || dateString === "?") return "?";
  if (
    /^\d{4}$/.test(dateString) ||
    /^\d{4}s$/.test(dateString) ||
    /^\d{4} \?$/.test(dateString) ||
    /^\d{4}xx$/.test(dateString)
  )
    return dateString;
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return dateString;
    return new Intl.DateTimeFormat(locale, {
      day: "numeric",
      month: "long",
      year: "numeric",
    }).format(date);
  } catch (e) {
    return dateString;
  }
};

export default function PersonModal({
  person,
  isOpen,
  onClose,
  onPersonClick,
  allPeople,
}: PersonModalProps) {
  const { t, language } = useLanguage();

  if (!person) return null;

  const getDynamicText = (
    field: { pl: string; en: string } | string | null | undefined
  ) => {
    if (!field) return null;
    if (typeof field === "object" && field !== null && "pl" in field) {
      return field[language as keyof typeof field] || field.pl;
    }
    return field;
  };

  const occupationText = getDynamicText(person.occupation);
  const biographyText = getDynamicText(person.biography);
  const hasAnecdotes = person.anecdotes && person.anecdotes.length > 0;

  const parents = person.parentIds
    ? allPeople.filter((p) => person.parentIds!.includes(p.id))
    : [];
  const spouses = person.spouseIds
    ? allPeople.filter((p) => person.spouseIds!.includes(p.id))
    : [];
  const children = person.childIds
    ? allPeople.filter((p) => person.childIds!.includes(p.id))
    : [];

  const familyName =
    person.family === "gierczak" ? t("family.gierczak") : t("family.ofiara");
  const familyColor =
    person.family === "gierczak" ? "heritage-burgundy" : "heritage-teal";

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="w-[95%] max-w-2xl max-h-[90vh] bg-stone-50 dark:bg-background-alt">
        <DialogHeader>
          <DialogTitle className="font-serif text-2xl heritage-text">
            {person.firstName} {person.lastName}
            {person.maidenName &&
              ` (${t("person.maidenName")} ${person.maidenName})`}
          </DialogTitle>
          <DialogDescription className={`${familyColor}`}>
            {familyName}
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="max-h-[70vh] pr-4">
          <div className="space-y-6">
            <div className="flex flex-col md:flex-row gap-6">
              <div className="md:w-1/3 flex-shrink-0">
                <div className="w-48 h-48 bg-stone-200 dark:bg-background rounded-lg mx-auto flex items-center justify-center">
                  {person.photoUrl ? (
                    <img
                      src={person.photoUrl}
                      alt={`${person.firstName} ${person.lastName}`}
                      className="w-full h-full rounded-lg object-cover"
                      loading="lazy"
                    />
                  ) : (
                    <User className="w-16 h-16 text-muted-foreground" />
                  )}
                </div>
              </div>
              <div className="md:w-2/3 space-y-4">
                {/* KLUCZOWA ZMIANA: Aktualizacja warunku */}
                {(person.birthDate ||
                  person.birthDateNote ||
                  person.deathDate) && (
                  <div className="flex items-start space-x-3">
                    <Calendar className="w-4 h-4 text-muted-foreground mt-1" />
                    <div>
                      {/* KLUCZOWA ZMIANA: Aktualizacja logiki wyświetlania */}
                      {(person.birthDate || person.birthDateNote) && (
                        <span className="heritage-text">
                          {t("person.born")}:{" "}
                          {formatDate(
                            person.birthDateNote || person.birthDate,
                            language
                          )}
                        </span>
                      )}
                      {person.deathDate && (
                        <span className="block heritage-text">
                          {t("person.died")}:{" "}
                          {formatDate(person.deathDate, language)}
                        </span>
                      )}
                    </div>
                  </div>
                )}
                {person.birthPlace && (
                  <div className="flex items-center space-x-3">
                    <MapPin className="w-4 h-4 text-muted-foreground" />
                    <span className="heritage-text">
                      {t("person.bornIn")}: {person.birthPlace}
                    </span>
                  </div>
                )}
                {occupationText && (
                  <div className="flex items-center space-x-3">
                    <Briefcase className="w-4 h-4 text-muted-foreground" />
                    <span className="heritage-text">{occupationText}</span>
                  </div>
                )}
              </div>
            </div>
            {biographyText && (
              <div>
                <h4 className="font-semibold heritage-text mb-3 flex items-center">
                  <User className="w-4 h-4 mr-2" />
                  {t("person.biography")}
                </h4>
                <p className="text-muted-foreground leading-relaxed whitespace-pre-wrap">
                  {biographyText}
                </p>
              </div>
            )}
            {hasAnecdotes && (
              <div>
                <h4 className="font-semibold heritage-text mb-3 flex items-center">
                  <MessageSquareText className="w-4 h-4 mr-2" />
                  {t("person.anecdotes")}
                </h4>
                <div className="space-y-4">
                  {person.anecdotes?.map((anecdote, index) => (
                    <blockquote
                      key={index}
                      className="border-l-4 border-heritage-gray dark:border-heritage-gold pl-4 italic text-muted-foreground"
                    >
                      {getDynamicText(anecdote)}
                    </blockquote>
                  ))}
                </div>
              </div>
            )}
            <div>
              <h4 className="font-semibold heritage-text mb-3 flex items-center">
                <Users className="w-4 h-4 mr-2" />
                {t("person.family")}
              </h4>
              <div className="space-y-4">
                {parents.length > 0 && (
                  <div>
                    <h5 className="font-medium text-sm heritage-text mb-2">
                      {t("person.parents")}:
                    </h5>
                    <div className="flex flex-wrap gap-2">
                      {parents.map((p) => (
                        <Badge
                          key={p.id}
                          variant="secondary"
                          className="cursor-pointer bg-stone-100 dark:bg-card hover:bg-stone-200 dark:hover:bg-border"
                          onClick={() => onPersonClick(p)}
                        >
                          {p.firstName} {p.lastName}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
                {spouses.length > 0 && (
                  <div>
                    <h5 className="font-medium text-sm heritage-text mb-2">
                      {t("person.spouse")}:
                    </h5>
                    <div className="flex flex-col gap-2 items-start">
                      {spouses.map((spouse) => {
                        const marriage = person.marriages?.find(
                          (m) => m.spouseId === spouse.id
                        );
                        return (
                          <div
                            key={spouse.id}
                            className="flex items-center gap-2 bg-stone-100 dark:bg-card rounded-full pr-3"
                          >
                            <Badge
                              variant="secondary"
                              className="cursor-pointer bg-stone-100 dark:bg-card hover:bg-stone-200 dark:hover:bg-border rounded-full py-1"
                              onClick={() => onPersonClick(spouse)}
                            >
                              {spouse.firstName} {spouse.lastName}
                            </Badge>
                            {marriage?.date && (
                              <span className="text-xs text-muted-foreground">
                                ({t("person.marriedOn")}:{" "}
                                {formatDate(marriage.date, language)})
                              </span>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}
                {children.length > 0 && (
                  <div>
                    <h5 className="font-medium text-sm heritage-text mb-2">
                      {t("person.children")}:
                    </h5>
                    <div className="flex flex-wrap gap-2">
                      {children.map((p) => (
                        <Badge
                          key={p.id}
                          variant="secondary"
                          className="cursor-pointer bg-stone-100 dark:bg-card hover:bg-stone-200 dark:hover:bg-border"
                          onClick={() => onPersonClick(p)}
                        >
                          {p.firstName} {p.lastName}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </ScrollArea>
        <DialogClose className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </DialogClose>
      </DialogContent>
    </Dialog>
  );
}
